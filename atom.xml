<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ZpureBlog</title>
  
  <subtitle>www.zpure.xyz</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.zpure.xyz/"/>
  <updated>2020-05-05T14:08:17.710Z</updated>
  <id>http://www.zpure.xyz/</id>
  
  <author>
    <name>zpure</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>git-tutorial</title>
    <link href="http://www.zpure.xyz/2020/04/28/git-tutorial/"/>
    <id>http://www.zpure.xyz/2020/04/28/git-tutorial/</id>
    <published>2020-04-28T14:14:51.000Z</published>
    <updated>2020-05-05T14:08:17.710Z</updated>
    
    <content type="html"><![CDATA[<p>git网上有很多经典的教程，比如廖雪峰的<a href="https://www.liaoxuefeng.com/wiki/896043488029600/896067074338496" target="_blank" rel="noopener">Git教程</a></p><p>不过，秉承“只有自己总结的东西才是自己的”观念，还是做了自己的笔记。</p><p>学习的顺序应该为：</p><ul><li>学习廖的课程</li><li>做自己的笔记，形成自己的知识</li><li><strong><em>再回去好好细读廖的教程，发现一些之前未发现的、未理解的内容</em></strong></li></ul><h1 id="git-help-的使用"><a href="#git-help-的使用" class="headerlink" title="git help 的使用"></a>git help 的使用</h1><p>工具，都是熟能生巧。掌握基本方法，多看官方git help 才是正道。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> help 功能全览</span><br><span class="line">git help</span><br><span class="line"><span class="meta">#</span> 查看帮助手册</span><br><span class="line">git help git</span><br><span class="line"><span class="meta">#</span> 如果不知道下一步怎么操作</span><br><span class="line">git status #git status会列出当前的状态，并提示接下来的操作！！</span><br></pre></td></tr></table></figure><h1 id="git的优势"><a href="#git的优势" class="headerlink" title="git的优势"></a>git的优势</h1><ol><li>分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步，真是太方便了！</li><li>远程库既可以作为备份，又可以让其他人通过该仓库来协作。</li><li>因为创建、合并和删除分支非常快，所以Git鼓励你使用分支完成某个任务，合并后再删掉分支，这和直接在<code>master</code>分支上工作效果是一样的，但过程更安全。</li></ol><h1 id="git线上网页版使用说明"><a href="#git线上网页版使用说明" class="headerlink" title="git线上网页版使用说明"></a>git线上网页版使用说明</h1><p>git本地提交之后，线上有个最后审核步骤，有实操后总结在这里。</p><h1 id="git的基本操作"><a href="#git的基本操作" class="headerlink" title="git的基本操作"></a>git的基本操作</h1><h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><p>官网下载，一路next。（windows）</p><h2 id="设置username和email"><a href="#设置username和email" class="headerlink" title="设置username和email"></a>设置username和email</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> --global是全局参数，对局部仓库也可以单独设置name和email</span><br><span class="line"><span class="meta">$</span> git config --global user.name "Your Name"</span><br><span class="line"><span class="meta">$</span> git config --global user.email "email@example.com"</span><br></pre></td></tr></table></figure><h2 id="使用SSH协议连接本地库与远程库"><a href="#使用SSH协议连接本地库与远程库" class="headerlink" title="使用SSH协议连接本地库与远程库"></a>使用SSH协议连接本地库与远程库</h2><p><code>id_rsa</code>是私钥，不能泄露出去，<code>id_rsa.pub</code>是公钥，可以放心地告诉任何人。</p>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 本地的git仓库与远程库使用SSH（secure shell）进行加密传输</span><br><span class="line"><span class="meta">#</span> 本地创建SSH Key</span><br><span class="line"><span class="meta">#</span> 查看根目录下是否有.ssh文件，以及.ssh/id_rsa 和.ssh/id_rsa_pub文件是否存在</span><br><span class="line"><span class="meta">#</span>不存在</span><br><span class="line">ssh -keygen -t rsa -C "youremail@example.com"</span><br><span class="line"><span class="meta">#</span> 将公钥放在GitHub上面</span><br></pre></td></tr></table></figure><blockquote><p>为什么GitHub需要SSH Key呢？因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。</p><p>当然，GitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。</p><p>最后友情提示，在GitHub上免费托管的Git仓库，任何人都可以看到喔（但只有你自己才能改）。所以，不要把敏感信息放进去。</p><p>摘抄自<a href="https://www.liaoxuefeng.com/wiki/896043488029600/896954117292416" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/896043488029600/896954117292416</a></p></blockquote><p><strong><em>Q:</em></strong> 远程库有什么用呢？</p><p><strong><em>A:</em></strong> GitHub上的仓库既可以作为备份，又可以让其他人通过该仓库来协作</p><h2 id="先有本地库，再有远程库"><a href="#先有本地库，再有远程库" class="headerlink" title="先有本地库，再有远程库"></a>先有本地库，再有远程库</h2><h3 id="本地仓库初始化"><a href="#本地仓库初始化" class="headerlink" title="本地仓库初始化"></a>本地仓库初始化</h3>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 仓库 repository</span><br><span class="line"><span class="meta">#</span> 本地仓库初始化</span><br><span class="line">git init</span><br><span class="line"><span class="meta">#</span> 查看git配置文件</span><br><span class="line">ls -ah</span><br><span class="line"><span class="meta">#</span> 或者克隆远程库git clone（TODO）</span><br></pre></td></tr></table></figure><h3 id="本地文件新建提交仓库"><a href="#本地文件新建提交仓库" class="headerlink" title="本地文件新建提交仓库"></a>本地文件新建提交仓库</h3>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 多次add 一次提交</span><br><span class="line">git add fileName1</span><br><span class="line">git add fileName2</span><br><span class="line">git commit -m "comment content"</span><br></pre></td></tr></table></figure><h3 id="提交完毕复核"><a href="#提交完毕复核" class="headerlink" title="提交完毕复核"></a>提交完毕复核</h3>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 修改了fileName1</span><br><span class="line">git status</span><br><span class="line"><span class="meta">#</span> 查看某个文件修改前后差别（已经 add了会回退到未add状态）</span><br><span class="line"><span class="meta">#</span> 脑中要有文件状态转换图（第一幅图）</span><br><span class="line"><span class="meta">#</span> ！！diff 比较的是 add之前和之后文件的差异！！</span><br><span class="line">git diff fileName1</span><br><span class="line">git add fileName1</span><br><span class="line">git commit -m "revise fileName1"</span><br></pre></td></tr></table></figure><h3 id="版本回退（游戏存档读档）"><a href="#版本回退（游戏存档读档）" class="headerlink" title="版本回退（游戏存档读档）"></a>版本回退（游戏存档读档）</h3>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> commit的作用类似于*存档*，当出现意外，可以回到这个存档点重新开始</span><br><span class="line"><span class="meta">#</span> 查看存档点,存档点是一个HEAD指针，HEAD^表示当前存档点的前一个存档点，HEAD^^上上存档点</span><br><span class="line"><span class="meta">#</span> HEAD~100：前100个存档点</span><br><span class="line">git log</span><br><span class="line"><span class="meta">#</span>简洁版展示</span><br><span class="line">git log --pretty=oneline</span><br><span class="line"><span class="meta">#</span>显示commit id </span><br><span class="line">git relog</span><br><span class="line"><span class="meta">#</span>跳转到指定存档点</span><br><span class="line"><span class="meta">  #</span>HEAD指针可以是: 1. HEAD^这种类型的 2.指定的commit id</span><br><span class="line">git reset --hard HEAD指针</span><br></pre></td></tr></table></figure><blockquote><p>必须记住的第一张图(<strong>图一</strong>)：文件的状态流转图</p><p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200430231034597.png" alt="image-20200430231034597"></p><p>图中存在四个对象：</p><ul><li>工作区 workspace</li><li>版本库 repository<ul><li>暂存区 stage</li><li>主分支 master</li></ul></li></ul><p>包含的内容上：{stage} &gt;= {master}</p></blockquote><h3 id="详说git-diff"><a href="#详说git-diff" class="headerlink" title="详说git diff"></a>详说git diff</h3>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 根据图一</span><br><span class="line"><span class="meta">#</span> 比较工作区workspace与暂存区stage的区别</span><br><span class="line">git diff</span><br><span class="line"><span class="meta">#</span> 比较版本库主分支master与工作区workspace的区别</span><br><span class="line">git diff HEAD -- fileName</span><br></pre></td></tr></table></figure><h3 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h3><p>   第6点说到的版本回退是指stage与master一致下（stage为空），将当前maste版本切换回之前的master版本，工作区同步修改。</p><p>   撤销修改指的是撤销一个小的改动，涉及workspace/repository/stage/master之间状态的转移。</p>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>工作区修改，暂存区和主分支没有变化 撤销修改</span><br><span class="line">git status #根据提示敲入下一行命令</span><br><span class="line">git restore fileName #撤销工作区的修改（本质是用版本库覆盖工作区）</span><br><span class="line"><span class="meta">#</span>工作区修改，提交到暂存区，主分支没有变化 撤销修改</span><br><span class="line">git status</span><br><span class="line">git restore --unstage fileName #撤销暂存区的修改</span><br><span class="line">git restore fileName #撤销工作区的修改</span><br><span class="line"><span class="meta">#</span> 修改已经commit 撤销修改(版本回退)</span><br><span class="line">git reset --hard HEAD^</span><br></pre></td></tr></table></figure><h3 id="文件删除"><a href="#文件删除" class="headerlink" title="文件删除"></a>文件删除</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 新增文件并add、commit</span><br><span class="line">git add test.txt</span><br><span class="line">git commit -m "add test.txt"</span><br><span class="line"><span class="meta">$</span> git status</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use "git add/rm &lt;file&gt;..." to update what will be committed)</span><br><span class="line">  (use "git restore &lt;file&gt;..." to discard changes in working directory)</span><br><span class="line">        deleted:    test.txt</span><br><span class="line"><span class="meta">#</span>根据提示</span><br><span class="line"><span class="meta">  #</span> 如果本地删除是误操作</span><br><span class="line">git restore test.txt</span><br><span class="line"><span class="meta">  #</span> 如果确实删除某个文件</span><br><span class="line">git add test.txt # or</span><br><span class="line">git rm test.txt</span><br><span class="line">git commit -m "delete test.txt"</span><br></pre></td></tr></table></figure><h3 id="建立远程库分支与本地分支连接"><a href="#建立远程库分支与本地分支连接" class="headerlink" title="建立远程库分支与本地分支连接"></a>建立远程库分支与本地分支连接</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 1.先有本地库，再有远程库</span><br><span class="line">    # 1.1 与远程仓库建立连接</span><br><span class="line">        # 连接远程（remote）添加git@github.com:ShanggguanZpure/learn.git为远程仓库，并命名为origin</span><br><span class="line">    git remote add origin git@github.com:ShangguanZpure/learngit.git</span><br><span class="line">    # 1.2 将本地文件推送到远程库对应分支</span><br><span class="line">        #第一次提交:关联（-u）本地master分支内容到远程仓库（origin）的master分支,并推送（push）本地master分支内容到远程仓库（origin）的master分支</span><br><span class="line">        git push -u origin master</span><br><span class="line">        #第二次及以上提交：本地推送到远程仓库的master</span><br><span class="line">        git push origin master</span><br><span class="line">        # 推送本地指定分支（branch-name）到远程库(origin)指定分支(origin/branch-name)</span><br><span class="line">        git push origin branch-name origin/branch-name #远程分支可以省略，会找对应分支合并</span><br><span class="line">        </span><br><span class="line"><span class="meta">#</span> 2.先有远程库，再有本地库</span><br><span class="line"><span class="meta">#</span> 克隆远程库内容</span><br><span class="line">git clone git@github.com:ShangguanZpure/gitskills.git</span><br></pre></td></tr></table></figure><h3 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h3><h4 id="什么时候建立分支"><a href="#什么时候建立分支" class="headerlink" title="什么时候建立分支"></a>什么时候建立分支</h4><p>分支在实际中有什么用呢？假设你准备开发一个新功能，但是需要两周才能完成，第一周你写了50%的代码，如果立刻提交，由于代码还没写完，不完整的代码库会导致别人不能干活了。如果等代码全部写完再一次提交，又存在丢失每天进度的巨大风险。</p><p>现在有了分支，就不用怕了。你创建了一个属于你自己的分支，别人看不到，还继续在原来的分支上正常工作，而你在自己的分支上干活，想提交就提交，直到开发完毕后，再一次性合并到原来的分支上，这样，既安全，又不影响别人工作。</p><p>因为创建、合并和删除分支非常快，所以Git鼓励你<strong>使用分支完成某个任务</strong>，<strong>合并后再删掉分支</strong>，这和直接在<code>master</code>分支上工作效果是一样的，但过程更安全。</p><h4 id="创建与合并分支"><a href="#创建与合并分支" class="headerlink" title="创建与合并分支"></a>创建与合并分支</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 查看分支：</span><br><span class="line">git branch</span><br><span class="line"><span class="meta">#</span>创建分支：</span><br><span class="line">git branch &lt;name&gt;</span><br><span class="line"><span class="meta">#</span>切换分支：</span><br><span class="line">git checkout &lt;name&gt; #或者</span><br><span class="line">git switch &lt;name&gt;</span><br><span class="line"><span class="meta">#</span>创建+切换分支：</span><br><span class="line">git checkout -b &lt;name&gt; #或者</span><br><span class="line">git switch -c &lt;name&gt;</span><br><span class="line"><span class="meta">#</span>合并某分支到当前分支：</span><br><span class="line">git merge &lt;name&gt;</span><br><span class="line"><span class="meta">#</span>删除分支：</span><br><span class="line">git branch -d &lt;name&gt;</span><br><span class="line"><span class="meta">#</span>分支合并默认为fast forward,并且删除分支后，合并记录不保留，使用 --no-ff就会按照普通模式合并，并做一次commit提交，可以保留合并记录。举例如下：</span><br><span class="line">git switch -c dev</span><br><span class="line">vi readme.txt</span><br><span class="line"><span class="meta">#</span>修改readme.txt文件进行保存</span><br><span class="line">git add readme.txt</span><br><span class="line">git commit -m "merge -no-ff test"</span><br><span class="line">git switch master</span><br><span class="line">git merge --no-ff -m "merge with dev" dev</span><br><span class="line">git branch -d dev</span><br><span class="line">git log --graph --pretty=oneline --abbrrev-commit</span><br></pre></td></tr></table></figure><h4 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 产生冲突的原因：两个分支修改了同一个地方，且不一致。</span><br><span class="line">git merge feature1 #产生冲突</span><br><span class="line">vi conflictedFileName</span><br><span class="line"><span class="meta">#</span>手动修改不一致地方</span><br><span class="line">git add conflictedFileName</span><br><span class="line">git commit -m "conflict fixed"</span><br><span class="line"><span class="meta">#</span>删除分支</span><br><span class="line">git branch -d feature1</span><br><span class="line"><span class="meta">#</span>查看分支合并图</span><br><span class="line"><span class="meta">$</span> git log --graph --pretty=oneline --abbrev-commit</span><br></pre></td></tr></table></figure><h4 id="Bug分支：修复紧急Bug操作"><a href="#Bug分支：修复紧急Bug操作" class="headerlink" title="Bug分支：修复紧急Bug操作"></a>Bug分支：修复紧急Bug操作</h4><p>暂存（stash）现有分支的工作，切换到Bug分支修复（待测试）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>当你接到一个修复一个代号101的bug的任务时，很自然地，你想创建一个分支issue-101来修复它，但是，等等，当前正在dev上进行的工作还没有提交.</span><br><span class="line"><span class="meta">#</span> 1.存放dev分支工作区和暂存区的内容，包含：暂存区未提交的内容（暂存区与主分支区别），工作区未提交到暂存区的内容（工作区与暂存区的区别）workspace - stage - master</span><br><span class="line">git stash</span><br><span class="line"><span class="meta">#</span> 2. 确认在哪个分支上修复（假设为master，当然也可以是其他分支）</span><br><span class="line">git switch master</span><br><span class="line"><span class="meta">#</span> 3.从master分支新建Bug分支</span><br><span class="line">git switch -c issue-101</span><br><span class="line"><span class="meta">#</span> 4.修复Bug</span><br><span class="line"><span class="meta">#</span> 5.提交修改</span><br><span class="line">git add readme.txt</span><br><span class="line">git commit -m "fix bug 101"</span><br><span class="line"><span class="meta">#</span> 6.切换到主分支，提交修改</span><br><span class="line">git switch master</span><br><span class="line">git merge --no-ff -m "merged bug fix 101" issue-101</span><br><span class="line"><span class="meta">#</span> 7.切换回dev分支继续开发</span><br><span class="line">git switch dev</span><br><span class="line"><span class="meta">#</span> 8.查看dev分支状态</span><br><span class="line">git status</span><br><span class="line">git stash list #！！！</span><br><span class="line"><span class="meta">#</span> 9.恢复之前暂存的内容</span><br><span class="line">git stash apply #拉取</span><br><span class="line">git stash drop  #删除</span><br><span class="line"><span class="meta">#</span>上面两步合成一步</span><br><span class="line">git stash pop</span><br><span class="line"><span class="meta">#</span>你可以多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash</span><br><span class="line">git stash apply stash@&#123;0&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 在master分支上修复的bug，想要合并到当前dev分支，可以用git cherry-pick &lt;commit&gt;命令，把bug提交的修改“复制”到当前分支，避免重复劳动。</span><br><span class="line">git cherry-pick 4c805e2 #！！！</span><br></pre></td></tr></table></figure><h4 id="Feature-分支-开发新功能"><a href="#Feature-分支-开发新功能" class="headerlink" title="Feature 分支:开发新功能"></a>Feature 分支:开发新功能</h4><p>开发一个新feature，最好新建一个分支；</p><p>如果要丢弃一个没有被合并过的分支，可以通过<code>git branch -D</code>强行删除。</p><h4 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h4><p>多人协作一般是先有远程库，因此放到下一节里面</p><h2 id="先有远程库，再有本地库"><a href="#先有远程库，再有本地库" class="headerlink" title="先有远程库，再有本地库"></a>先有远程库，再有本地库</h2><h3 id="本地仓库初始化-1"><a href="#本地仓库初始化-1" class="headerlink" title="本地仓库初始化"></a>本地仓库初始化</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 根据SSH协议，克隆（clone）版本库git@github.com:ShangguanZpure/gitskills.git到当前目录</span><br><span class="line">git clone git@github.com:ShangguanZpure/gitskills.git</span><br><span class="line"><span class="meta">#</span> 当你从远程仓库克隆时，实际上Git自动把本地的master分支和远程的master分支对应起来了，并且，远程仓库的默认名称是origin</span><br><span class="line"><span class="meta">#</span> 从远程库clone时，默认情况下，你的小伙伴只能看到本地的master分支</span><br></pre></td></tr></table></figure><h3 id="多人协作-1"><a href="#多人协作-1" class="headerlink" title="多人协作"></a>多人协作</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 查看远程库的信息</span><br><span class="line"><span class="meta">$</span> git remote -v</span><br><span class="line">origin  git@github.com:michaelliao/learngit.git (fetch)</span><br><span class="line">origin  git@github.com:michaelliao/learngit.git (push)</span><br><span class="line"><span class="meta">#</span> 推送分支</span><br><span class="line"><span class="meta">#</span>推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上  </span><br><span class="line"><span class="meta">#</span>全格式是： git push &lt;remote&gt; local-branch-name remote/branch-name(可以省略最后一项）</span><br><span class="line"><span class="meta">$</span> git push origin master</span><br><span class="line"><span class="meta">#</span>推送其他分支，比如dev，就改成</span><br><span class="line"><span class="meta">$</span> git push origin dev</span><br><span class="line"><span class="meta">#</span> 抓取分支</span><br><span class="line"><span class="meta">#</span>要在dev分支上开发，就必须创建远程origin的dev分支到本地</span><br><span class="line"><span class="meta">$</span> git checkout -b dev origin/dev</span><br><span class="line"><span class="meta">#</span> 本地分支提交远程分支产生冲突</span><br><span class="line"><span class="meta">#</span>先用git pull把最新的提交从origin/dev抓下来，然后，在本地合并，解决冲突，再推送</span><br><span class="line"><span class="meta">$</span> git pull</span><br><span class="line">    There is no tracking information for the current branch.</span><br><span class="line">    Please specify which branch you want to merge with.</span><br><span class="line">    See git-pull(1) for details.</span><br><span class="line"></span><br><span class="line">        git pull &lt;remote&gt; &lt;branch&gt;</span><br><span class="line"></span><br><span class="line">    If you wish to set tracking information for this branch you can do so with:</span><br><span class="line"></span><br><span class="line">        git branch --set-upstream-to=origin/&lt;branch&gt; dev</span><br><span class="line">    #git pull也失败了，原因是没有指定本地dev分支与远程origin/dev分支的链接，根据提示，设置dev和origin/dev的链接：</span><br><span class="line">    $ git branch --set-upstream-to=origin/dev dev</span><br><span class="line">Branch 'dev' set up to track remote branch 'dev' from 'origin'.</span><br><span class="line"><span class="meta">#</span> 解决冲突后再次push</span><br><span class="line"><span class="meta">$</span> git push origin dev</span><br></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul><li>查看远程库信息，使用<code>git remote -v</code>；</li><li>本地新建的分支如果不推送到远程，对其他人就是不可见的；</li><li>从本地推送分支，使用<code>git push origin branch-name</code>，如果推送失败，先用<code>git pull</code>抓取远程的新提交；</li><li>在本地创建和远程分支对应的分支，使用<code>git checkout -b branch-name origin/branch-name</code>，本地和远程分支的名称最好一致；</li><li>建立本地分支和远程分支的关联，使用<code>git branch --set-upstream branch-name origin/branch-name</code>；</li><li>从远程抓取分支，使用<code>git pull</code>，如果有冲突，要先处理冲突。</li></ul><ol><li>从远程库下载代码工程</li><li>本地代码修改提交到本地仓库（指定分支）</li><li>本地代码提交到远程仓库（指定分支）</li><li>新建分支并切换</li><li>查看当前分支状态</li><li>查看本次提交之后差异（本地）</li><li>撤销本次提交</li></ol><h1 id="git的进阶操作"><a href="#git的进阶操作" class="headerlink" title="git的进阶操作"></a>git的进阶操作</h1><h1 id="git使用的注意事项"><a href="#git使用的注意事项" class="headerlink" title="git使用的注意事项"></a>git使用的注意事项</h1><h1 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h1><p>1、</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git reflog</span><br><span class="line">f7d7681 (HEAD -&gt; master) HEAD@&#123;0&#125;: commit (merge): conflict fixed</span><br><span class="line">8957634 HEAD@&#123;1&#125;: commit: &amp; simple</span><br><span class="line">5f311b8 HEAD@&#123;2&#125;: checkout: moving from feature1 to master</span><br><span class="line">c4d3fa9 (feature1) HEAD@&#123;3&#125;: commit: AND simple</span><br><span class="line">5f311b8 HEAD@&#123;4&#125;: checkout: moving from master to feature1</span><br><span class="line">5f311b8 HEAD@&#123;5&#125;: merge dev: Fast-forward</span><br><span class="line">0da8bf7 (origin/master) HEAD@&#123;6&#125;: checkout: moving from dev to master</span><br><span class="line">5f311b8 HEAD@&#123;7&#125;: commit: branch test</span><br><span class="line">0da8bf7 (origin/master) HEAD@&#123;8&#125;: checkout: moving from master to dev</span><br><span class="line">0da8bf7 (origin/master) HEAD@&#123;9&#125;: commit: delete test.txt</span><br><span class="line">09915bb HEAD@&#123;10&#125;: commit: add test.txt</span><br><span class="line">131ea24 HEAD@&#123;11&#125;: reset: moving to HEAD^</span><br><span class="line">7fe3d31 HEAD@&#123;12&#125;: commit: error content commit</span><br><span class="line">131ea24 HEAD@&#123;13&#125;: commit: git tracks changes</span><br><span class="line">d0950e0 HEAD@&#123;14&#125;: commit: understand how stage works</span><br><span class="line">d576e2b HEAD@&#123;15&#125;: reset: moving to d576e2b</span><br><span class="line">d87032b HEAD@&#123;16&#125;: reset: moving to HEAD^</span><br><span class="line">d576e2b HEAD@&#123;17&#125;: commit: add GPL</span><br><span class="line">d87032b HEAD@&#123;18&#125;: commit: add distribuye</span><br><span class="line">951d21f HEAD@&#123;19&#125;: commit (initial): creat a readme file</span><br><span class="line"><span class="meta">#</span> 第二列表示什么呢？</span><br><span class="line">表示具体的指针指向的位置。本地master指向“conflict fixed”。</span><br><span class="line"><span class="meta">#</span> 远程的master分支（origin/master）指向哪里呢？看到提交过程中多次出现？按理说，没有push操作，远程库应该没有变动才对。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      git使用总结（记下来的才是自己的）
    
    </summary>
    
    
      <category term="基础工具使用" scheme="http://www.zpure.xyz/categories/%E5%9F%BA%E7%A1%80%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
    
      <category term="管理工具" scheme="http://www.zpure.xyz/tags/%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>text-editor-skills</title>
    <link href="http://www.zpure.xyz/2020/04/21/text-editor-skills/"/>
    <id>http://www.zpure.xyz/2020/04/21/text-editor-skills/</id>
    <published>2020-04-21T15:07:08.000Z</published>
    <updated>2020-04-21T15:08:49.772Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文本编辑小技巧"><a href="#文本编辑小技巧" class="headerlink" title="文本编辑小技巧"></a>文本编辑小技巧</h2><h3 id="列编辑"><a href="#列编辑" class="headerlink" title="列编辑"></a>列编辑</h3><p>Notepad++中：</p><p>设置中<code>首选项</code>选择类操作许可，按住<code>alt</code>选中编辑的行，即可进行列元素的操作。、</p><p>比如统一的首字母大写。</p><h3 id="批量替换"><a href="#批量替换" class="headerlink" title="批量替换"></a>批量替换</h3><p>给每行的开头统一添加相同内容方法：</p><p>回车换行的文本符号为<code>\r\t</code></p><p>匹配每行的<code>\r\t</code>，替换为<code>\r\tAddContent</code>即可</p>]]></content>
    
    <summary type="html">
    
      文本编辑小技巧，提升效率
    
    </summary>
    
    
      <category term="Tips" scheme="http://www.zpure.xyz/categories/Tips/"/>
    
    
      <category term="文本编辑" scheme="http://www.zpure.xyz/tags/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91/"/>
    
      <category term="小技巧" scheme="http://www.zpure.xyz/tags/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>周日总结</title>
    <link href="http://www.zpure.xyz/2020/04/19/2020-04-19-summary/"/>
    <id>http://www.zpure.xyz/2020/04/19/2020-04-19-summary/</id>
    <published>2020-04-19T13:01:18.000Z</published>
    <updated>2020-04-19T13:36:59.662Z</updated>
    
    <content type="html"><![CDATA[<p>最近比较颓废，工作上的事情不是特别紧急，空余下来的时间里面却不想做什么事情，懒癌发作，彻底成为积极向上时候的自己最讨厌的那种人。</p><p>有自己的时间是一件多幸运的事情，可以继续了解学习自己的爱好方面的知识，比如自己之前刚开了一个头的唱歌技巧学习的坑，还为此写了一篇日记记录唱歌技巧学习笔记，可是我没有点开继续学习。为什么呢，不是特别喜欢唱歌吗，怎么就没有激情了呢？也许是认识到自己唱歌气息控制不好，声音也不好听，还找不到音准等等缺点，打击到积极性了。既然把唱歌当成自己一项爱好，那么还是坚持住，唱歌技巧的教程要看完的<code>(TODO)</code>。</p><p>空余的时间也是给自己技术能力充电的好机会啊，可是也没有珍惜这段时间去做这件事。想了下，也是遇到了一个小困难，刚好看到java基本类库的使用，要去了解java基本类库的用法，枯燥乏味还要记忆，因此打击了学习的积极性。这个时候其实更应该克服，学不下去的时候那就好好做好笔记<code>(TODO)</code>，方便下次学习更有效率些。</p><p>当然，话说话来，人的活力总有上有下，处于低谷期，什么都不做，放空下自己也没有错啦，让自己晚上刷手机刷到困，早上睡到自然醒，看看电影，补补电视剧《清平乐》，看看综艺《王牌对王牌》，听听音乐《歌手》也不见得就不好。就是怕放开自律，就如脱缰野马，难以回性，写到这里算是给自己一个提醒。</p><p>无聊时间也会想起久未联系的朋友，约着喝喝奶茶，聊聊天，刚好也能联络联络感情，但是不好的一点就是自己嘴巴还是太碎，说话也过于零散，没能良好互动，希望之后注意让自己说话有个中心，给对方留足反馈时间，形成良好交流<code>(TODO)</code>。</p><p>最近觉得不错的一个事情，那就是跑步还是坚持下来了，这点特别好，继续坚持吧！</p><p>有果必有因，为啥最近会懒癌发作呢？自己觉得根源还是在职业规划上的迷惑以及学习任务艰巨两方面引起的。职业规划上，觉得银行的技术只要够用就可以，自己是无法有效得到提升的，技术提升慢的同时技术价值在行内并没有业务价值高，但是难受在业务能力提升的方法和途径自己并未有所得，提升进展缓慢。思虑职业规划同时还要学习海量的java知识，心态上隐隐觉得hold不住，因为目前看进展也很慢，才看完Spring的IOC和AOP，java基础也看了50%而已，后续等着我的还有linux运维基本知识（视频B站已收藏，183讲），SSM框架的Struts和Mybatis。</p><p>怎么办呢？</p><p>职业规划上，<strong>先争取做好分内技术工作吧</strong>，也就是SSM框架熟悉起来，会基本的linux运维，学习数据库的基本知识，等技术的工作做完后，再发力熟悉目前正在做的业务。<strong>时间上安排</strong>，就是上半年结束之前，SSM框架熟悉完毕，今年过后，linux运维和数据库也小有了解。明年再发力开始熟悉业务。</p>]]></content>
    
    <summary type="html">
    
      标记TODO的事情要坚持！
    
    </summary>
    
    
      <category term="总结" scheme="http://www.zpure.xyz/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="总结归纳" scheme="http://www.zpure.xyz/tags/%E6%80%BB%E7%BB%93%E5%BD%92%E7%BA%B3/"/>
    
  </entry>
  
  <entry>
    <title>java-funda-class</title>
    <link href="http://www.zpure.xyz/2020/04/16/java-funda-class/"/>
    <id>http://www.zpure.xyz/2020/04/16/java-funda-class/</id>
    <published>2020-04-16T07:25:17.000Z</published>
    <updated>2020-04-21T15:21:34.399Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java数字类"><a href="#Java数字类" class="headerlink" title="Java数字类"></a>Java数字类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//double 和 float不能表示精确的小数</span></span><br><span class="line"><span class="comment">//常规类型表示有范围限制</span></span><br><span class="line"><span class="comment">//引入BigInterger和BigDecimal，没有范围限制</span></span><br><span class="line"><span class="comment">//BigDecimal初始化尽量用字符串，使用double类型不准确</span></span><br><span class="line">BigDecimal bigDecimal = <span class="keyword">new</span> BigDecimal(<span class="string">"10"</span>);</span><br><span class="line">BigDecimal bigDecimal = <span class="keyword">new</span> BigDecimal(<span class="number">2.3</span>);<span class="comment">//out:2.29365453658662...</span></span><br><span class="line"><span class="comment">//BigDecimal做除法，记得限制输入位数</span></span><br><span class="line">System.out.println(</span><br><span class="line">    bigDecimal.divide(<span class="keyword">new</span> BigDecimal(<span class="string">"3"</span>), <span class="number">3</span>, BigDecimal.ROUND_HALF_UP));</span><br><span class="line"></span><br><span class="line"><span class="comment">//随机数类</span></span><br><span class="line"><span class="comment">//使用Random类或者Math.random()</span></span><br><span class="line"><span class="comment">//具体的随机数范围查看源码注释确认</span></span><br><span class="line">Random rd = <span class="keyword">new</span> Random();</span><br><span class="line">rd.nextInt();</span><br><span class="line">rd.nextInt(<span class="number">10</span>);<span class="comment">//[0,10)间</span></span><br><span class="line">rd.nextDouble();<span class="comment">//[0.0,1.0)间</span></span><br><span class="line">rd.ints(<span class="number">5</span>,<span class="number">10</span>,<span class="number">100</span>);<span class="comment">//返回10-100之间的5个随机数</span></span><br><span class="line">Math.random();<span class="comment">//[0.0,1.0)间</span></span><br><span class="line">System.out.println(Math.round(Math.random()*<span class="number">10</span>));</span><br></pre></td></tr></table></figure><h1 id="字符串相关类"><a href="#字符串相关类" class="headerlink" title="字符串相关类"></a>字符串相关类</h1><p>字符串相关类基本都要背，因为太常用了。</p><p>String类是不可变对象，concat等改变的操作都会产生一个新的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">"123,456,789,/*/"</span>;</span><br><span class="line"><span class="comment">//增</span></span><br><span class="line">System.out.println(str.concat(<span class="string">"aaaa"</span>));</span><br><span class="line"><span class="comment">//删、改</span></span><br><span class="line">System.out.println(str.substring(<span class="number">2</span>,<span class="number">4</span>));</span><br><span class="line">System.out.println(str.replace(<span class="string">"123"</span>, <span class="string">"321"</span>));</span><br><span class="line">System.out.println(str.replaceAll(<span class="string">"[*]"</span>, <span class="string">"??"</span>)); <span class="comment">//第一个表达式是正则表达式</span></span><br><span class="line">System.out.println(str.split(<span class="string">","</span>));</span><br><span class="line">System.out.println(str.trim());</span><br><span class="line"><span class="comment">//查</span></span><br><span class="line">System.out.println(str.charAt(<span class="number">0</span>));</span><br><span class="line">System.out.println(str.concat(<span class="string">"123"</span>));</span><br><span class="line">System.out.println(str.contains(<span class="string">"123"</span>));</span><br><span class="line">System.out.println(str.indexOf(<span class="string">"123"</span>));</span><br><span class="line">System.out.println(str.length());</span><br><span class="line">System.out.println(str.isEmpty());</span><br><span class="line"><span class="comment">//空的判断与念出来的含义相符合：如果数组不为空</span></span><br><span class="line"><span class="keyword">if</span>(!str.isEmpty())&#123;</span><br><span class="line">    System.out.println(<span class="string">"no empty"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//可变长字符对象有StringBuffer和StringBuilder</span></span><br><span class="line"><span class="comment">//StringBuffer是线程同步的</span></span><br><span class="line"><span class="comment">//StringBuilder线程不同步</span></span><br><span class="line"><span class="comment">//.append()功能速度上StringBuilder&gt;StringBuffer&gt;String</span></span><br></pre></td></tr></table></figure><h1 id="日期相关类"><a href="#日期相关类" class="headerlink" title="日期相关类"></a>日期相关类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Calendar</span></span><br><span class="line"><span class="keyword">import</span> java.text.DateFormat;</span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCalendar</span> </span>&#123;</span><br><span class="line">    <span class="comment">//格式化声明</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">    <span class="comment">//日期实例</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Calendar startDate = Calendar.getInstance();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Calendar endDate = Calendar.getInstance();</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> DateFormat df = DateFormat.getDateInstance();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Date earlydate = <span class="keyword">new</span> Date();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Date latedate = <span class="keyword">new</span> Date();</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计算两个时间相差多少个年</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> early</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> late</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> ParseException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">yearsBetween</span><span class="params">(String start, String end)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        <span class="comment">//Str -&gt; format -&gt; set</span></span><br><span class="line">startDate.setTime(sdf.parse(start));</span><br><span class="line">endDate.setTime(sdf.parse(end));</span><br><span class="line"><span class="keyword">return</span> (endDate.get(Calendar.YEAR) - startDate.get(Calendar.YEAR));</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计算两个时间相差多少个月</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> date1</span></span><br><span class="line"><span class="comment"> *            &lt;String&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> date2</span></span><br><span class="line"><span class="comment"> *            &lt;String&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> ParseException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">monthsBetween</span><span class="params">(String start, String end)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">startDate.setTime(sdf.parse(start));</span><br><span class="line">endDate.setTime(sdf.parse(end));</span><br><span class="line"><span class="keyword">int</span> result = yearsBetween(start, end) * <span class="number">12</span> + endDate.get(Calendar.MONTH) - startDate.get(Calendar.MONTH);</span><br><span class="line"><span class="keyword">return</span> result == <span class="number">0</span> ? <span class="number">1</span> : Math.abs(result);</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">————————————————</span><br><span class="line">版权声明：本文为CSDN博主「浅沫微雨」的原创文章，遵循 CC <span class="number">4.0</span> BY-SA 版权协议，转载请附上原文出处链接及本声明。</span><br><span class="line">原文链接：https:<span class="comment">//blog.csdn.net/L_hb123/java/article/details/59058209</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Java基本类用法汇总
    
    </summary>
    
    
      <category term="java" scheme="http://www.zpure.xyz/categories/java/"/>
    
    
      <category term="java" scheme="http://www.zpure.xyz/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>qing-ping-le</title>
    <link href="http://www.zpure.xyz/2020/04/11/qing-ping-le/"/>
    <id>http://www.zpure.xyz/2020/04/11/qing-ping-le/</id>
    <published>2020-04-11T08:43:45.000Z</published>
    <updated>2020-04-28T14:16:03.285Z</updated>
    
    <content type="html"><![CDATA[<h1 id="官家关于大赦天下答大娘娘的话"><a href="#官家关于大赦天下答大娘娘的话" class="headerlink" title="官家关于大赦天下答大娘娘的话"></a>官家关于大赦天下答大娘娘的话</h1><p>矛盾点：你把反对我的人都赦免了，告述天下朝堂已在你的掌控之中，你这是为我祈福吗？</p><p>官家站在大娘娘的角度考虑，同意部分大娘娘的说法，但是把原因和目的上升到一个更高的维度，符合双方共同的着力点——维护大宋的江山去说明：反对你的那些人是眼光狭隘了些，但是也不是什么大奸大恶之人，还是忠君为国的能臣，释放他们让他们继续发光发热不正是为了让大宋更加的繁荣吗？</p>]]></content>
    
    <summary type="html">
    
      清平乐前六级观后感
    
    </summary>
    
    
      <category term="随想" scheme="http://www.zpure.xyz/categories/%E9%9A%8F%E6%83%B3/"/>
    
    
      <category term="观后感" scheme="http://www.zpure.xyz/tags/%E8%A7%82%E5%90%8E%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>json解析</title>
    <link href="http://www.zpure.xyz/2020/04/09/java-json-object/"/>
    <id>http://www.zpure.xyz/2020/04/09/java-json-object/</id>
    <published>2020-04-09T14:01:01.000Z</published>
    <updated>2020-04-21T15:11:40.672Z</updated>
    
    <content type="html"><![CDATA[<h1 id="json用法"><a href="#json用法" class="headerlink" title="json用法"></a>json用法</h1><p>使用阿里的fastjson包。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用到的两个类</span></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON; </span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"></span><br><span class="line"><span class="comment">//javaObj 到 jsonSrt（两种方法）</span></span><br><span class="line">String jsonStr = JSON.toJSONString(Obj);</span><br><span class="line">String jsonStr = JSONObject.toJSONString(Obj); </span><br><span class="line"></span><br><span class="line"><span class="comment">//jsonStr 到javaObj（两种方法）</span></span><br><span class="line"><span class="comment">//(1) jsonStr -&gt; JSONObject -&gt; javaObj</span></span><br><span class="line">JSONObject jsonObj = JSON.parseObject(jsonStr); <span class="comment">//jsonStr -&gt; JSONObject</span></span><br><span class="line">Object javaObj = JSON.toJavaObject(jsonObj, Object.class); <span class="comment">//JSONObject -&gt; javaObj</span></span><br><span class="line"><span class="comment">//(2)</span></span><br><span class="line">Object obj = JSON.parseObject(jsonStr, Object.class);<span class="comment">//jsonStr -&gt; javaObj</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//写jsonStr注意json串的引号需要转义</span></span><br><span class="line">String jsonString = <span class="string">"&#123;\"name\":38,\"name\":\"mkyong\"&#125;"</span>;</span><br></pre></td></tr></table></figure><p>对象中有空值的处理方法(手动处理):</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyObject</span></span>&#123;&#125;</span><br><span class="line"><span class="comment">//对象转化为json对象obj -&gt; jsonStr -&gt; JSONObject;</span></span><br><span class="line">JSONObject jsonObj = JSON.parseJson(JSON.toJsonString(MyObject));</span><br><span class="line"><span class="comment">//获取对象的成员变量</span></span><br><span class="line"><span class="comment">//反射方法获取（todo）</span></span><br><span class="line"><span class="comment">//创建HashMap&lt;String, Object&gt; jsonMap,成员变量为key，jsonObj.get(key)为value</span></span><br><span class="line"><span class="keyword">if</span>(jsonObj.get(key) == <span class="keyword">null</span>)&#123;</span><br><span class="line">    jsonMap(key, <span class="string">""</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    jsonMap(key, jsonObj.get(key));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例子（测试包含json串嵌套的场景通过）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.serializer.SerializerFeature;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JSON 转换</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 把Java对象转换成json字符串</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> object 待转化为JSON字符串的Java对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> json 串 or null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">String <span class="title">parseObjToJson</span><span class="params">(T object)</span> </span>&#123;</span><br><span class="line">        String string = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//string = JSON.toJSONString(object);</span></span><br><span class="line">            string = JSONObject.toJSONString(object, SerializerFeature.PrettyFormat);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> string;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将Json字符串信息转换成对应的Java对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> json json字符串对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> c    对应的类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">parseJsonToObj</span><span class="params">(String json, Class&lt;T&gt; c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//两个都是可行的，起码我测试的时候是没问题的。</span></span><br><span class="line">            <span class="comment">//JSONObject jsonObject = JSONObject.parseObject(json);</span></span><br><span class="line"><span class="comment">//            JSONObject jsonObject = JSON.parseObject(json);</span></span><br><span class="line"><span class="comment">//            return JSON.toJavaObject(jsonObject, c);</span></span><br><span class="line">            <span class="keyword">return</span> JSON.parseObject(json, c);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      java的json用法解析
    
    </summary>
    
    
      <category term="java" scheme="http://www.zpure.xyz/categories/java/"/>
    
    
      <category term="java" scheme="http://www.zpure.xyz/tags/java/"/>
    
      <category term="技术文档" scheme="http://www.zpure.xyz/tags/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title>sing_a-song</title>
    <link href="http://www.zpure.xyz/2020/04/04/sing-a-song/"/>
    <id>http://www.zpure.xyz/2020/04/04/sing-a-song/</id>
    <published>2020-04-04T09:26:30.000Z</published>
    <updated>2020-04-04T16:27:48.699Z</updated>
    
    <content type="html"><![CDATA[<h1 id="唱歌技巧"><a href="#唱歌技巧" class="headerlink" title="唱歌技巧"></a>唱歌技巧</h1><p><a href="https://www.bilibili.com/video/BV16W411H711?from=search&seid=15896087756766310395" target="_blank" rel="noopener">参考视频教程</a></p><h2 id="第一节：使用气息"><a href="#第一节：使用气息" class="headerlink" title="第一节：使用气息"></a>第一节：使用气息</h2><ul><li><p>如何吸气（腹式呼吸）</p><ul><li><p>练习方法： </p><p>吸气，气沉小腹，嘟嘴巴唱“都咧咪法搜”；</p></li><li><p>小诀窍：叹气的感觉，狗喘气</p></li></ul></li><li><p>什么时候吸气</p><ul><li>多听歌。</li></ul></li><li><p>气息怎么控制：</p><ul><li>深呼吸，憋气，加动作辅助（下蹲）</li><li>小诀窍：气往下沉，高音才上的去</li></ul></li></ul><h2 id="第二节：找到声音的位置"><a href="#第二节：找到声音的位置" class="headerlink" title="第二节：找到声音的位置"></a>第二节：找到声音的位置</h2><ul><li>说话</li><li>唱歌<ul><li>微笑！打开口盖<ul><li>开口音：a a a a a</li><li>闭口音：mi yi yi yi yi</li></ul></li><li>分别说和唱的区别</li><li>感觉有没有用上气息</li></ul></li><li>共鸣<ul><li>胸腔共鸣 手放在胸前 气下沉  振动</li><li>鼻腔共鸣 手指放在鼻子，气下沉</li><li>头腔共鸣 手指一直往上找最高音，气下沉</li></ul></li></ul><h2 id="使用颤音"><a href="#使用颤音" class="headerlink" title="使用颤音"></a>使用颤音</h2>]]></content>
    
    <summary type="html">
    
      对酒当歌，人生几何
    
    </summary>
    
    
      <category term="生活向" scheme="http://www.zpure.xyz/categories/%E7%94%9F%E6%B4%BB%E5%90%91/"/>
    
    
      <category term="唱歌技巧" scheme="http://www.zpure.xyz/tags/%E5%94%B1%E6%AD%8C%E6%8A%80%E5%B7%A7/"/>
    
      <category term="喜欢的歌" scheme="http://www.zpure.xyz/tags/%E5%96%9C%E6%AC%A2%E7%9A%84%E6%AD%8C/"/>
    
  </entry>
  
  <entry>
    <title>兼听则明</title>
    <link href="http://www.zpure.xyz/2020/03/31/2020-03-31/"/>
    <id>http://www.zpure.xyz/2020/03/31/2020-03-31/</id>
    <published>2020-03-31T14:50:44.000Z</published>
    <updated>2020-04-09T14:19:25.773Z</updated>
    
    <content type="html"><![CDATA[<p>我对综艺节目歌手关注越来越少了，今年注意到的时候已经播出两期了。节目虽然没看，倒是在知乎看到的些许的讨论，讨论的一个焦点是华晨宇，另一个便是黄霄云。那会关于黄霄云的讨论重点一个是说她专捡软柿子捏，奇袭毛不易，一个是说炫技大过于表达，还有一个是说情商不行的。一通这么漫无目的的浏览下来，对于黄的歌唱实力顶尖、唯比赛论和情商待提高的固执小姑凉形象就形成了。这之后开始看黄的表演就觉得歌唱的很好，但是就觉得太比赛化，唱的很动听，却没能打动我。</p><p>今天歌单随机播放循环到了一首《连名带姓》，瞬间被打动了，打开一看，正是黄的演唱，脑海中一些蹦出了疑问：那会歌手舞台听的时候怎么没有感觉？点开歌曲评论，画风与知乎上的风格天差地别，我摘几条：</p><blockquote><p>歌手本来就是综艺，可怜只有黄把它当比赛；</p><p>放弃了保研，最后一门课因为档期冲突放弃了；</p><p>这届歌手中唯一一个可以让我单曲循环的歌手，其他歌手的歌都没意思，没了黄，甚至不想看，一帮老油条；</p></blockquote><blockquote><p>汪峰：考中央音乐学院（给你写推荐信）</p><p>林俊杰：我想要认识你</p><p>萧敬腾：天分的歌者</p><p>华晨宇：未来非常顶尖的歌手</p><p>键盘侠：没感情，只会炫技，快淘汰吧。</p></blockquote><p>暂不论这些评论的是否有失偏颇，但是确实那个当下让我从正面的视角感受到了黄的认真，想赢的决心，通过《连名带姓》这首歌也感受她的真挚和实力。我诧异自己之前仅仅是看了相关的评论就莫名其妙给人贴上那些恶劣的标签，诧异自己连黄是谁都不知道的情况下就敢武断的做出判断，用有色眼镜去看待她的表演。</p><p>于是我不禁思考：一个与我们相隔十万八千里的人，怎么对她产生情感倾向？</p><p>往往我们被动接受各种带着明显的感情倾向讯息，就容易人云亦云，不经思考给别人贴上刻板标签。如果自己亲眼所见的场景让你产生情绪，那这种情绪就是最直接你对这个人的观感，无需怀疑。如果未对一个人所做所为有过亲眼目睹，只是道听、途说，那么不要轻易做出判断，一定要看看好的说法和坏的说法，<strong>兼听则明</strong>。</p><p>对每一件事要有自己发自内心认同的判断，这个判断需要在看到好坏两面后做出。</p><p>多看你一眼，而你不搭理我的背影就会让我烦恼一整天啊，讨厌不敢行动又不会行动的自己啊。允许自己在这里小小颓一下。</p><p>可能你会说，兼听需要花费时间成本，犯不着这么较真。这也没错，但是如果可以，在给任何一个贴上标签的时候，尽量都慎重些，不了解最好就不做判断，特别是下意识的判断。</p>]]></content>
    
    <summary type="html">
    
      又在上班时候走神了。
    
    </summary>
    
    
      <category term="随记" scheme="http://www.zpure.xyz/categories/%E9%9A%8F%E8%AE%B0/"/>
    
    
      <category term="随想" scheme="http://www.zpure.xyz/tags/%E9%9A%8F%E6%83%B3/"/>
    
      <category term="生活原则" scheme="http://www.zpure.xyz/tags/%E7%94%9F%E6%B4%BB%E5%8E%9F%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>how-to-live</title>
    <link href="http://www.zpure.xyz/2020/03/29/how-to-live/"/>
    <id>http://www.zpure.xyz/2020/03/29/how-to-live/</id>
    <published>2020-03-29T13:51:23.000Z</published>
    <updated>2020-04-09T14:18:31.256Z</updated>
    
    <content type="html"><![CDATA[<p>周五晚上在学校的论坛浏览后，有一句话一直在脑海中出现，大意是：</p><p><code>生活其实很纯粹，快乐也很简单，在学习的时间学习，累了就在被窝里看一部电影，疗愈自己，看完就乖乖睡觉，不要被那些琐碎的想法纠缠，没有意义。</code></p><p>然后周末下意识按照这样的方式去生活，在起床的时间起床，在学习的时间学习，在休息的时间就真的放下手机，好好休息，在锻炼的时间就穿好装备去锻炼，在被窝的时间就打开一部电影，好好沉浸其中。</p><p>自律的感觉、休息的感觉、偷懒的感觉都享受到了，挺不错。</p><p>生活本身是复杂的，如何让生活简单快乐是一门艺术啊。</p>]]></content>
    
    <summary type="html">
    
      如何度过时间的思考
    
    </summary>
    
    
      <category term="总结" scheme="http://www.zpure.xyz/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="随想" scheme="http://www.zpure.xyz/tags/%E9%9A%8F%E6%83%B3/"/>
    
      <category term="生活向" scheme="http://www.zpure.xyz/tags/%E7%94%9F%E6%B4%BB%E5%90%91/"/>
    
      <category term="零碎想法" scheme="http://www.zpure.xyz/tags/%E9%9B%B6%E7%A2%8E%E6%83%B3%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>writing-skills</title>
    <link href="http://www.zpure.xyz/2020/03/24/writing-skills/"/>
    <id>http://www.zpure.xyz/2020/03/24/writing-skills/</id>
    <published>2020-03-24T09:58:56.000Z</published>
    <updated>2020-04-09T14:19:08.722Z</updated>
    
    <content type="html"><![CDATA[<h1 id="知乎评价周杰伦"><a href="#知乎评价周杰伦" class="headerlink" title="知乎评价周杰伦"></a>知乎评价周杰伦</h1><p>看看人家如何行文，做一下分析记录：</p><p>迷茫是年轻人的常事。</p><p>我在身边看到了这个时代年轻人的迷茫。我从书里看到了过去很多时代年轻人的迷茫。</p><p>身边的朋友对我说，看到许多我们已经习以为常的事情和观点跨越过一代人的鸿沟在上一代人的眼里竟如洪水猛兽般面目可憎，而他们才占据着这个社会的主流。</p><p>我告诉他不是这样的。</p><p>我给你讲个故事，这个故事是关于周杰伦的。</p><p>作者：子由<br>链接：<a href="https://www.zhihu.com/question/21850419/answer/204892310" target="_blank" rel="noopener">https://www.zhihu.com/question/21850419/answer/204892310</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
    
    <summary type="html">
    
      学习怎么行文，才能让读者感兴趣
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Java线程协作学习</title>
    <link href="http://www.zpure.xyz/2020/03/19/example-for-thread-learnning/"/>
    <id>http://www.zpure.xyz/2020/03/19/example-for-thread-learnning/</id>
    <published>2020-03-19T15:34:17.000Z</published>
    <updated>2020-04-21T13:07:46.637Z</updated>
    
    <content type="html"><![CDATA[<p>今天学习Java多线程的协作方法，接触到了几种锁，来规定了多个线程的协作方式，今天的学习方法特别适用于说明例子化学习的好处。</p><p><code>例子化学习就是每一处知识点通过一个例子来比喻或者应用，判断自己掌握这个知识点的方法就是把这个例子说一遍或者实现一遍。</code></p><p>这种方法让每一个知识点在脑海里都是一张图，一个画面，一个场景，积累多了，脑中自成一片天地。</p><p>具体到今天的学习：</p><ul><li>基本的读写锁Lock 应用于奶茶店买奶茶：顾客买奶茶是单独读线程协作，老板写订单和员工的读订单是分别的读写线程协作，用Lock就可以管理；</li><li>计量锁 Semaphone 对应与停车场停车：停车场的大小是固定的，多车是否可以停车，停车线程的管理用Semaphone锁管理；</li><li>门闩锁 Latch锁 对应 百米赛跑。</li></ul>]]></content>
    
    <summary type="html">
    
      多线程学习
    
    </summary>
    
    
      <category term="Java" scheme="http://www.zpure.xyz/categories/Java/"/>
    
    
      <category term="随想" scheme="http://www.zpure.xyz/tags/%E9%9A%8F%E6%83%B3/"/>
    
      <category term="总结" scheme="http://www.zpure.xyz/tags/%E6%80%BB%E7%BB%93/"/>
    
      <category term="学习原则" scheme="http://www.zpure.xyz/tags/%E5%AD%A6%E4%B9%A0%E5%8E%9F%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>SSM框架</title>
    <link href="http://www.zpure.xyz/2020/03/17/microService/"/>
    <id>http://www.zpure.xyz/2020/03/17/microService/</id>
    <published>2020-03-17T07:45:49.000Z</published>
    <updated>2020-03-31T14:53:03.385Z</updated>
    
    <content type="html"><![CDATA[<h1 id="自上而下学习"><a href="#自上而下学习" class="headerlink" title="自上而下学习"></a>自上而下学习</h1><p><a href="https://www.zhihu.com/question/328810338/answer/720393487" target="_blank" rel="noopener">什么是SSM框架</a></p><h2 id="Spring学习"><a href="#Spring学习" class="headerlink" title="Spring学习"></a>Spring学习</h2><p>已经学习结束，</p><p>使用的教程：<a href="https://www.bilibili.com/video/av47952931" target="_blank" rel="noopener">https://www.bilibili.com/video/av47952931</a></p><p>笔记在代码中，在D:\course\javaProject\21-IDEA-projects</p><h2 id="Mybatis学习"><a href="#Mybatis学习" class="headerlink" title="Mybatis学习"></a>Mybatis学习</h2><p>实现一个例子：<a href="https://segmentfault.com/a/1190000013661958#item-3-3" target="_blank" rel="noopener">https://segmentfault.com/a/1190000013661958#item-3-3</a></p><p>D:\course\javaProject\MybatisLearning</p><blockquote><p>MySQL基本介绍：<a href="https://www.runoob.com/mysql/mysql-install.html" target="_blank" rel="noopener">https://www.runoob.com/mysql/mysql-install.html</a></p></blockquote><p><strong><em>TODO</em></strong></p><h2 id="关注的主页和博客参考"><a href="#关注的主页和博客参考" class="headerlink" title="关注的主页和博客参考"></a>关注的主页和博客参考</h2><ol><li><p><a href="https://www.zhihu.com/people/Java_3y" target="_blank" rel="noopener">Java3y</a></p><blockquote><p>这位哥们也是刚工作的，写的java知识点大全，写的很不错，学习加交流：<a href="https://segmentfault.com/blog/java_3y?page=2" target="_blank" rel="noopener">https://segmentfault.com/blog/java_3y?page=2</a></p></blockquote></li><li></li></ol>]]></content>
    
    <summary type="html">
    
      Java后台技术汇总
    
    </summary>
    
    
      <category term="后台技术" scheme="http://www.zpure.xyz/categories/%E5%90%8E%E5%8F%B0%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="http://www.zpure.xyz/tags/Java/"/>
    
      <category term="SSM" scheme="http://www.zpure.xyz/tags/SSM/"/>
    
  </entry>
  
  <entry>
    <title>laugh-moment</title>
    <link href="http://www.zpure.xyz/2020/03/15/laugh-moment/"/>
    <id>http://www.zpure.xyz/2020/03/15/laugh-moment/</id>
    <published>2020-03-15T04:43:08.000Z</published>
    <updated>2020-03-15T04:47:34.519Z</updated>
    
    <content type="html"><![CDATA[<ol><li><blockquote><p>“其实我挺羡慕火车的”</p><p>“为什么”</p><p>“他们连擦肩而过都那么久”</p></blockquote></li><li></li></ol>]]></content>
    
    <summary type="html">
    
      这种东西就是特别对我的胃口
    
    </summary>
    
    
      <category term="笑" scheme="http://www.zpure.xyz/categories/%E7%AC%91/"/>
    
    
      <category term="生活向" scheme="http://www.zpure.xyz/tags/%E7%94%9F%E6%B4%BB%E5%90%91/"/>
    
      <category term="逗比" scheme="http://www.zpure.xyz/tags/%E9%80%97%E6%AF%94/"/>
    
  </entry>
  
  <entry>
    <title>每周总结</title>
    <link href="http://www.zpure.xyz/2020/03/15/week-summary/"/>
    <id>http://www.zpure.xyz/2020/03/15/week-summary/</id>
    <published>2020-03-15T03:23:25.000Z</published>
    <updated>2020-03-15T15:52:00.243Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h1 id="长期的目标"><a href="#长期的目标" class="headerlink" title="长期的目标"></a>长期的目标</h1><ul><li><input disabled type="checkbox"> Java基础</li><li><input disabled type="checkbox"> 微服务框架</li><li><input disabled type="checkbox"> sh 脚本</li><li><input disabled type="checkbox"> 理财入门</li><li><input disabled type="checkbox"> 大数据</li></ul><blockquote><p>以上描述太过粗糙，待进一步细化。</p></blockquote><h1 id="2020"><a href="#2020" class="headerlink" title="2020"></a>2020</h1><h2 id="03-09-03-15"><a href="#03-09-03-15" class="headerlink" title="03/09 - 03/15"></a>03/09 - 03/15</h2><ol><li><p>博客使用习惯初步养成，记住了这句话</p><p><code>如果你在输入的时候很爽，那么你在使用的时候肯定很不爽</code></p></li><li><p>理财计划开始准备，大腿和渠道初步整理中</p></li><li><p>听了一次微服务的讲座，搭建一套微服务框架需要学的东西很多，需要加快自己的学习进度</p></li><li><p>Be brave at the first time, keep someone in the mind and insist on, present what I want to show.</p></li><li><p>完成Java多线程的写法和多线程管理的方法：如何确保资源共享的准确性？了解了线程状态转换的方法，主动转换相比被动转换的优势在哪？了解避免死锁的方法。</p></li></ol>]]></content>
    
    <summary type="html">
    
      谨防虚假努力的自我感动，记录实质的进步
    
    </summary>
    
    
      <category term="总结" scheme="http://www.zpure.xyz/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="总结归纳" scheme="http://www.zpure.xyz/tags/%E6%80%BB%E7%BB%93%E5%BD%92%E7%BA%B3/"/>
    
  </entry>
  
  <entry>
    <title>理财入门记录</title>
    <link href="http://www.zpure.xyz/2020/03/14/money-thoughts/"/>
    <id>http://www.zpure.xyz/2020/03/14/money-thoughts/</id>
    <published>2020-03-14T00:28:47.000Z</published>
    <updated>2020-03-14T01:03:40.633Z</updated>
    
    <content type="html"><![CDATA[<h1 id="理财入门的一些想法"><a href="#理财入门的一些想法" class="headerlink" title="理财入门的一些想法"></a>理财入门的一些想法</h1><p>进入了2020年，新的时代20年代来临，这个时刻真的尤为魔幻。2020是中国实现全面小康的一个标志年，在国家层面是一个关键的时间节点，结果一年伊始，疫情爆发，世界格局正在发生某种从未用过的动荡，反馈到股市上，一场魔幻涨跌大戏正在上演，生逢其时，真的是时刻在见证历史，我都想用上波澜壮阔这种词语来形容自己这个时代了。动荡的时机，本质来看，就是一场资源的重分配，凶险中孕育着的都是机会，试问谁想旁观历史，而不跃跃欲试，投身其中呢？我也想。</p><p>去年毕业入职，到今年，我转正了，正式宣告自己脱离了学生身份，在见证历史的这个星期，我领取了人生第一份正式工资，从千级迈入了万级，数量级的提升极大膨胀我的某种莫名奇妙的自信——我有闲钱了啊，我怎么可以让自己的钱只是在账户里“躺尸”。</p><p>这个星期，也切实经历一次与理财相关的实践，买了人生第一份保险，给自己，给父母。切实感觉到跟钱相关的玩法切实蕴含各种智慧，愈发觉得有趣。</p><p>伴随着雨声，昨晚确实睡了一个好觉，早上起来，看到美股突然全线飘红，这种理财的意动真是瞬间火山喷发。但是万事都有章法，冲动行事最多成为那一撮翠绿绿的韭菜。抱大腿，补基础，双管齐下才是正道。</p><p>所以，开始吧！</p>]]></content>
    
    <summary type="html">
    
      到了不得不开始理财的年纪了，开始薛定谔式理财
    
    </summary>
    
    
      <category term="理财" scheme="http://www.zpure.xyz/categories/%E7%90%86%E8%B4%A2/"/>
    
    
      <category term="理财" scheme="http://www.zpure.xyz/tags/%E7%90%86%E8%B4%A2/"/>
    
      <category term="入门" scheme="http://www.zpure.xyz/tags/%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>工作随记</title>
    <link href="http://www.zpure.xyz/2020/03/11/work-thoughts/"/>
    <id>http://www.zpure.xyz/2020/03/11/work-thoughts/</id>
    <published>2020-03-11T13:00:16.000Z</published>
    <updated>2020-03-19T13:12:10.118Z</updated>
    
    <content type="html"><![CDATA[<h1 id="记一次建行大学分享讲座"><a href="#记一次建行大学分享讲座" class="headerlink" title="记一次建行大学分享讲座"></a>记一次建行大学分享讲座</h1><p><code>time</code>:<code>2020/03/11</code></p><p>今天参与上海分行开发一处分享微服务实践的讲座，并浏览了他们团队的confluence，很有意思的一个团队，心向往之。</p><p>所在团队也面临着技术转型，今天讲座分享的一整套微服务框架实践方案确实很有吸引力，希望能汲取其中的养分，在所在团队做出贡献。见贤思齐焉啊，加油吧。</p><p>想到这，心理也难免失落，身边如果有这样一个团队就好了，一个人前进的力量太缓慢了。不够脚下的路都是自己选择的结果，机会会给有准备的人，所以即使龟速前进，也要继续积蓄力量。</p><p>今日收获：</p><ul><li>开发一处的confluence，实践中可借鉴</li><li>java springboot 微服务很好玩，继续坚持这条路走下去吧</li></ul><h1 id="流程性工作怎么做好呢？"><a href="#流程性工作怎么做好呢？" class="headerlink" title="流程性工作怎么做好呢？"></a>流程性工作怎么做好呢？</h1><p>今天发现自己上线前的准备还是遗漏了一个事情，就是用户测试报告，同时对上线的材料准备时间节点都没有卡的很好，导致最后手忙脚乱，怎么办比较好？</p><ul><li>流程性的东西整理成一个思维导图，可以使用百度的process on，封板前两天拿出来核对一遍。</li><li>思维导图上体现两点：何时何事 when and what。思维导图整理好了，贴在下面提醒自己。</li></ul>]]></content>
    
    <summary type="html">
    
      与工作有关的杂笔
    
    </summary>
    
    
      <category term="工作心得" scheme="http://www.zpure.xyz/categories/%E5%B7%A5%E4%BD%9C%E5%BF%83%E5%BE%97/"/>
    
    
      <category term="随笔" scheme="http://www.zpure.xyz/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>朴素想法在实际中的应用</title>
    <link href="http://www.zpure.xyz/2020/03/11/simple-philosophy-apply/"/>
    <id>http://www.zpure.xyz/2020/03/11/simple-philosophy-apply/</id>
    <published>2020-03-11T02:57:20.000Z</published>
    <updated>2020-03-15T10:37:36.106Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TCP-IP协议的三次握手"><a href="#TCP-IP协议的三次握手" class="headerlink" title="TCP/IP协议的三次握手"></a>TCP/IP协议的三次握手</h1><p><a href="https://zhuanlan.zhihu.com/p/24860273" target="_blank" rel="noopener">TCP协议是规定网络建立连接的方法，需要经历三次对话（握手）才能建立连接，进行数据传输</a>。为什么需要三次握手？之前是<strong><em>理解不了第三次握手的必要性</em></strong>，觉得多余。</p><p>今天理解这个疑惑的来源：连接的两端分别为A、B，我只站在连接的发起方A考虑，导致的。</p><p>这里的<strong><u>朴素想法：请求和响应是一体</u></strong>。</p><p>A发起请求，得到B的响应，做出判断；B发起请求，得到A的响应，做出判断；都可做出判断，且判断一致，连接建立就牢不可破。不要担心思维不缜密，遗漏某些特殊情况。#</p><h1 id="初步思考一个问题的方法"><a href="#初步思考一个问题的方法" class="headerlink" title="初步思考一个问题的方法"></a>初步思考一个问题的方法</h1><h2 id="图形化思维"><a href="#图形化思维" class="headerlink" title="图形化思维"></a>图形化思维</h2><p>当学习一个新的概念（偏向于过程），步骤如下：</p><ol><li><p>明确涉及的对象：发起方/接收方，请求方/接受方</p></li><li><p>明确每个对象的功能和属性</p></li><li><p>在脑海中形成对象之间的作用关系图。</p></li></ol><p><strong>检验你学习或者思考的成效的方法，就是看看自己脑子是否有对应的图形。</strong>#</p><h2 id="具体化思维"><a href="#具体化思维" class="headerlink" title="具体化思维"></a>具体化思维</h2><p>一个抽象概念很难理解和记忆，每一个难以理解的东西重点在于：</p><p><code>找到一个对应的例子记忆</code>。</p><p>故事是容易记忆的，容易表达的。</p><h2 id="分析问题的维度"><a href="#分析问题的维度" class="headerlink" title="分析问题的维度"></a>分析问题的维度</h2><p>当一个问题需要不同维度分析的时候，记得基本的两个维度：空间和时间。</p><blockquote><p>比如分析线程之间的信息共享时候信息不同步问题，先了解线程信息共享的图形化。然后从空间分析，存储共享变量的地方是否会不同步。从时间分析，同一个时刻是否会有多个操作冲突。</p></blockquote>]]></content>
    
    <summary type="html">
    
      会将有意思的想法记录下来
    
    </summary>
    
    
      <category term="随记" scheme="http://www.zpure.xyz/categories/%E9%9A%8F%E8%AE%B0/"/>
    
    
      <category term="零碎想法" scheme="http://www.zpure.xyz/tags/%E9%9B%B6%E7%A2%8E%E6%83%B3%E6%B3%95/"/>
    
      <category term="灵感" scheme="http://www.zpure.xyz/tags/%E7%81%B5%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>如何发布一篇帖子</title>
    <link href="http://www.zpure.xyz/2020/01/22/blog-user-tutorial/"/>
    <id>http://www.zpure.xyz/2020/01/22/blog-user-tutorial/</id>
    <published>2020-01-22T14:31:23.000Z</published>
    <updated>2020-03-11T13:02:14.355Z</updated>
    
    <content type="html"><![CDATA[<h1 id="提交一篇post基本操作"><a href="#提交一篇post基本操作" class="headerlink" title="提交一篇post基本操作"></a>提交一篇post基本操作</h1><ul><li><p>进入d://Blog/sourceFile/</p></li><li><p>新建post:</p><p>hexo new post PathName</p></li><li><p>编辑文本：使用<a href="https://www.typora.io/" target="_blank" rel="noopener">Typora</a>编辑文本</p></li><li><p>hexo g :编译</p></li><li><p>hexo s：本地展示</p></li><li><p>hexo d：推送到线上</p></li><li><p>查看生成结果（需要等待一段时间）</p></li></ul><h1 id="Blog的搭建参考"><a href="#Blog的搭建参考" class="headerlink" title="Blog的搭建参考"></a>Blog的搭建参考</h1><p><a href="https://www.simon96.online/2018/10/12/hexo-tutorial/" target="_blank" rel="noopener">参考的教程</a></p>]]></content>
    
    <summary type="html">
    
      博客使用基本步骤
    
    </summary>
    
    
      <category term="使用说明书" scheme="http://www.zpure.xyz/categories/%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E%E4%B9%A6/"/>
    
    
      <category term="tutorial" scheme="http://www.zpure.xyz/tags/tutorial/"/>
    
  </entry>
  
</feed>
