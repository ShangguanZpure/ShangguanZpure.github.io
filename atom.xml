<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ZpureBlog</title>
  
  <subtitle>www.zpure.xyz</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/ShangguanZpure/ShangguanZpure.github.io/"/>
  <updated>2023-01-04T13:42:52.052Z</updated>
  <id>https://github.com/ShangguanZpure/ShangguanZpure.github.io/</id>
  
  <author>
    <name>zpure</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2023年希望做到的事情</title>
    <link href="https://github.com/ShangguanZpure/ShangguanZpure.github.io/2023/01/03/2023target/"/>
    <id>https://github.com/ShangguanZpure/ShangguanZpure.github.io/2023/01/03/2023target/</id>
    <published>2023-01-03T12:51:16.000Z</published>
    <updated>2023-01-04T13:42:52.052Z</updated>
    
    <content type="html"><![CDATA[<h1 id="work"><a href="#work" class="headerlink" title="work"></a>work</h1><ul><li>数据分析能力<ul><li>产出一份数据分析工具或者方法论，看到一个类型的数据先走一下这几个流程</li></ul></li><li>Flink环境搭建并开始自学<ul><li>使用自定义算子完成开发调试并上线</li></ul></li><li>流畅使用shell运维 -shell三剑客grep/awk/sed</li><li>项目管理能力提升</li></ul><h1 id="life"><a href="#life" class="headerlink" title="life"></a>life</h1><ul><li>健身<br>学完冲动买下的这套课程吧！上头买的课程，含着泪也要学完！<a href="https://www.bilibili.com/cheese/play/ss1312?bsource=link_copy" target="_blank" rel="noopener">只要233，美好身材背回家</a></li></ul>]]></content>
    
    <summary type="html">
    
      写写今年努力的方向
    
    </summary>
    
    
      <category term="计划" scheme="https://github.com/ShangguanZpure/ShangguanZpure.github.io/categories/%E8%AE%A1%E5%88%92/"/>
    
    
      <category term="flag" scheme="https://github.com/ShangguanZpure/ShangguanZpure.github.io/tags/flag/"/>
    
      <category term="目标" scheme="https://github.com/ShangguanZpure/ShangguanZpure.github.io/tags/%E7%9B%AE%E6%A0%87/"/>
    
  </entry>
  
  <entry>
    <title>年终总结-2022</title>
    <link href="https://github.com/ShangguanZpure/ShangguanZpure.github.io/2022/12/31/annualPersonalSummary/"/>
    <id>https://github.com/ShangguanZpure/ShangguanZpure.github.io/2022/12/31/annualPersonalSummary/</id>
    <published>2022-12-31T14:38:08.000Z</published>
    <updated>2022-12-31T15:52:23.989Z</updated>
    
    <content type="html"><![CDATA[<p>疫情之后，日子是以周为单位有一搭没一搭的往前走着，48个来回，一年要过去了。 整理一堆有的没的文档，那顺便写写总结吧。<br>2022，自己关键词有哪一些呢？<br>第一个应该是：<strong>分类</strong>。<br>收纳分类。工作时日一长，屋子的东西开始慢慢的增多，收纳对我一个懒人来说太过艰巨，怎么办呢？我发现每件物件在进入自己的小窝时候就有意识的开始做分类，这个问题就解决了大半，袜子放一起，上衣放一起，裤子放一起，饮品放一起，零食放一起……，事事有个粗分类，后续的可维护性就变高了，收纳也便成了一件我还可以勉强做到的事情。顺便说一句题外话，数据存数据库的分区也是类似的思路。<br>收藏夹分类。进我的收藏夹吃灰吧应该是我日常常规操作了。收藏的那一时刻，常常会对于自己能发现这么宝贵的资料感到窃喜不已，但是往往就没有了后续。分类有效解决了这个问题，我将浏览器收藏夹分为装机必备、工作、技术、生活、近期在看、牛人牛事，然后让自己闲的蛋疼的时候养成点击文件夹的习惯，一段时间后，确认效果显著（前提是忍痛卸载了各种短视频应用）。<br>第二个是：<strong>大件</strong>。<br>每年都应该来一个大家伙，今年它来了———— 学习组装了自己的第一台主机。组装的快乐真的太快乐了，感谢B站的<a href="https://www.bilibili.com/video/BV1BG4y137mG/?spm_id_from=333.337.search-card.all.click" target="_blank" rel="noopener">全网最好的装机教程，没有之一</a><br>第三个是：<strong>决赛圈</strong>。<br>今年好像进了好几个决赛圈，建模的、游戏的、运动的、还有疫情的……，想想，觉得还挺逗的。<br>第四个是：<strong>专注</strong>。<br>发现自己排计划时候就是把自己想的很牛逼，排的很满，生怕浪费周末的一个早上或者一个下午，过大的任务期望导致的是巨大的启动压力，拖延症状也因此形成。今年开始，慢慢发现，其实一天很短啊，上午9点到11点也就是真正踏踏实实坐下来可以做事的时间，两个小时，发发呆，打两把游戏，可能也就一下过去了，下午2点到6点三个小时也就三个小时，加上运动时间、洗簌时间、收纳时间……，一天真的短暂，能够在一天留下一会的专注时间，其实就可以对自己say yes了。不同于校园，工作后的成长，不在于一时的自律，在于长期的规律生活和自在的心态。自在的心态确实让专注变得顺其自然。另外，放松的方法并不是让大脑停止思考，做一个漫无目的的游戈，而是“换个脑子”，让自己专注到另外一件事上去，可以是学一首歌，打一场球，练一会字，而不是刷电子媒体的视频流和信息流。视频流和信息流的知识洪海对疲惫的大脑来说是更大的负担。这个实践好像有效的缓解“老年痴呆”。<br>第五个是：<strong>量子物理</strong>。<br>一直在思考，有哪些东西是自己如果财富自由后，还会去追求的东西呢？或许物理和数学才是开始的兴趣点。今年重新开始阅读一些物理的科普读物和科幻读物，发现有的时候好的引导真的太重要了，希望自己重新捡起来。作品相关：<a href="https://www.zhihu.com/xen/market/remix/paid_column/1517196714129252353" target="_blank" rel="noopener">上帝是个程序员：游戏制作人眼中的量子物理</a></p><p>有什么话要对2023的自己说呢？<br>照顾好自己的身体。<br>保持简单。<br>有书就好好读，有事就好好做，到了睡觉时间就好好睡，遇到喜欢的人就勇敢去追，被人拒绝了就体面离开。<br>多留下文字，<strong>好记性不如烂笔头</strong>。一周一周的时间，文字可以是很好的留痕器。</p><p>如果10年的我遇到现在的我，他应该还是嘲笑吧，那就嘲笑吧。</p>]]></content>
    
    <summary type="html">
    
      衣裓贮文章，自言学雕虫。
    
    </summary>
    
    
      <category term="年终总结" scheme="https://github.com/ShangguanZpure/ShangguanZpure.github.io/categories/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="年终总结" scheme="https://github.com/ShangguanZpure/ShangguanZpure.github.io/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>建模基本流程</title>
    <link href="https://github.com/ShangguanZpure/ShangguanZpure.github.io/2022/03/31/%E5%BB%BA%E6%A8%A1%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B/"/>
    <id>https://github.com/ShangguanZpure/ShangguanZpure.github.io/2022/03/31/建模基本流程/</id>
    <published>2022-03-31T14:50:44.000Z</published>
    <updated>2022-12-31T14:11:54.723Z</updated>
    
    <content type="html"><![CDATA[<p>之前做的笔记</p><h2 id="特征工程（周二构造一个版本）"><a href="#特征工程（周二构造一个版本）" class="headerlink" title="特征工程（周二构造一个版本）"></a>特征工程（周二构造一个版本）</h2><ul><li><p>基础特征构造 done</p></li><li><p>数据预处理：删、填</p></li><li><p>特征衍生：DFS/CNN done apart</p></li><li><p>特征变换：特征分布可视化</p></li><li><p>特征筛选</p><ul><li>变量重要性<ul><li>移除低方差：筛选方差为0</li><li>模型筛选（L1正则、树模型）<strong>目前都用lightgbm来做了</strong> 用sns可视化</li></ul></li><li>变量相关性评估<ul><li>卡方检验 <strong>x,y</strong>之间比较</li><li>皮尔逊相关系数 R  <strong>x1,x2</strong>之间的比较 用于去重</li><li>方差膨胀系数 VIF</li></ul></li><li>变量稳定性评估 <ul><li>PSI</li><li>跨时间交叉检验（取多个模型变量的交集，但是要小心共性特征，不一定每次都要在模型中，因为可能是两个共性特征的任一个进入模型，严格取交集会导致共性特征都取不到）</li></ul></li></ul></li><li><p>样本不均衡问题</p></li><li><p>后续考虑</p></li></ul><h1 id="模型调参（周三之前）"><a href="#模型调参（周三之前）" class="headerlink" title="模型调参（周三之前）"></a>模型调参（周三之前）</h1><p>目标函数选择 binary</p><p>评估指标选择 auc</p><p><a href="https://zhuanlan.zhihu.com/p/149522630" target="_blank" rel="noopener">LightGBM调参</a></p><p><a href="https://www.cnblogs.com/bjwu/p/9307344.html" target="_blank" rel="noopener">lightGBM调参 -first</a></p><h1 id="模型融合"><a href="#模型融合" class="headerlink" title="模型融合"></a>模型融合</h1>]]></content>
    
    <summary type="html">
    
      建模笔记（随时更新）
    
    </summary>
    
    
      <category term="机器学习" scheme="https://github.com/ShangguanZpure/ShangguanZpure.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="工作" scheme="https://github.com/ShangguanZpure/ShangguanZpure.github.io/tags/%E5%B7%A5%E4%BD%9C/"/>
    
      <category term="技术" scheme="https://github.com/ShangguanZpure/ShangguanZpure.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="建模" scheme="https://github.com/ShangguanZpure/ShangguanZpure.github.io/tags/%E5%BB%BA%E6%A8%A1/"/>
    
  </entry>
  
  <entry>
    <title>如何阅读一本书-吴军</title>
    <link href="https://github.com/ShangguanZpure/ShangguanZpure.github.io/2021/11/18/dushusuibi/"/>
    <id>https://github.com/ShangguanZpure/ShangguanZpure.github.io/2021/11/18/dushusuibi/</id>
    <published>2021-11-18T11:42:44.000Z</published>
    <updated>2022-12-31T14:11:54.711Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何去阅读"><a href="#如何去阅读" class="headerlink" title="如何去阅读"></a>如何去阅读</h1><p>阅读的层次</p><p>第一层次读懂场景和事件 的起因经过结果</p><p>第二层次是读懂隐藏的信息，这需要我们对那个时间节点、场景意味有所了解</p><p>第三层次，“阅读理解到了深层次，其实就是读书上升到读人” </p><p>我有读懂读者内心的作品和经历吗？</p><p>“作者将小说中的人物塑造成特定的样式，并不是想编一个故事让我们在茶余饭后挤出两滴泪水，也不是想通过情节牵引我们的好奇心，而是想告诉我们，他们所处的世界以及他们希望的世界是什么样子的”</p><p>需要我们对那个时间节点、场景意味有所了解？如何做到呢？</p><p>需要某个领域知识体系，如何高效构建？</p><ol><li>找正统的入门级书籍、课程、资料（我对历史感兴趣：阅读 斯塔夫里阿诺斯的《全球通史》，对金融感兴趣，阅读 Campbell R. McConnell 的《经济学》）</li><li>找权威的综述文章</li><li>找有趣的专著</li></ol><p>怎么检测自己是否在有效构建呢？</p><ul><li>列出过去两三年阅读过某个领域的书籍</li><li>接下来一年里打算阅读的书籍和杂志</li></ul><p>阅读分清楚主观和客观的信息？</p><ul><li>客观需要考察信息源可靠程度</li><li>主观需要注意他得出结论的逻辑</li></ul><p>如何提高阅读速度？</p><p>不仅给出方法，也给出很有说服力的例子，吴军老师牛逼啊</p><ul><li>要做到有意识的阅读（训练上可以使用语音默读来辅助眼、脑进行同步，这招对我很有效）</li><li>提高对文章结构和有用信息的敏感度（文章结构分宏观和微观，有用信息分清主观和客观，注重因，过程，果）</li></ul><p>如何体会古典文学的魅力？（这个我之前是真体会不到）</p><ul><li>体会不到的原因还在于对时代背景和隐喻无法体会导致的，换句话说，就是还没够到阅读这些名著的信息量的及格线……</li></ul><h1 id="如何去写作"><a href="#如何去写作" class="headerlink" title="如何去写作"></a>如何去写作</h1><p>写作需要有轮廓-你整体的看法和态度，细节-支持看法和态度的证据，以及串起细节的线索</p><p>善用比喻、对比和夸张的修辞手法</p><p>学会寓情于景，触景生情</p><h2 id="如何写好心理活动？"><a href="#如何写好心理活动？" class="headerlink" title="如何写好心理活动？"></a>如何写好心理活动？</h2><p>通过直接描写人物的心理，或者人物独白来呈现</p><p>间接描写，描写人物的形态，表情，动作来呈现，或者借助别人的嘴说出来，由别人的话产生感触和联想</p><h2 id="如何叙事"><a href="#如何叙事" class="headerlink" title="如何叙事"></a>如何叙事</h2><p>学习了叠叙的叙事方式，找一个锚定点</p><ul><li>自然顺序S -&gt; D -&gt; M -&gt; D -&gt; E</li><li>找到锚定点 M </li><li>多线叙事：<ul><li>M -&gt; D</li><li>M - - &gt; S -&gt; D </li></ul></li><li>直到两条线重合，揭示谜底后再顺叙</li></ul><p>锚定点事最先与读者见面的事件，一定要吸引人。</p><h1 id="日常实用写作"><a href="#日常实用写作" class="headerlink" title="日常实用写作"></a>日常实用写作</h1><p>写日记</p><ul><li>最好的写作训练手段</li><li>写什么？<ul><li>工作经历</li><li>读书笔记</li><li>特殊经历</li></ul></li><li>怎么写？<ul><li>过滤内容，只写一件事</li><li>目的性明确，多做总结</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      书会第一次打卡活动
    
    </summary>
    
    
      <category term="读书笔记" scheme="https://github.com/ShangguanZpure/ShangguanZpure.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="生活" scheme="https://github.com/ShangguanZpure/ShangguanZpure.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="读书笔记" scheme="https://github.com/ShangguanZpure/ShangguanZpure.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="方法论" scheme="https://github.com/ShangguanZpure/ShangguanZpure.github.io/tags/%E6%96%B9%E6%B3%95%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>风控学习笔记</title>
    <link href="https://github.com/ShangguanZpure/ShangguanZpure.github.io/2021/11/18/risk-learning/"/>
    <id>https://github.com/ShangguanZpure/ShangguanZpure.github.io/2021/11/18/risk-learning/</id>
    <published>2021-11-18T11:42:44.000Z</published>
    <updated>2022-12-31T14:11:54.718Z</updated>
    
    <content type="html"><![CDATA[<h1 id="评价指标"><a href="#评价指标" class="headerlink" title="评价指标"></a>评价指标</h1><h2 id="KS指标-PSI指标"><a href="#KS指标-PSI指标" class="headerlink" title="KS指标/PSI指标"></a>KS指标/PSI指标</h2><p>KS评价变量对结果的区分度<br>PSI评价变量对与结果影响是否稳定（相对时间）</p><h1 id="基本术语"><a href="#基本术语" class="headerlink" title="基本术语"></a>基本术语</h1><h2 id="A-B-C卡"><a href="#A-B-C卡" class="headerlink" title="A/B/C卡"></a>A/B/C卡</h2><p>A ：application<br>B : Beahavior<br>C : cuishou</p><h1 id="树模型与规则挖掘（第二课时）"><a href="#树模型与规则挖掘（第二课时）" class="headerlink" title="树模型与规则挖掘（第二课时）"></a>树模型与规则挖掘（第二课时）</h1><h2 id="单变量分析"><a href="#单变量分析" class="headerlink" title="单变量分析"></a>单变量分析</h2><p>link: <a href="https://www.jianshu.com/p/13c19bbd550d" target="_blank" rel="noopener">https://www.jianshu.com/p/13c19bbd550d</a></p><ul><li>zip 函数 dataframe 根据列表初始化</li><li>sorted(ite_obj, key= ，reverse=) 自定义排序</li><li>line 画单变量图形</li></ul><h2 id="树模型的一些疑惑"><a href="#树模型的一些疑惑" class="headerlink" title="树模型的一些疑惑"></a>树模型的一些疑惑</h2><ul><li>为什么ID3树 特征取值较多的值 信息熵比较小 如何克服？</li><li>CART树的回归是怎么划分出R个集合的呢？</li></ul><h2 id="基于决策树规则挖掘油品贷案例"><a href="#基于决策树规则挖掘油品贷案例" class="headerlink" title="基于决策树规则挖掘油品贷案例"></a>基于决策树规则挖掘油品贷案例</h2><p>link: <a href="https://www.jianshu.com/p/13c19bbd550d" target="_blank" rel="noopener">https://www.jianshu.com/p/13c19bbd550d</a> </p><ul><li>做了什么数据清洗呢？ id去重、缺失值填充 dp.drop_duplicates() dp.fillna()</li><li>做了哪些数据衍生？ 一些时间跨度统计、常规统计 groupby().apply().reset_index() dp.sort_values() dp.merge()</li><li>训练的目标是什么？为什么使用回归决策树进行训练呢？</li></ul><h1 id="（第三课时）特征工程"><a href="#（第三课时）特征工程" class="headerlink" title="（第三课时）特征工程"></a>（第三课时）特征工程</h1><p>基于时间序列进行特征衍生: <a href="https://www.pypandas.cn/docs/getting_started/10min.html" target="_blank" rel="noopener">学习pandas和numpy 的加工语句</a></p><ul><li>基础特征构造</li><li>数据预处理：删、填</li><li>特征衍生：DFS/CNN</li><li>特征变换</li><li>特征筛选<ul><li>skl pkgs提供的工具<ul><li>filter 根据计算指标筛选<ul><li>移除低方差：筛选方差为0</li><li>单变量特征选择：相关性分析<ul><li>卡方检验 <strong>x,y</strong>之间比较</li><li>皮尔逊相关系数 <strong>x1,x2</strong>之间的比较 用于去重</li><li>方差膨胀系数 VIF</li></ul></li></ul></li><li>wrapper<ul><li>递归特征消除</li></ul></li><li>embedded<ul><li>利用模型来筛选（主流方法，机器学习方法）</li></ul></li></ul></li><li>实操<ul><li>会遇到的问题<ul><li>模型效果不好（大概率 数据集本身就有问题）</li><li>训练集效果好，跨时间测试效果不好（样本分布不一致导致 入模变量不对 需要根据跨时间样本调整入模变量 查看PSI值）</li><li>跨时间测试效果好，上线之后效果不好（线上线下模型变量逻辑有问题）</li><li>上线之后效果好，几周之后分数分布开始下滑</li><li>上线后一到两个月比较稳定，突然分数骤降（一般是外部环境、业务运营）</li><li>没有明显问题，但是模型每个月逐步失效（普遍行为）</li></ul></li><li>怎么解决这些问题（在建模过程）<ul><li>变量有贡献</li><li>变量线性无关</li><li>逻辑回归评分卡希望变量呈现单调趋势（业务角度也希望）</li><li>样本分布稳定性评估PSI 模型的PSI、变量的PSI</li><li>操作步骤：<ul><li>变量重要性<ul><li>IV值（woe值）</li><li>卡方检验</li><li>模型筛选（L1正则、树模型）<strong>目前都用XGboost来做了</strong></li></ul></li><li>变量相关性评估<ul><li>皮尔逊相关系数 R</li><li>方差膨胀系数 VIF</li></ul></li><li>变量稳定性评估 <ul><li>PSI</li><li>跨时间交叉检验（取多个模型变量的交集，但是要小心共性特征，不一定每次都要在模型中，因为可能是两个共性特征的任一个进入模型，严格取交集会导致共性特征都取不到）</li></ul></li><li>作业：<ul><li>上诉用到的指标在代码中的写法都熟悉下</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul><blockquote><p>特征衍生前进行特征变量筛选? 一般不会</p></blockquote><h1 id="（第四课时）逻辑回归与评分卡"><a href="#（第四课时）逻辑回归与评分卡" class="headerlink" title="（第四课时）逻辑回归与评分卡"></a>（第四课时）逻辑回归与评分卡</h1><h2 id="训练逻辑回归"><a href="#训练逻辑回归" class="headerlink" title="训练逻辑回归"></a>训练逻辑回归</h2><p>课程上讲的太乱太快、不细致<br>找到一个实战 <a href="https://zhuanlan.zhihu.com/p/148102950" target="_blank" rel="noopener">例子</a></p><ul><li>需要后续深入研究的知识点<ul><li>如何做分箱操作<ul><li>什么变量需要做分箱 binning</li><li>如何分箱</li><li>如何判断分箱的好坏</li></ul></li></ul></li></ul><h2 id="建立评分模型"><a href="#建立评分模型" class="headerlink" title="建立评分模型"></a>建立评分模型</h2><h2 id="分数划分和贷后监控"><a href="#分数划分和贷后监控" class="headerlink" title="分数划分和贷后监控"></a>分数划分和贷后监控</h2>]]></content>
    
    <summary type="html">
    
      风控学习
    
    </summary>
    
    
      <category term="机器学习" scheme="https://github.com/ShangguanZpure/ShangguanZpure.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="工作" scheme="https://github.com/ShangguanZpure/ShangguanZpure.github.io/tags/%E5%B7%A5%E4%BD%9C/"/>
    
      <category term="技术" scheme="https://github.com/ShangguanZpure/ShangguanZpure.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="建模" scheme="https://github.com/ShangguanZpure/ShangguanZpure.github.io/tags/%E5%BB%BA%E6%A8%A1/"/>
    
      <category term="风控" scheme="https://github.com/ShangguanZpure/ShangguanZpure.github.io/tags/%E9%A3%8E%E6%8E%A7/"/>
    
  </entry>
  
  <entry>
    <title>python错误输出和日志模块</title>
    <link href="https://github.com/ShangguanZpure/ShangguanZpure.github.io/2021/11/18/python_error_logging/"/>
    <id>https://github.com/ShangguanZpure/ShangguanZpure.github.io/2021/11/18/python_error_logging/</id>
    <published>2021-11-18T11:42:44.000Z</published>
    <updated>2022-12-31T14:11:54.717Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-错误日志输出"><a href="#python-错误日志输出" class="headerlink" title="python 错误日志输出"></a>python 错误日志输出</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 堆栈格式化输出</span></span><br><span class="line"><span class="keyword">import</span> traceback</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">  print(<span class="string">'error'</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">  print(traceback.format_exc())</span><br></pre></td></tr></table></figure><h1 id="python日志模块使用"><a href="#python日志模块使用" class="headerlink" title="python日志模块使用"></a>python日志模块使用</h1><p>如何让python日志自动归档？</p>]]></content>
    
    <summary type="html">
    
      python日志系统
    
    </summary>
    
    
      <category term="技术" scheme="https://github.com/ShangguanZpure/ShangguanZpure.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="工作" scheme="https://github.com/ShangguanZpure/ShangguanZpure.github.io/tags/%E5%B7%A5%E4%BD%9C/"/>
    
      <category term="技术" scheme="https://github.com/ShangguanZpure/ShangguanZpure.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="python" scheme="https://github.com/ShangguanZpure/ShangguanZpure.github.io/tags/python/"/>
    
      <category term="logger" scheme="https://github.com/ShangguanZpure/ShangguanZpure.github.io/tags/logger/"/>
    
  </entry>
  
  <entry>
    <title>shell基本知识</title>
    <link href="https://github.com/ShangguanZpure/ShangguanZpure.github.io/2021/11/08/funda_shell/"/>
    <id>https://github.com/ShangguanZpure/ShangguanZpure.github.io/2021/11/08/funda_shell/</id>
    <published>2021-11-08T11:42:44.000Z</published>
    <updated>2022-12-31T14:11:54.713Z</updated>
    
    <content type="html"><![CDATA[<h1 id="var"><a href="#var" class="headerlink" title="var"></a>var</h1><p>shell_var=’lover’<br>如果使用<br><code>${shell_var}</code><br>赋值+字符串拼接<br>shell_var=”${shell_var}abcd”</p><h1 id="shell-循环"><a href="#shell-循环" class="headerlink" title="shell 循环"></a>shell 循环</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">shell_var='aaa'</span><br><span class="line">for((i=1;i&lt;10;i++));</span><br><span class="line">do</span><br><span class="line">...</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h1 id="传参"><a href="#传参" class="headerlink" title="传参"></a>传参</h1><p>第n个参数 <code>$n</code> , n={0,1,2,3…}<br>判断第n个参数存不存在  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if [ ! -n '$1' ];then</span><br><span class="line">    echo "aaa"</span><br><span class="line">    exit 1</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h1 id="执行结果返回"><a href="#执行结果返回" class="headerlink" title="执行结果返回"></a>执行结果返回</h1><p>想返回什么数值，就使用echo输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> shell script tmp.sh</span><br><span class="line">echo 'aaaa'</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>获取返回值 并赋值给相关变量</span><br><span class="line">shell_var=$&#123;sh tmp.sh&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      shell入门
    
    </summary>
    
    
      <category term="技术" scheme="https://github.com/ShangguanZpure/ShangguanZpure.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="工作" scheme="https://github.com/ShangguanZpure/ShangguanZpure.github.io/tags/%E5%B7%A5%E4%BD%9C/"/>
    
      <category term="技术" scheme="https://github.com/ShangguanZpure/ShangguanZpure.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="shell" scheme="https://github.com/ShangguanZpure/ShangguanZpure.github.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>组建自己的Mac生态</title>
    <link href="https://github.com/ShangguanZpure/ShangguanZpure.github.io/2021/10/18/mac-config/"/>
    <id>https://github.com/ShangguanZpure/ShangguanZpure.github.io/2021/10/18/mac-config/</id>
    <published>2021-10-18T11:42:44.000Z</published>
    <updated>2022-12-31T14:11:54.715Z</updated>
    
    <content type="html"><![CDATA[<h1 id="装饰自己的Terminal"><a href="#装饰自己的Terminal" class="headerlink" title="装饰自己的Terminal"></a>装饰自己的Terminal</h1><p>安装了Homebrew（配置了清华源）安装搜索homebrewCN<br>安装了iterm2并配置主题（主题未设置好）官网下载</p><h2 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h2><p>安装目录<br>激活主题</p><h1 id="墙外"><a href="#墙外" class="headerlink" title="墙外"></a>墙外</h1><p>shodowsocks</p><h1 id="建立自己的Blog"><a href="#建立自己的Blog" class="headerlink" title="建立自己的Blog"></a>建立自己的Blog</h1><ul><li>使用git  </li><li><a href="https://zhuanlan.zhihu.com/p/192376753" target="_blank" rel="noopener">建立博客的指南</a></li></ul><h1 id="建立自己的开发生态"><a href="#建立自己的开发生态" class="headerlink" title="建立自己的开发生态"></a>建立自己的开发生态</h1><h2 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h2><ul><li>vscode</li><li>idea</li></ul><h2 id="计划管理"><a href="#计划管理" class="headerlink" title="计划管理"></a>计划管理</h2><ul><li>Microsoft To Do</li></ul>]]></content>
    
    <summary type="html">
    
      Mac入门
    
    </summary>
    
    
      <category term="装机必备" scheme="https://github.com/ShangguanZpure/ShangguanZpure.github.io/categories/%E8%A3%85%E6%9C%BA%E5%BF%85%E5%A4%87/"/>
    
    
      <category term="技术" scheme="https://github.com/ShangguanZpure/ShangguanZpure.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Mac" scheme="https://github.com/ShangguanZpure/ShangguanZpure.github.io/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>信息熵的理解和应用</title>
    <link href="https://github.com/ShangguanZpure/ShangguanZpure.github.io/2021/09/18/entropy/"/>
    <id>https://github.com/ShangguanZpure/ShangguanZpure.github.io/2021/09/18/entropy/</id>
    <published>2021-09-18T07:20:44.000Z</published>
    <updated>2022-12-31T14:11:54.712Z</updated>
    
    <content type="html"><![CDATA[<h1 id="信息的定义"><a href="#信息的定义" class="headerlink" title="信息的定义"></a>信息的定义</h1><p>信息是对事件不确定性的消除，不确定性越大，信息量越大。</p><p>概率与信息量关系：概率越大的事件，提供的信息量越小，概率越小的事件，信息量越大。</p><p>信息的度量在数学上的具体表达式应该是什么样子呢？</p><p>数学上一般是这么确认：</p><ul><li>信息需要具备什么性质（特性）</li><li>尝试构造一个具备这些性质的表达式</li><li>证明这个表达式具备唯一性（反证法）</li></ul><p>信息的性质：</p><ul><li>设 $a_1,a_2$ 是两个随机事件，对应信息量 $f(a_1),f(a_2)$</li><li>若 $P(a_1)\leq P(a_2)$ ，则  $f(a_1) \geq f(a_2)$​​​</li><li>$P(a_1)=0$ , $f(a_1)=\infty$</li><li>$P(a_1)=1$，$f(a_1)=0$</li><li>若 $a_1，a_2$ 是独立事件，$f(a_1,a_2)=f(a_1)+f(a_2)$​</li></ul><p>满足上诉性质的表达式是<br>$$<br>I(a_i)=log\frac{1}{P(a_i)}<br>$$</p><blockquote><p>以后看到表达式里面有 $log\frac1{P(a_i)}$就是代表事件 $a_i$ 的信息量</p></blockquote><h1 id="信息熵的定义和衍生量"><a href="#信息熵的定义和衍生量" class="headerlink" title="信息熵的定义和衍生量"></a>信息熵的定义和衍生量</h1><p>接下来引入随机变量(或者随机分布) $X$<br>$$<br>X={x_1,x_2,…,x_N},\X具备N个状态\<br>P(X)={p(x_1),p(x_2),…,p(x_N)}\<br>P(x)就是X的随机分布<br>$$<br>$X$ 的平均度量，就是信息熵<br>$$<br>H(X)=E(log\frac1{P(X)})=\sum_{x \in X}p(x)log\frac1{p(x)}=-\sum_{x \in X}p(x)logp(x)<br>$$<br>熵的性质</p><ul><li>$P(X)$ 为等概率分布时候，$H(X)$ 最大</li></ul><p><strong>熵可以理解为是随机变量的信息度量</strong>，在这个理解层面拓展，研究多个随机变量之间的关系，可以衍生出<a href="https://zhuanlan.zhihu.com/p/140376729" target="_blank" rel="noopener">联合熵、条件熵、互信息</a>，它们之间的关系可以用集合的维恩图<a href="集合关系的示意图">^1</a>表示：<br>$$<br>I(X;Y)=H(X,Y)-H(X|Y)=H(X)+H(Y)-H(X,Y)<br>$$<br><strong>熵也可以理解是对一种随机分布的信息量的度量</strong>，在这个理解层面上拓展，研究多个随机分布之间的关系，可以衍生出<a href="https://zhuanlan.zhihu.com/p/339084218" target="_blank" rel="noopener">交叉熵和K- L散度</a>。</p><p>前面提及的范围都是对一种分布来讨论，下面讨论对同一个事件（具备N个状态）两种分布 $P={p_1,p_2,…,p_k,…,p_N}$  ，$Q={q_1,q_2,…,q_k,…,q_N}$ </p><p>消除分布 $P$ 的不确定性需要最小的信息量（最优确认策略）是 $H(P)$ ， 那么，当我们使用非最优策略（根据分布 $Q$ 制定）消除系统的不确定性，所需要付出的信息量的大小（努力程度）我们该如何去衡量呢？</p><p>这就需要引入<strong>交叉熵，其用来衡量在给定的真实分布下，使用非真实分布所指定的策略消除系统的不确定性所需要信息量（付出的努力的大小）</strong>。</p><p>使用分布 $Q$制定策略，对于 $k$ 状态，需要的信息量为 $log\frac1{q_k}$，因此交叉熵为<br>$$<br>H(P||Q)=\sum_{k=1}^N{p_klog\frac1{q_k}}<br>$$<br>相对熵  $D(P||Q)$ 表示非最优策略和最优策略之间的差异，度量了从Q分布逼近P分布信息量差异（具有方向性）,<br>$$<br>\begin{align<em>}<br>&amp;D(P||Q)= H(P||Q)-H(P)\<br>&amp;= \sum_{k=1}^N{p_klog\frac1{q_k}}-\sum_{k=1}^N{p_klog\frac1{p_k}}\<br>&amp;=\sum_{k=1}^N{p_klog\frac{p_k}{q_k}}<br>\end{align</em>}<br>$$<br>相对熵就是 $K-L$ 散度。</p><p>为了消除K-L散度的方向性，引入<strong>K-L距离</strong>，衡量两个分布之间的差异。<br>$$<br>\begin{align<em>}<br>&amp;D(P||Q)+D(Q||P)\<br>&amp;=\sum_{k=1}^N{p_klog\frac{p_k}{q_k}}+\sum_{k=1}^N{q_klog\frac{q_k}{p_k}}\<br>&amp;=\sum_{k=1}^N(p_k-q_k)log\frac{p_k}{q_k}\<br>&amp;=\sum_{k=1}^N(p_k-q_k)(log{p_k}-log{q_k})<br>\end{align</em>}<br>$$</p><h1 id="K-L-距离的使用"><a href="#K-L-距离的使用" class="headerlink" title="K-L 距离的使用"></a>K-L 距离的使用</h1><p><strong>相对熵与IV的关系</strong></p><p>将K-L距离中的两个随机分布p、q换为模型预测后得到的正负样本的概率密度函数f(p|B)和f(p|G)就是IV</p><p><strong>相对熵与PSI的关系</strong></p><p>PSI本质上是实际分布（A）与预期分布（E）的K-L散度的一个对称化操作</p>]]></content>
    
    <summary type="html">
    
      重新学学基本数学概念
    
    </summary>
    
    
      <category term="机器学习" scheme="https://github.com/ShangguanZpure/ShangguanZpure.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="技术" scheme="https://github.com/ShangguanZpure/ShangguanZpure.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="建模" scheme="https://github.com/ShangguanZpure/ShangguanZpure.github.io/tags/%E5%BB%BA%E6%A8%A1/"/>
    
      <category term="机器学习" scheme="https://github.com/ShangguanZpure/ShangguanZpure.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>flask 学习笔记</title>
    <link href="https://github.com/ShangguanZpure/ShangguanZpure.github.io/2021/09/08/python-flask/"/>
    <id>https://github.com/ShangguanZpure/ShangguanZpure.github.io/2021/09/08/python-flask/</id>
    <published>2021-09-08T11:42:44.000Z</published>
    <updated>2022-12-31T14:11:54.717Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h1 id="flask运行环境设置"><a href="#flask运行环境设置" class="headerlink" title="flask运行环境设置"></a>flask运行环境设置</h1><p>在docker中安装<br>base镜像 centos<br>新建容器 centos-python-web<br>centos 包依赖下载<br><code>yum install pkg-name</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> add user</span><br><span class="line">adduser antpython</span><br><span class="line">yum install passwd</span><br><span class="line">passwd antpython</span><br><span class="line"><span class="meta">#</span># add wheel user group for using 'sudo' cmd</span><br><span class="line">gpasswd -a antpython wheel</span><br><span class="line"><span class="meta">#</span># checkout antpython user</span><br><span class="line">sudo -iu antpython</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> init dev-env</span><br><span class="line">sudo yum install epel-release</span><br><span class="line"><span class="meta">#</span># install gcc and ngnix</span><br><span class="line">sudo yum install gcc nginx</span><br><span class="line">sudo yum install wget</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> install anaconda</span><br><span class="line">wget https://repo.continuum.io/archive/Anaconda3-2019.10-Linux-x86_64.sh</span><br><span class="line">sh Anaconda3-2019.10-Linux-x86_64.sh</span><br><span class="line"><span class="meta">#</span># activate the ana env</span><br><span class="line">source anaconda3/bin/activate </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> creat virtual python env</span><br><span class="line"><span class="meta">#</span># install virtualenv for python env management</span><br><span class="line">pip install virtualenv</span><br><span class="line">mkdir myproject</span><br><span class="line">cd myproject/</span><br><span class="line"><span class="meta">#</span># create virtual env</span><br><span class="line">virtualenv myprojectenv</span><br><span class="line"><span class="meta">#</span># activate env</span><br><span class="line">source myprojectenv/bin/activate</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> init flask app</span><br><span class="line">pip install uwsgi flask</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> write a flask app</span><br><span class="line">    # from flask import Flask</span><br><span class="line">    # application = Flask(__name__)</span><br><span class="line"></span><br><span class="line">    # @application.route('/')</span><br><span class="line">    # def Hello():</span><br><span class="line">    #     return "Hello There!"</span><br><span class="line"></span><br><span class="line">    # if __name__ == '__main__':</span><br><span class="line">    #     application.run(host='0.0.0.0')</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> in order to link container and local, need open sys 5000 port</span><br><span class="line"><span class="meta">#</span> when the docker container creats, bind the port</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> create the wsgi web server</span><br><span class="line"><span class="meta">#</span># create the flask web app run methord</span><br><span class="line">vim mywsgi.py</span><br><span class="line"><span class="meta">  #</span>from myproject import application</span><br><span class="line"></span><br><span class="line"><span class="meta">  #</span>if __name__ == '__main__':</span><br><span class="line"><span class="meta">  #</span>    application.run()</span><br><span class="line"><span class="meta">#</span># test the run by wsgi</span><br><span class="line">nohup uwsgi --socket 0.0.0.0:5000 --protocol=http -w mywsgi &amp;</span><br><span class="line"><span class="meta">#</span># config uwsgi cfg-file</span><br><span class="line">vim myproject.ini</span><br><span class="line">    # [uwsgi]</span><br><span class="line">    # module = mywsgi</span><br><span class="line"></span><br><span class="line">    # master = true</span><br><span class="line">    # processes = 5</span><br><span class="line">    # threads = 100</span><br><span class="line"></span><br><span class="line">    # http = 0.0.0.0:5000</span><br><span class="line">    # virtualenv = /home/antpython/myproject/myprojectenv</span><br><span class="line">    # die-on-term = true</span><br><span class="line"><span class="meta">#</span> run uwsgi by cfg-file</span><br><span class="line">uwsgi --ini myproject.ini</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> set the restart script: the linux-sys restart then the python-web restart</span><br><span class="line">vim myproject.service</span><br><span class="line">    # [Unit]</span><br><span class="line">    # Description=uWSGI instance to serve myproject</span><br><span class="line">    # After=network.target</span><br><span class="line"></span><br><span class="line">    # [Service]</span><br><span class="line">    # User=antpython</span><br><span class="line">    # Group=nginx</span><br><span class="line">    # WorkingDirectory=/home/antpython/myproject</span><br><span class="line">    # Environment="PATH=/home/antpython/myproject/myprojectenv/bin"</span><br><span class="line">    # ExecStart=/home/antpython/myproject/myprojectenv/bin/uwsgi --ini myproject.ini</span><br><span class="line">sudo systemctl start myproject.service</span><br><span class="line">sudo systemctl enable myproject.service</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>#test</span><br><span class="line">sudo reboot now</span><br></pre></td></tr></table></figure><h1 id="python-pip下载安装包以及其依赖，到指定目录"><a href="#python-pip下载安装包以及其依赖，到指定目录" class="headerlink" title="python pip下载安装包以及其依赖，到指定目录"></a>python pip下载安装包以及其依赖，到指定目录</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip freeze &gt; requirements.txt</span><br><span class="line">pip download -d DIR -r requirements.txt</span><br><span class="line">pip install --no-index --find-links=DIR -r requirements.txt</span><br></pre></td></tr></table></figure><h1 id="conda-多版本环境切换"><a href="#conda-多版本环境切换" class="headerlink" title="conda 多版本环境切换"></a>conda 多版本环境切换</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">conda create -n your_env_name python=x.x</span><br><span class="line">conda activate your_env_name</span><br><span class="line">conda deactivate</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      python web 入门
    
    </summary>
    
    
      <category term="技术" scheme="https://github.com/ShangguanZpure/ShangguanZpure.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="工作" scheme="https://github.com/ShangguanZpure/ShangguanZpure.github.io/tags/%E5%B7%A5%E4%BD%9C/"/>
    
      <category term="技术" scheme="https://github.com/ShangguanZpure/ShangguanZpure.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="flask" scheme="https://github.com/ShangguanZpure/ShangguanZpure.github.io/tags/flask/"/>
    
      <category term="python" scheme="https://github.com/ShangguanZpure/ShangguanZpure.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 刷题笔记</title>
    <link href="https://github.com/ShangguanZpure/ShangguanZpure.github.io/2021/08/16/leetcode-daily/"/>
    <id>https://github.com/ShangguanZpure/ShangguanZpure.github.io/2021/08/16/leetcode-daily/</id>
    <published>2021-08-16T11:42:44.000Z</published>
    <updated>2022-12-31T14:11:54.714Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul><li>原帖链接：<a href="https://github.com/doocs/leetcode/commit/59d54a57a62e21235fe25a5b7b72d8136469971e">leetcode-pdf</a></li><li>git 管理</li><li>ide：vscode</li><li>开发语言：java + python</li></ul><h1 id="那些还未掌握的思路"><a href="#那些还未掌握的思路" class="headerlink" title="那些还未掌握的思路"></a>那些还未掌握的思路</h1><p><a href="https://github.com/doocs/leetcode/blob/main/solution/0100-0199/0113.Path%20Sum%20II/README.md">深度优先搜索+路径记录</a></p><p>深度优先搜索，就是一种遍历的方式，优先使用递归的写法，可以让自己更专注处理好对遍历当前节点处理时候，更为集中精力。</p><p>这道例题很好的说明处理遍历节点的骚操作，就是专注眼前，化繁为简（二叉树的每个节点事同质的，所以专注处理一个节点就可以，节点的串联关系交给遍历就可以）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(root, sum)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> root <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    path.append(root.val) <span class="comment">#处理当前节点</span></span><br><span class="line">    <span class="keyword">if</span> root.val == sum <span class="keyword">and</span> root.left <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">and</span> root.right <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">      res.append(path.copy()) <span class="comment"># 终止条件</span></span><br><span class="line">      dfs(root.left, sum - root.val)</span><br><span class="line">      dfs(root.right, sum - root.val)</span><br><span class="line">      path.pop() <span class="comment"># 骚操作</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      偶尔想起的刷题
    
    </summary>
    
    
      <category term="leetcode" scheme="https://github.com/ShangguanZpure/ShangguanZpure.github.io/categories/leetcode/"/>
    
    
      <category term="技术" scheme="https://github.com/ShangguanZpure/ShangguanZpure.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="leetcode" scheme="https://github.com/ShangguanZpure/ShangguanZpure.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>盛夏未来观后感</title>
    <link href="https://github.com/ShangguanZpure/ShangguanZpure.github.io/2021/08/13/shengxiaoweilai/"/>
    <id>https://github.com/ShangguanZpure/ShangguanZpure.github.io/2021/08/13/shengxiaoweilai/</id>
    <published>2021-08-12T17:42:44.000Z</published>
    <updated>2022-12-31T14:11:54.718Z</updated>
    
    <content type="html"><![CDATA[<h1 id="盛夏未来"><a href="#盛夏未来" class="headerlink" title="盛夏未来"></a>盛夏未来</h1><blockquote><p>一直是找不到重点的絮絮叨叨，所以这是一篇有一搭没一搭 没重点的观后感  散文还讲究形散神不散 这一篇连神都没有 但是还是有一种倾诉欲 想把那些感触的点记下来</p></blockquote><p>看这部电影前，我跟朋友说，盛夏未来即便是一部烂俗狗血的青春片，冲着吴磊和张子枫的颜，我应该也可以很享受的看完，这两位真的完完全全长在我的审美点上。吴磊的俊朗的大男孩子气质大概就是我灵魂的样子吧……，张子枫眉清目秀，搭上直挺的鼻子，这种柔中带刚的气质完全把我吃的死死的。</p><p>电影是在厦门拍的，这是我看的第一部在厦门拍摄的电影 剧里的场景感觉很熟悉又很陌生 能看到我在厦门生活的味道 可是剧里的场景我都没有去过 就感觉 生活的这些美好 我却一直没去发现 发现美的眼睛都半快蒙尘了 看着电影里面的场景——在海边聊天 在教室听歌 我发现厦门的阳光真的好美 照在脸上 那种干净纯粹的味道 就是厦门这座城带给我最美的礼物</p><p>既然电影里的这些场景这么棒 我都没去过 那是不是该行动起来呢 我收录下信息 一定要积极出去打卡 这些地点有：</p><ul><li>中学-找不到是哪里</li><li>离家出走的那个地下过道-泉州甲第门文创园</li><li>有两座大桥的-翔安地铁桥吗</li></ul><p>剧情上，校园生活拍的很自然，片中的学生群演们太棒了，操场跑步、班级活动起哄，还有开明又负责又幽默又善良的班主任，大家都点到为止，老师给吴磊、张子枫的训话，哦，是谈话，完全没有以上对下的怒喝和暴力，都是自然通透的交谈，郝蕾的妈妈就更棒了，那种生活的味道真的让这部剧都带上很多的烟火气，但是这个烟火气是带着淡淡的清香的，很对厦门这座城市的气质，爱死厦门这股子朴实的烟火气味道了，如果它的房价不那么高的话……</p><p>张子枫演技真的好棒啊，吴磊带着她到礼堂拍抖音宣布恋情这一段，两人假装在一起宣布爱情的样子 那里面张子枫的那些微表情和动作真的完全感觉她那时刻就是那个样子 那种小心翼翼的开心 真的好开心</p><p>我们喜欢的人却不喜欢你 张子枫的无数的演绎细节 让我深切感受到 那种开心中缺失实实在在的悲伤 我能感受到 这个高三的女孩子有着早已她年龄的成熟和坚持 同时又是活泼开朗的 这就是初恋的完美模板吗</p><p>又想起吴磊和张子枫给郝蕾和祖峰在出租车旁配音的这一段 这种神来之笔 在这部电影中有很多 真的好加分 </p><p>吴磊伴奏 女主演唱拥抱这一段 简直了 这就是最美好的青春经历吧 “这首拥抱的remix版本世上只此一版，微信传给你了” 吴磊这句话撩人而不自知啊 remix版本我强烈推荐出QQ音乐版本 我要收藏 我要单曲循环！！</p><p>即使这么优秀的青春片 现在的我看 已没有当年看怦然心动的那种心悸和感情汹涌 社会沉浮两年有余 一心搞钱 已经让这些微末的情绪触觉在慢慢的钝化了 没有办法做到那种带入别人情景的感同深受了 </p><p>张子枫的角色 其实感情世界挺复杂的 有必须面对父母婚姻破裂又尝试挽回的纠结 有在爱的人面前相处的心动和压抑的喜悦  有小鹿乱撞到不可控的爱意汹涌而出 有爱而不得的揭开彼此的伤疤……</p><p>那种青春里的感情冲撞 经历过就算真的成长了吧</p><p>故事结尾说， 彼此奔赴的相爱希望在未来有 会有的 在未来那个热烈的盛夏 。</p><p>记于 2021.08.13 1:00:09</p>]]></content>
    
    <summary type="html">
    
      胡言乱语
    
    </summary>
    
    
      <category term="观后感" scheme="https://github.com/ShangguanZpure/ShangguanZpure.github.io/categories/%E8%A7%82%E5%90%8E%E6%84%9F/"/>
    
    
      <category term="生活" scheme="https://github.com/ShangguanZpure/ShangguanZpure.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="观后感" scheme="https://github.com/ShangguanZpure/ShangguanZpure.github.io/tags/%E8%A7%82%E5%90%8E%E6%84%9F/"/>
    
      <category term="电影" scheme="https://github.com/ShangguanZpure/ShangguanZpure.github.io/tags/%E7%94%B5%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title>python 数据处理</title>
    <link href="https://github.com/ShangguanZpure/ShangguanZpure.github.io/2021/07/24/python-data-process/"/>
    <id>https://github.com/ShangguanZpure/ShangguanZpure.github.io/2021/07/24/python-data-process/</id>
    <published>2021-07-24T11:42:44.000Z</published>
    <updated>2022-12-31T14:11:54.716Z</updated>
    
    <content type="html"><![CDATA[<h1 id="统计比例"><a href="#统计比例" class="headerlink" title="统计比例"></a>统计比例</h1>]]></content>
    
    <summary type="html">
    
      python pandas
    
    </summary>
    
    
      <category term="技术" scheme="https://github.com/ShangguanZpure/ShangguanZpure.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="工作" scheme="https://github.com/ShangguanZpure/ShangguanZpure.github.io/tags/%E5%B7%A5%E4%BD%9C/"/>
    
      <category term="技术" scheme="https://github.com/ShangguanZpure/ShangguanZpure.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="python" scheme="https://github.com/ShangguanZpure/ShangguanZpure.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>docker容器学习笔记-1</title>
    <link href="https://github.com/ShangguanZpure/ShangguanZpure.github.io/2021/07/18/docker-1/"/>
    <id>https://github.com/ShangguanZpure/ShangguanZpure.github.io/2021/07/18/docker-1/</id>
    <published>2021-07-18T11:42:44.000Z</published>
    <updated>2022-12-31T14:11:54.708Z</updated>
    
    <content type="html"><![CDATA[<h1 id="容器是什么？有什么用？-what-why"><a href="#容器是什么？有什么用？-what-why" class="headerlink" title="容器是什么？有什么用？ what why"></a>容器是什么？有什么用？ what why</h1><p>容器是？ 软件打包技术<br>容器是主机上的一个独立进程，容器里面装的是一个个镜像；<br>镜像是服务更高一层的封装和打包，包含更多的基础信息，比如依赖包、配置文件、脚本、二进制文件、环境变量等。<br>容器是虚拟化技术的集大成者。<br>有什么用？ 容器提供一整套更为便捷的服务打包和部署方式。<br>容器是一种好用、快速的统一规范，是的各种交接流程简单、独立、隔离。</p><p>不知大家是否意识到，潘多拉盒子已经被打开。容器不但降低了我们学习新技术的门槛，更提高了效率。</p><blockquote><p>“That isolation leverages kernel namespaces and cgroups, features that have been in Linux for a long time.”<br>这一句英语怎么翻译？</p></blockquote><p>CLI：command-line interface</p><h1 id="docker基本框架-how"><a href="#docker基本框架-how" class="headerlink" title="docker基本框架 how"></a>docker基本框架 how</h1><ul><li>底层： runtime</li><li>管理工具： docker engine 提供操作接口</li><li>定义工具： docker file 生成 docker image 存放在docker registries 很多好的image 放在 docker Hub </li><li>为了让docker安全稳定的运行 需要一系列可靠的工具 所以有了容器平台技术 包含管理分布式集群的容器编排技术 在这个基础上还有 支持一键部署等更抽象一层的容器管理平台和一系列的支持技术，支持技术的内容一般都是这几样：网络关系管理、服务发现、监控、数据管理、日志管理、安全性 目前找不到好的一个形象比喻，把它们好好串联起来</li></ul><h2 id="docker的镜像"><a href="#docker的镜像" class="headerlink" title="docker的镜像"></a>docker的镜像</h2><p>base -&gt; 可以共享base 比喻：多个不同楼房可以共用一个地基， 或者是共用前N层（N &gt; = 0)</p><p>copy-on-write：镜像只可读 不可写 可以复用 因为写才会产生冲突 写都在各自容器的容器层写</p><h1 id="docker初体验"><a href="#docker初体验" class="headerlink" title="docker初体验"></a>docker初体验</h1><p>参考的教程是在ubantu系统，我在Mac系统，所以我先看官方的入门介绍<br>链接为：<a href="https://docs.docker.com/get-started/" target="_blank" rel="noopener">https://docs.docker.com/get-started/</a></p><h2 id="设置docker的镜像源"><a href="#设置docker的镜像源" class="headerlink" title="设置docker的镜像源"></a>设置docker的镜像源</h2><p>不设置的话，根本无法下载远程仓库资源，我设置的是亚马逊和网易源<br>设置方式参见这个链接：</p><ul><li><a href="https://zhuanlan.zhihu.com/p/146876547" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/146876547</a></li><li><a href="http://t.zoukankan.com/aric2016-p-12423226.html" target="_blank" rel="noopener">http://t.zoukankan.com/aric2016-p-12423226.html</a></li><li><a href="https://blog.csdn.net/u012081441/article/details/104553145/" target="_blank" rel="noopener">https://blog.csdn.net/u012081441/article/details/104553145/</a></li></ul><h2 id="dockerFile-配置和运行"><a href="#dockerFile-配置和运行" class="headerlink" title="dockerFile 配置和运行"></a>dockerFile 配置和运行</h2><p>dockerFile 运行先看看本层的镜像层是否已经存在，存在直接复用，不存在新建临时容器运行配置的命令后commmit为新的镜像层（有commit ID）<br>如此往复 直到结束。</p><h3 id="Dockerfile常用指令"><a href="#Dockerfile常用指令" class="headerlink" title="Dockerfile常用指令"></a>Dockerfile常用指令</h3><h3 id="docker-仓库的使用"><a href="#docker-仓库的使用" class="headerlink" title="docker 仓库的使用"></a>docker 仓库的使用</h3><p>repository 的完整格式为：<br><code>[registry-host]:[port]/[username]/xxx</code><br>例如： <code>[host]:5000/sgzc/httpd:v1</code></p><h3 id="docker-基本操作"><a href="#docker-基本操作" class="headerlink" title="docker 基本操作"></a>docker 基本操作</h3><h4 id="镜像常用操作"><a href="#镜像常用操作" class="headerlink" title="镜像常用操作"></a>镜像常用操作</h4><p>images    显示镜像列表</p><p>history   显示镜像构建历史</p><p>commit    从容器创建新镜像</p><p>build     从 Dockerfile 构建镜像</p><p>tag       给镜像打 tag</p><p>pull      从 registry 下载镜像</p><p>push      将 镜像 上传到 registry</p><p>rmi       删除 Docker host 中的镜像</p><p>search    搜索 Docker Hub 中的镜像</p><h4 id="容器常用操作"><a href="#容器常用操作" class="headerlink" title="容器常用操作"></a>容器常用操作</h4><p>docker run –name “container-name” -d </p><p>create      创建容器  </p><p>run         运行容器  </p><p>pause       暂停容器  </p><p>unpause     取消暂停继续运行容器  </p><p>stop        发送 SIGTERM 停止容器  </p><p>kill        发送 SIGKILL 快速停止容器  </p><p>start       启动容器  </p><p>restart     重启容器  </p><p>attach      attach 到容器启动进程的终端  </p><p>exec        在容器中启动新进程，通常使用 “-it” 参数  </p><p>logs        显示容器启动进程的控制台输出，用 “-f” 持续打印  </p><p>rm          从磁盘中删除容器</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li>官方文档：<a href="https://docs.docker.com/get-started" target="_blank" rel="noopener">https://docs.docker.com/get-started</a></li><li><a href="https://mp.weixin.qq.com/mp/homepage?__biz=MzI5NDE3ODQyNg==&hid=3&sn=d1883dae2f3e73bc4bb3af24b12c6d00&scene=18" target="_blank" rel="noopener">每日五分钟系列</a></li></ul>]]></content>
    
    <summary type="html">
    
      docker入门
    
    </summary>
    
    
      <category term="技术" scheme="https://github.com/ShangguanZpure/ShangguanZpure.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="工作" scheme="https://github.com/ShangguanZpure/ShangguanZpure.github.io/tags/%E5%B7%A5%E4%BD%9C/"/>
    
      <category term="技术" scheme="https://github.com/ShangguanZpure/ShangguanZpure.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="docker" scheme="https://github.com/ShangguanZpure/ShangguanZpure.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>理财笔记</title>
    <link href="https://github.com/ShangguanZpure/ShangguanZpure.github.io/2021/07/18/take-money/"/>
    <id>https://github.com/ShangguanZpure/ShangguanZpure.github.io/2021/07/18/take-money/</id>
    <published>2021-07-18T11:42:44.000Z</published>
    <updated>2022-12-31T14:11:54.720Z</updated>
    
    <content type="html"><![CDATA[<h1 id="十年十倍"><a href="#十年十倍" class="headerlink" title="十年十倍"></a>十年十倍</h1><p>熟悉了两种买入策略：</p><ul><li>价值投资：持有最小PE的股票 五日轮换 不知道价值何时体现 熬不过去 提前止损 </li><li>趋势投资：“红三兵策略” 连续三个交易日上涨买入 盈利5%卖出 刻舟求剑</li></ul>]]></content>
    
    <summary type="html">
    
      从零开始
    
    </summary>
    
    
      <category term="理财" scheme="https://github.com/ShangguanZpure/ShangguanZpure.github.io/categories/%E7%90%86%E8%B4%A2/"/>
    
    
      <category term="生活" scheme="https://github.com/ShangguanZpure/ShangguanZpure.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="理财" scheme="https://github.com/ShangguanZpure/ShangguanZpure.github.io/tags/%E7%90%86%E8%B4%A2/"/>
    
      <category term="基金" scheme="https://github.com/ShangguanZpure/ShangguanZpure.github.io/tags/%E5%9F%BA%E9%87%91/"/>
    
  </entry>
  
  <entry>
    <title>公式之美书籍阅读笔记</title>
    <link href="https://github.com/ShangguanZpure/ShangguanZpure.github.io/2021/07/18/the-beauty-of-formula/"/>
    <id>https://github.com/ShangguanZpure/ShangguanZpure.github.io/2021/07/18/the-beauty-of-formula/</id>
    <published>2021-07-18T11:42:44.000Z</published>
    <updated>2022-12-31T14:11:54.722Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-1-2"><a href="#1-1-2" class="headerlink" title="1+1=2"></a>1+1=2</h1><h1 id="勾股定理"><a href="#勾股定理" class="headerlink" title="勾股定理"></a>勾股定理</h1><h1 id="费马大定理"><a href="#费马大定理" class="headerlink" title="费马大定理"></a>费马大定理</h1><h1 id="牛顿-莱布尼兹公式"><a href="#牛顿-莱布尼兹公式" class="headerlink" title="牛顿-莱布尼兹公式"></a>牛顿-莱布尼兹公式</h1><h1 id="柯西公式"><a href="#柯西公式" class="headerlink" title="柯西公式"></a>柯西公式</h1><h1 id><a href="#" class="headerlink" title></a></h1>]]></content>
    
    <summary type="html">
    
      读书笔记
    
    </summary>
    
    
      <category term="读书笔记" scheme="https://github.com/ShangguanZpure/ShangguanZpure.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="读书笔记" scheme="https://github.com/ShangguanZpure/ShangguanZpure.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="读书" scheme="https://github.com/ShangguanZpure/ShangguanZpure.github.io/tags/%E8%AF%BB%E4%B9%A6/"/>
    
      <category term="数学" scheme="https://github.com/ShangguanZpure/ShangguanZpure.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>flask-framework</title>
    <link href="https://github.com/ShangguanZpure/ShangguanZpure.github.io/2020/11/16/flask-framework/"/>
    <id>https://github.com/ShangguanZpure/ShangguanZpure.github.io/2020/11/16/flask-framework/</id>
    <published>2020-11-16T03:25:25.000Z</published>
    <updated>2022-12-31T13:30:09.651Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Flask框架升级研究"><a href="#Flask框架升级研究" class="headerlink" title="Flask框架升级研究"></a>Flask框架升级研究</h1><p>[toc]</p><h2 id="WEB是什么"><a href="#WEB是什么" class="headerlink" title="WEB是什么"></a>WEB是什么</h2><p>Web应用的本质就是：</p><ol><li>浏览器发送一个<strong>HTTP请求</strong>；</li><li>服务器收到请求，生成一个<strong>HTML文档</strong>；</li><li>服务器把HTML文档作为HTTP响应的<strong>Body</strong>发送给浏览器；</li><li>浏览器收到HTTP响应，从HTTP Body取出HTML文档并显示。</li></ol><p><strong>接受HTTP请求、解析HTTP请求、发送HTTP响应都是苦力活</strong>，如果我们自己来写这些底层代码，还没开始写动态HTML呢，就得花个把月去读HTTP规范。</p><p>正确的做法是<strong>底层代码由专门的服务器软件实现</strong>，<strong>我们用Python专注于生成HTML文档</strong></p><blockquote><p>WSGI规定了这些底层代码的规范 有很多项目组实现了这个规范 编写了很多服务器  例如：？？</p><p>WSGI是说明书 ？？是依据说明书生产出来的机器</p></blockquote><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>【1】<a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017805733037760" target="_blank" rel="noopener">WEB开发入门介绍</a></p><p>【2】<a href="http://www.nowamagic.net/academy/part/13/302" target="_blank" rel="noopener">python web部署整体介绍</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Flask框架升级研究&quot;&gt;&lt;a href=&quot;#Flask框架升级研究&quot; class=&quot;headerlink&quot; title=&quot;Flask框架升级研究&quot;&gt;&lt;/a&gt;Flask框架升级研究&lt;/h1&gt;&lt;p&gt;[toc]&lt;/p&gt;
&lt;h2 id=&quot;WEB是什么&quot;&gt;&lt;a href=
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>python-funda</title>
    <link href="https://github.com/ShangguanZpure/ShangguanZpure.github.io/2020/10/21/python-funda/"/>
    <id>https://github.com/ShangguanZpure/ShangguanZpure.github.io/2020/10/21/python-funda/</id>
    <published>2020-10-21T03:07:21.000Z</published>
    <updated>2022-12-31T13:30:09.653Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="包导入和自定义包"><a href="#包导入和自定义包" class="headerlink" title="包导入和自定义包"></a>包导入和自定义包</h1><h2 id="Python模块查找路径"><a href="#Python模块查找路径" class="headerlink" title="Python模块查找路径"></a>Python模块查找路径</h2><p>import 语句执行时候，Python会查找相应的模块并导入，顺序为：</p><p>先查找内置模块</p><p>查找sys.path（先查找当前目录文件，PATHONPATH，系统PATH）</p><h2 id="init-py"><a href="#init-py" class="headerlink" title="_init_.py"></a>_<em>init_</em>.py</h2><p><code>__init__.py</code> 在包被导入时会被执行,为<strong>所在包</strong>进行一些初始化操作，不在所在包则不生效。</p><p>用于 导入该模块该目录下需要用到的一些依赖或者其他一些初始化操作。</p><h2 id="如何自制包"><a href="#如何自制包" class="headerlink" title="如何自制包"></a>如何自制包</h2><p>在包的最外层同级目录新建setup.py</p><p>运行 <code>Python setup.py sdist</code></p><h2 id="如何下载依赖安装包"><a href="#如何下载依赖安装包" class="headerlink" title="如何下载依赖安装包"></a>如何下载依赖安装包</h2><p>直接Google <code>依赖包==版本号</code>，下载即可。</p><p>.whl文件安装方法：<code>pip install &lt;pkg.whl&gt;</code></p><p>.tar.gz文件：<code>tar -zxvf &lt;.tar.gz&gt; -C ./</code>            <code>python setup.py install</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;包导入和自定义包&quot;&gt;&lt;a href=&quot;#包导入和自定义包&quot; class=&quot;headerlink&quot; title=&quot;包导入和自定义包&quot;&gt;&lt;/a&gt;包导入和自定义包&lt;/h1&gt;&lt;h2 id=&quot;Python模块查找路径&quot;&gt;&lt;a href=&quot;#Pyth
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>photo-learning</title>
    <link href="https://github.com/ShangguanZpure/ShangguanZpure.github.io/2020/10/06/photo-learning/"/>
    <id>https://github.com/ShangguanZpure/ShangguanZpure.github.io/2020/10/06/photo-learning/</id>
    <published>2020-10-06T03:19:01.000Z</published>
    <updated>2022-12-31T13:30:09.653Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="需要的材料"><a href="#需要的材料" class="headerlink" title="需要的材料"></a>需要的材料</h1><h2 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h2><p>纽约摄影教程</p><h2 id="关注的人"><a href="#关注的人" class="headerlink" title="关注的人"></a>关注的人</h2><p>photo:</p><ol><li>学习调色，弄懂调色的参数 @安东尼的调色日记</li></ol><p>vedio:</p><ol><li>学习后期剪辑Pr  <strong><em>@Hivi</em></strong></li></ol><p>另外就是多看关注列表的摄影师吧，发现宝藏后也要经常看。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;需要的材料&quot;&gt;&lt;a href=&quot;#需要的材料&quot; class=&quot;headerlink&quot; title=&quot;需要的材料&quot;&gt;&lt;/a&gt;需要的材料&lt;/h1&gt;&lt;h2 id=&quot;书籍&quot;&gt;&lt;a href=&quot;#书籍&quot; class=&quot;headerlink&quot; tit
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>sklearnNote</title>
    <link href="https://github.com/ShangguanZpure/ShangguanZpure.github.io/2020/08/27/sklearnNote/"/>
    <id>https://github.com/ShangguanZpure/ShangguanZpure.github.io/2020/08/27/sklearnNote/</id>
    <published>2020-08-27T01:59:49.000Z</published>
    <updated>2022-12-31T13:30:09.654Z</updated>
    
    <content type="html"><![CDATA[<h1 id="整体介绍"><a href="#整体介绍" class="headerlink" title="整体介绍"></a>整体介绍</h1><p>模型公共部署，提供python传统机器学习模型（XGBoost,Sklearn模型）部署和计算服务。</p><p>具体为：业务方将需要部署的模型文件（XGB方式打包、Sklearn方式打包）交由引擎部署，业务方通过请求报文发起请求服务到引擎，引擎送入模型计算并以报文方式返回计算结果。</p><p>交易码：A0942A406</p><h1 id="接口规范"><a href="#接口规范" class="headerlink" title="接口规范"></a>接口规范</h1><p>请求报文格式：（新增申请件编号字段 <em>todo</em>）</p><ol><li>申请件编号</li><li>调用模型文件名称</li><li>请求信息json串</li></ol><p>返回报文格式：（AplId中的A改为小写 <em>todo</em>）</p><ol><li>申请件编号</li><li>服务响应状态代码（01 success 00 fail)</li><li>返回信息json串</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">//请求json信息</span><br><span class="line">&#123;</span><br><span class="line">    //"traceId": "", //交易流水号 VMD中加入</span><br><span class="line">    "aplId": "", //申请件编号</span><br><span class="line">    "bsnName": "",  //业务名称 模型放置在该目录下</span><br><span class="line">    "modType": "", //对应机器学习模型类型：XGB/LR/SKL_COMMOD</span><br><span class="line">    "modName": "", //模型文件名称</span><br><span class="line">    "packPKLAppro": "", //模型KPL的封装方式 1 SKL_JOBLIB 2 SKL_PICKLE 3 XGB</span><br><span class="line">    "aplParams": &#123;</span><br><span class="line">        "":"",</span><br><span class="line">        "":""</span><br><span class="line">    &#125;//模型的输入参数</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//返回的json信息</span><br><span class="line">//统一格式</span><br><span class="line">//正确返回</span><br><span class="line">&#123;</span><br><span class="line">    "pre_results": "[0.06245352]", //模型的返回结果</span><br><span class="line">    "aplId": "test001", //申请件ID</span><br><span class="line">    "sysRespCode": "201", //返回状态码 成功201 失败 500</span><br><span class="line">    "rspInf": "success" //返回状态具体描述</span><br><span class="line">&#125;</span><br><span class="line">//错误返回</span><br><span class="line">&#123;</span><br><span class="line">    "aplId": "null", //申请件ID</span><br><span class="line">    "sysRespCode": "500", //返回状态码</span><br><span class="line">    "rspInf": "Exception('请求信息解析出错')" //返回状态具体描述</span><br><span class="line">&#125;</span><br><span class="line">//LR模型返回（特殊）</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"pre_labels"</span>: <span class="string">"0"</span>, </span><br><span class="line">    <span class="attr">"pre_probas"</span>: <span class="string">"0.879682,0.120308,0.000011"</span>, </span><br><span class="line">    <span class="attr">"aplId"</span>: <span class="string">"test001"</span>, </span><br><span class="line">    <span class="attr">"sysRespCode"</span>: <span class="string">"201"</span>, </span><br><span class="line">    <span class="attr">"rspInf"</span>: <span class="string">"success"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h1><ul><li>请求解析为模型输入格式</li><li>下载模型</li><li>模型预测</li><li>编辑返回结果并返回</li></ul><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>开启flask调试模式</p><ol><li>XGB模型和LR模型正确请求测试 <strong>done</strong></li><li>动态新增模型是否可动态加载 <strong>done</strong></li><li>请求信息有错误下处理方法：缺失请求信息，请求信息格式，内容错误 <strong>done</strong></li><li>请求信息为空 请求信息不是post请求 <strong>done</strong></li></ol><h1 id="Questions"><a href="#Questions" class="headerlink" title="Questions"></a>Questions</h1><ol><li>python LR 逻辑回归 预测变量中有缺失值如何处理? 引擎不处理</li><li><strong>vscode 组织python工程的方法之后学习（包含导包、调试），目前先临时测试下自己写的代码，然后放到linux上面去测试，先完成开发</strong></li><li></li></ol><h1 id="模型描述唯一标识"><a href="#模型描述唯一标识" class="headerlink" title="模型描述唯一标识"></a>模型描述唯一标识</h1><p>添加模型类别 modTarget：回归 or 分类(<strong><em>不需要</em></strong>，因为SKL的预测函数都是model.predict())</p><p>模型类型modType：LR、XGB、SKL_COMMOD（SKL提供的模型方法）</p><p>模型打包方式modPKLAppro：  SKL_PICKLE、SKL_JOBLIB、 XGB</p><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><p>json.dump():转化dict-&gt;str</p><p>json.dumps():转化dict-&gt;str并存入文件</p><h1 id="LR模型"><a href="#LR模型" class="headerlink" title="LR模型"></a>LR模型</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#json请求 转化为 array-like</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">"aplParams":"N1,N2,N3,...,Nn"</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">array([[N1,N2,N3,...,Nn]])</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#封装为PKL文件</span></span><br><span class="line"><span class="number">1.</span> pickle</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> sklearn <span class="keyword">import</span> svm</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>clf = svm.SVC()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>iris = datasets.load_iris()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>X, y = iris.data, iris.target</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>clf.fit(X, y)  </span><br><span class="line">SVC(C=<span class="number">1.0</span>, cache_size=<span class="number">200</span>, class_weight=<span class="literal">None</span>, coef0=<span class="number">0.0</span>,</span><br><span class="line">    decision_function_shape=<span class="literal">None</span>, degree=<span class="number">3</span>, gamma=<span class="string">'auto'</span>, kernel=<span class="string">'rbf'</span>,</span><br><span class="line">    max_iter=<span class="number">-1</span>, probability=<span class="literal">False</span>, random_state=<span class="literal">None</span>, shrinking=<span class="literal">True</span>,</span><br><span class="line">    tol=<span class="number">0.001</span>, verbose=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pickle</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = pickle.dumps(clf)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>clf2 = pickle.loads(s)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>clf2.predict(X[<span class="number">0</span>:<span class="number">1</span>])</span><br><span class="line">array([<span class="number">0</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> joblib</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> sklearn.externals <span class="keyword">import</span> joblib</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>joblib.dump(clf, <span class="string">'filename.pkl'</span>) </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>clf = joblib.load(<span class="string">'filename.pkl'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#进行预测以及输出结果</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>X, y = load_iris(return_X_y=<span class="literal">True</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>clf = LogisticRegression(random_state=<span class="number">0</span>).fit(X, y)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>clf.predict(X[:<span class="number">2</span>, :])</span><br><span class="line">array([<span class="number">0</span>, <span class="number">0</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>clf.predict_proba(X[:<span class="number">2</span>, :])</span><br><span class="line">array([[<span class="number">9.8</span>...e<span class="number">-01</span>, <span class="number">1.8</span>...e<span class="number">-02</span>, <span class="number">1.4</span>...e<span class="number">-08</span>],</span><br><span class="line">       [<span class="number">9.7</span>...e<span class="number">-01</span>, <span class="number">2.8</span>...e<span class="number">-02</span>, ...e<span class="number">-08</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>clf.score(X, y)</span><br><span class="line"><span class="number">0.97</span>...</span><br></pre></td></tr></table></figure><h1 id="XGB模型"><a href="#XGB模型" class="headerlink" title="XGB模型"></a>XGB模型</h1><p><a href="https://cloud.tencent.com/developer/article/1387686" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1387686</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 请求解析为模型输入格式</span></span><br><span class="line"><span class="comment"># X_test类型可以是二维List，也可以是numpy的数组 array([[]])</span></span><br><span class="line">dtest = DMatrix(X_test)</span><br><span class="line">ans = model.predict(dtest)</span><br><span class="line"><span class="comment"># 下载模型\模型预测</span></span><br><span class="line"><span class="comment"># 使用XGB.save_model()封装的PKL文件</span></span><br><span class="line"><span class="comment"># save model</span></span><br><span class="line">bst.save_model(<span class="string">'xgb.model'</span>)</span><br><span class="line"><span class="comment"># load model and data in</span></span><br><span class="line">bst2 = xgb.Booster(model_file=<span class="string">'xgb.model'</span>)</span><br><span class="line">dtest2 = xgb.DMatrix(<span class="string">'dtest.buffer'</span>)</span><br><span class="line">preds2 = bst2.predict(dtest2)</span><br><span class="line"><span class="comment"># 使用SKL封装的PKL文件</span></span><br><span class="line"><span class="comment"># alternatively, you can pickle the booster</span></span><br><span class="line">pks = pickle.dumps(bst2)</span><br><span class="line"><span class="comment"># load model and data in</span></span><br><span class="line">bst3 = pickle.loads(pks)</span><br><span class="line">preds3 = bst3.predict(dtest2)</span><br><span class="line"><span class="comment"># 编辑返回结果并返回</span></span><br><span class="line">pre_output[<span class="string">"results"</span>] = str(preds3)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;整体介绍&quot;&gt;&lt;a href=&quot;#整体介绍&quot; class=&quot;headerlink&quot; title=&quot;整体介绍&quot;&gt;&lt;/a&gt;整体介绍&lt;/h1&gt;&lt;p&gt;模型公共部署，提供python传统机器学习模型（XGBoost,Sklearn模型）部署和计算服务。&lt;/p&gt;
&lt;p&gt;具体为：
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
