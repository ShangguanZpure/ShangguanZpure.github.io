<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>建模基本流程</title>
      <link href="/2022/03/31/%E5%BB%BA%E6%A8%A1%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B/"/>
      <url>/2022/03/31/%E5%BB%BA%E6%A8%A1%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>之前做的笔记</p><h2 id="特征工程（周二构造一个版本）"><a href="#特征工程（周二构造一个版本）" class="headerlink" title="特征工程（周二构造一个版本）"></a>特征工程（周二构造一个版本）</h2><ul><li><p>基础特征构造 done</p></li><li><p>数据预处理：删、填</p></li><li><p>特征衍生：DFS/CNN done apart</p></li><li><p>特征变换：特征分布可视化</p></li><li><p>特征筛选</p><ul><li>变量重要性<ul><li>移除低方差：筛选方差为0</li><li>模型筛选（L1正则、树模型）<strong>目前都用lightgbm来做了</strong> 用sns可视化</li></ul></li><li>变量相关性评估<ul><li>卡方检验 <strong>x,y</strong>之间比较</li><li>皮尔逊相关系数 R  <strong>x1,x2</strong>之间的比较 用于去重</li><li>方差膨胀系数 VIF</li></ul></li><li>变量稳定性评估 <ul><li>PSI</li><li>跨时间交叉检验（取多个模型变量的交集，但是要小心共性特征，不一定每次都要在模型中，因为可能是两个共性特征的任一个进入模型，严格取交集会导致共性特征都取不到）</li></ul></li></ul></li><li><p>样本不均衡问题</p></li><li><p>后续考虑</p></li></ul><h1 id="模型调参（周三之前）"><a href="#模型调参（周三之前）" class="headerlink" title="模型调参（周三之前）"></a>模型调参（周三之前）</h1><p>目标函数选择 binary</p><p>评估指标选择 auc</p><p><a href="https://zhuanlan.zhihu.com/p/149522630" target="_blank" rel="noopener">LightGBM调参</a></p><p><a href="https://www.cnblogs.com/bjwu/p/9307344.html" target="_blank" rel="noopener">lightGBM调参 -first</a></p><h1 id="模型融合"><a href="#模型融合" class="headerlink" title="模型融合"></a>模型融合</h1>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作 </tag>
            
            <tag> 技术 </tag>
            
            <tag> 建模 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何阅读一本书-吴军</title>
      <link href="/2021/11/18/dushusuibi/"/>
      <url>/2021/11/18/dushusuibi/</url>
      
        <content type="html"><![CDATA[<h1 id="如何去阅读"><a href="#如何去阅读" class="headerlink" title="如何去阅读"></a>如何去阅读</h1><p>阅读的层次</p><p>第一层次读懂场景和事件 的起因经过结果</p><p>第二层次是读懂隐藏的信息，这需要我们对那个时间节点、场景意味有所了解</p><p>第三层次，“阅读理解到了深层次，其实就是读书上升到读人” </p><p>我有读懂读者内心的作品和经历吗？</p><p>“作者将小说中的人物塑造成特定的样式，并不是想编一个故事让我们在茶余饭后挤出两滴泪水，也不是想通过情节牵引我们的好奇心，而是想告诉我们，他们所处的世界以及他们希望的世界是什么样子的”</p><p>需要我们对那个时间节点、场景意味有所了解？如何做到呢？</p><p>需要某个领域知识体系，如何高效构建？</p><ol><li>找正统的入门级书籍、课程、资料（我对历史感兴趣：阅读 斯塔夫里阿诺斯的《全球通史》，对金融感兴趣，阅读 Campbell R. McConnell 的《经济学》）</li><li>找权威的综述文章</li><li>找有趣的专著</li></ol><p>怎么检测自己是否在有效构建呢？</p><ul><li>列出过去两三年阅读过某个领域的书籍</li><li>接下来一年里打算阅读的书籍和杂志</li></ul><p>阅读分清楚主观和客观的信息？</p><ul><li>客观需要考察信息源可靠程度</li><li>主观需要注意他得出结论的逻辑</li></ul><p>如何提高阅读速度？</p><p>不仅给出方法，也给出很有说服力的例子，吴军老师牛逼啊</p><ul><li>要做到有意识的阅读（训练上可以使用语音默读来辅助眼、脑进行同步，这招对我很有效）</li><li>提高对文章结构和有用信息的敏感度（文章结构分宏观和微观，有用信息分清主观和客观，注重因，过程，果）</li></ul><p>如何体会古典文学的魅力？（这个我之前是真体会不到）</p><ul><li>体会不到的原因还在于对时代背景和隐喻无法体会导致的，换句话说，就是还没够到阅读这些名著的信息量的及格线……</li></ul><h1 id="如何去写作"><a href="#如何去写作" class="headerlink" title="如何去写作"></a>如何去写作</h1><p>写作需要有轮廓-你整体的看法和态度，细节-支持看法和态度的证据，以及串起细节的线索</p><p>善用比喻、对比和夸张的修辞手法</p><p>学会寓情于景，触景生情</p><h2 id="如何写好心理活动？"><a href="#如何写好心理活动？" class="headerlink" title="如何写好心理活动？"></a>如何写好心理活动？</h2><p>通过直接描写人物的心理，或者人物独白来呈现</p><p>间接描写，描写人物的形态，表情，动作来呈现，或者借助别人的嘴说出来，由别人的话产生感触和联想</p><h2 id="如何叙事"><a href="#如何叙事" class="headerlink" title="如何叙事"></a>如何叙事</h2><p>学习了叠叙的叙事方式，找一个锚定点</p><ul><li>自然顺序S -&gt; D -&gt; M -&gt; D -&gt; E</li><li>找到锚定点 M </li><li>多线叙事：<ul><li>M -&gt; D</li><li>M - - &gt; S -&gt; D </li></ul></li><li>直到两条线重合，揭示谜底后再顺叙</li></ul><p>锚定点事最先与读者见面的事件，一定要吸引人。</p><h1 id="日常实用写作"><a href="#日常实用写作" class="headerlink" title="日常实用写作"></a>日常实用写作</h1><p>写日记</p><ul><li>最好的写作训练手段</li><li>写什么？<ul><li>工作经历</li><li>读书笔记</li><li>特殊经历</li></ul></li><li>怎么写？<ul><li>过滤内容，只写一件事</li><li>目的性明确，多做总结</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
            <tag> 读书笔记 </tag>
            
            <tag> 方法论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python错误输出和日志模块</title>
      <link href="/2021/11/18/python_error_logging/"/>
      <url>/2021/11/18/python_error_logging/</url>
      
        <content type="html"><![CDATA[<h1 id="python-错误日志输出"><a href="#python-错误日志输出" class="headerlink" title="python 错误日志输出"></a>python 错误日志输出</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 堆栈格式化输出</span></span><br><span class="line"><span class="keyword">import</span> traceback</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">  print(<span class="string">'error'</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">  print(traceback.format_exc())</span><br></pre></td></tr></table></figure><h1 id="python日志模块使用"><a href="#python日志模块使用" class="headerlink" title="python日志模块使用"></a>python日志模块使用</h1><p>如何让python日志自动归档？</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作 </tag>
            
            <tag> 技术 </tag>
            
            <tag> python </tag>
            
            <tag> logger </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>风控学习笔记</title>
      <link href="/2021/11/18/risk-learning/"/>
      <url>/2021/11/18/risk-learning/</url>
      
        <content type="html"><![CDATA[<h1 id="评价指标"><a href="#评价指标" class="headerlink" title="评价指标"></a>评价指标</h1><h2 id="KS指标-PSI指标"><a href="#KS指标-PSI指标" class="headerlink" title="KS指标/PSI指标"></a>KS指标/PSI指标</h2><p>KS评价变量对结果的区分度<br>PSI评价变量对与结果影响是否稳定（相对时间）</p><h1 id="基本术语"><a href="#基本术语" class="headerlink" title="基本术语"></a>基本术语</h1><h2 id="A-B-C卡"><a href="#A-B-C卡" class="headerlink" title="A/B/C卡"></a>A/B/C卡</h2><p>A ：application<br>B : Beahavior<br>C : cuishou</p><h1 id="树模型与规则挖掘（第二课时）"><a href="#树模型与规则挖掘（第二课时）" class="headerlink" title="树模型与规则挖掘（第二课时）"></a>树模型与规则挖掘（第二课时）</h1><h2 id="单变量分析"><a href="#单变量分析" class="headerlink" title="单变量分析"></a>单变量分析</h2><p>link: <a href="https://www.jianshu.com/p/13c19bbd550d" target="_blank" rel="noopener">https://www.jianshu.com/p/13c19bbd550d</a></p><ul><li>zip 函数 dataframe 根据列表初始化</li><li>sorted(ite_obj, key= ，reverse=) 自定义排序</li><li>line 画单变量图形</li></ul><h2 id="树模型的一些疑惑"><a href="#树模型的一些疑惑" class="headerlink" title="树模型的一些疑惑"></a>树模型的一些疑惑</h2><ul><li>为什么ID3树 特征取值较多的值 信息熵比较小 如何克服？</li><li>CART树的回归是怎么划分出R个集合的呢？</li></ul><h2 id="基于决策树规则挖掘油品贷案例"><a href="#基于决策树规则挖掘油品贷案例" class="headerlink" title="基于决策树规则挖掘油品贷案例"></a>基于决策树规则挖掘油品贷案例</h2><p>link: <a href="https://www.jianshu.com/p/13c19bbd550d" target="_blank" rel="noopener">https://www.jianshu.com/p/13c19bbd550d</a> </p><ul><li>做了什么数据清洗呢？ id去重、缺失值填充 dp.drop_duplicates() dp.fillna()</li><li>做了哪些数据衍生？ 一些时间跨度统计、常规统计 groupby().apply().reset_index() dp.sort_values() dp.merge()</li><li>训练的目标是什么？为什么使用回归决策树进行训练呢？</li></ul><h1 id="（第三课时）特征工程"><a href="#（第三课时）特征工程" class="headerlink" title="（第三课时）特征工程"></a>（第三课时）特征工程</h1><p>基于时间序列进行特征衍生: <a href="https://www.pypandas.cn/docs/getting_started/10min.html" target="_blank" rel="noopener">学习pandas和numpy 的加工语句</a></p><ul><li>基础特征构造</li><li>数据预处理：删、填</li><li>特征衍生：DFS/CNN</li><li>特征变换</li><li>特征筛选<ul><li>skl pkgs提供的工具<ul><li>filter 根据计算指标筛选<ul><li>移除低方差：筛选方差为0</li><li>单变量特征选择：相关性分析<ul><li>卡方检验 <strong>x,y</strong>之间比较</li><li>皮尔逊相关系数 <strong>x1,x2</strong>之间的比较 用于去重</li><li>方差膨胀系数 VIF</li></ul></li></ul></li><li>wrapper<ul><li>递归特征消除</li></ul></li><li>embedded<ul><li>利用模型来筛选（主流方法，机器学习方法）</li></ul></li></ul></li><li>实操<ul><li>会遇到的问题<ul><li>模型效果不好（大概率 数据集本身就有问题）</li><li>训练集效果好，跨时间测试效果不好（样本分布不一致导致 入模变量不对 需要根据跨时间样本调整入模变量 查看PSI值）</li><li>跨时间测试效果好，上线之后效果不好（线上线下模型变量逻辑有问题）</li><li>上线之后效果好，几周之后分数分布开始下滑</li><li>上线后一到两个月比较稳定，突然分数骤降（一般是外部环境、业务运营）</li><li>没有明显问题，但是模型每个月逐步失效（普遍行为）</li></ul></li><li>怎么解决这些问题（在建模过程）<ul><li>变量有贡献</li><li>变量线性无关</li><li>逻辑回归评分卡希望变量呈现单调趋势（业务角度也希望）</li><li>样本分布稳定性评估PSI 模型的PSI、变量的PSI</li><li>操作步骤：<ul><li>变量重要性<ul><li>IV值（woe值）</li><li>卡方检验</li><li>模型筛选（L1正则、树模型）<strong>目前都用XGboost来做了</strong></li></ul></li><li>变量相关性评估<ul><li>皮尔逊相关系数 R</li><li>方差膨胀系数 VIF</li></ul></li><li>变量稳定性评估 <ul><li>PSI</li><li>跨时间交叉检验（取多个模型变量的交集，但是要小心共性特征，不一定每次都要在模型中，因为可能是两个共性特征的任一个进入模型，严格取交集会导致共性特征都取不到）</li></ul></li><li>作业：<ul><li>上诉用到的指标在代码中的写法都熟悉下</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul><blockquote><p>特征衍生前进行特征变量筛选? 一般不会</p></blockquote><h1 id="（第四课时）逻辑回归与评分卡"><a href="#（第四课时）逻辑回归与评分卡" class="headerlink" title="（第四课时）逻辑回归与评分卡"></a>（第四课时）逻辑回归与评分卡</h1><h2 id="训练逻辑回归"><a href="#训练逻辑回归" class="headerlink" title="训练逻辑回归"></a>训练逻辑回归</h2><p>课程上讲的太乱太快、不细致<br>找到一个实战 <a href="https://zhuanlan.zhihu.com/p/148102950" target="_blank" rel="noopener">例子</a></p><ul><li>需要后续深入研究的知识点<ul><li>如何做分箱操作<ul><li>什么变量需要做分箱 binning</li><li>如何分箱</li><li>如何判断分箱的好坏</li></ul></li></ul></li></ul><h2 id="建立评分模型"><a href="#建立评分模型" class="headerlink" title="建立评分模型"></a>建立评分模型</h2><h2 id="分数划分和贷后监控"><a href="#分数划分和贷后监控" class="headerlink" title="分数划分和贷后监控"></a>分数划分和贷后监控</h2>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作 </tag>
            
            <tag> 技术 </tag>
            
            <tag> 建模 </tag>
            
            <tag> 风控 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell基本知识</title>
      <link href="/2021/11/08/funda_shell/"/>
      <url>/2021/11/08/funda_shell/</url>
      
        <content type="html"><![CDATA[<h1 id="var"><a href="#var" class="headerlink" title="var"></a>var</h1><p>shell_var=’lover’<br>如果使用<br><code>${shell_var}</code><br>赋值+字符串拼接<br>shell_var=”${shell_var}abcd”</p><h1 id="shell-循环"><a href="#shell-循环" class="headerlink" title="shell 循环"></a>shell 循环</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">shell_var='aaa'</span><br><span class="line">for((i=1;i&lt;10;i++));</span><br><span class="line">do</span><br><span class="line">...</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h1 id="传参"><a href="#传参" class="headerlink" title="传参"></a>传参</h1><p>第n个参数 <code>$n</code> , n={0,1,2,3…}<br>判断第n个参数存不存在  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if [ ! -n '$1' ];then</span><br><span class="line">    echo "aaa"</span><br><span class="line">    exit 1</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h1 id="执行结果返回"><a href="#执行结果返回" class="headerlink" title="执行结果返回"></a>执行结果返回</h1><p>想返回什么数值，就使用echo输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> shell script tmp.sh</span><br><span class="line">echo 'aaaa'</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>获取返回值 并赋值给相关变量</span><br><span class="line">shell_var=$&#123;sh tmp.sh&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作 </tag>
            
            <tag> 技术 </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>组建自己的Mac生态</title>
      <link href="/2021/10/18/mac-config/"/>
      <url>/2021/10/18/mac-config/</url>
      
        <content type="html"><![CDATA[<h1 id="装饰自己的Terminal"><a href="#装饰自己的Terminal" class="headerlink" title="装饰自己的Terminal"></a>装饰自己的Terminal</h1><p>安装了Homebrew（配置了清华源）安装搜索homebrewCN<br>安装了iterm2并配置主题（主题未设置好）官网下载</p><h2 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h2><p>安装目录<br>激活主题</p><h1 id="墙外"><a href="#墙外" class="headerlink" title="墙外"></a>墙外</h1><p>shodowsocks</p><h1 id="建立自己的Blog"><a href="#建立自己的Blog" class="headerlink" title="建立自己的Blog"></a>建立自己的Blog</h1><ul><li>使用git  </li><li><a href="https://zhuanlan.zhihu.com/p/192376753" target="_blank" rel="noopener">建立博客的指南</a></li></ul><h1 id="建立自己的开发生态"><a href="#建立自己的开发生态" class="headerlink" title="建立自己的开发生态"></a>建立自己的开发生态</h1><h2 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h2><ul><li>vscode</li><li>idea</li></ul><h2 id="计划管理"><a href="#计划管理" class="headerlink" title="计划管理"></a>计划管理</h2><ul><li>Microsoft To Do</li></ul>]]></content>
      
      
      <categories>
          
          <category> 装机必备 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信息熵的理解和应用</title>
      <link href="/2021/09/18/entropy/"/>
      <url>/2021/09/18/entropy/</url>
      
        <content type="html"><![CDATA[<h1 id="信息的定义"><a href="#信息的定义" class="headerlink" title="信息的定义"></a>信息的定义</h1><p>信息是对事件不确定性的消除，不确定性越大，信息量越大。</p><p>概率与信息量关系：概率越大的事件，提供的信息量越小，概率越小的事件，信息量越大。</p><p>信息的度量在数学上的具体表达式应该是什么样子呢？</p><p>数学上一般是这么确认：</p><ul><li>信息需要具备什么性质（特性）</li><li>尝试构造一个具备这些性质的表达式</li><li>证明这个表达式具备唯一性（反证法）</li></ul><p>信息的性质：</p><ul><li>设 $a_1,a_2$ 是两个随机事件，对应信息量 $f(a_1),f(a_2)$</li><li>若 $P(a_1)\leq P(a_2)$ ，则  $f(a_1) \geq f(a_2)$​​​</li><li>$P(a_1)=0$ , $f(a_1)=\infty$</li><li>$P(a_1)=1$，$f(a_1)=0$</li><li>若 $a_1，a_2$ 是独立事件，$f(a_1,a_2)=f(a_1)+f(a_2)$​</li></ul><p>满足上诉性质的表达式是<br>$$<br>I(a_i)=log\frac{1}{P(a_i)}<br>$$</p><blockquote><p>以后看到表达式里面有 $log\frac1{P(a_i)}$就是代表事件 $a_i$ 的信息量</p></blockquote><h1 id="信息熵的定义和衍生量"><a href="#信息熵的定义和衍生量" class="headerlink" title="信息熵的定义和衍生量"></a>信息熵的定义和衍生量</h1><p>接下来引入随机变量(或者随机分布) $X$<br>$$<br>X={x_1,x_2,…,x_N},\X具备N个状态\<br>P(X)={p(x_1),p(x_2),…,p(x_N)}\<br>P(x)就是X的随机分布<br>$$<br>$X$ 的平均度量，就是信息熵<br>$$<br>H(X)=E(log\frac1{P(X)})=\sum_{x \in X}p(x)log\frac1{p(x)}=-\sum_{x \in X}p(x)logp(x)<br>$$<br>熵的性质</p><ul><li>$P(X)$ 为等概率分布时候，$H(X)$ 最大</li></ul><p><strong>熵可以理解为是随机变量的信息度量</strong>，在这个理解层面拓展，研究多个随机变量之间的关系，可以衍生出<a href="https://zhuanlan.zhihu.com/p/140376729" target="_blank" rel="noopener">联合熵、条件熵、互信息</a>，它们之间的关系可以用集合的维恩图<a href="集合关系的示意图">^1</a>表示：<br>$$<br>I(X;Y)=H(X,Y)-H(X|Y)=H(X)+H(Y)-H(X,Y)<br>$$<br><strong>熵也可以理解是对一种随机分布的信息量的度量</strong>，在这个理解层面上拓展，研究多个随机分布之间的关系，可以衍生出<a href="https://zhuanlan.zhihu.com/p/339084218" target="_blank" rel="noopener">交叉熵和K- L散度</a>。</p><p>前面提及的范围都是对一种分布来讨论，下面讨论对同一个事件（具备N个状态）两种分布 $P={p_1,p_2,…,p_k,…,p_N}$  ，$Q={q_1,q_2,…,q_k,…,q_N}$ </p><p>消除分布 $P$ 的不确定性需要最小的信息量（最优确认策略）是 $H(P)$ ， 那么，当我们使用非最优策略（根据分布 $Q$ 制定）消除系统的不确定性，所需要付出的信息量的大小（努力程度）我们该如何去衡量呢？</p><p>这就需要引入<strong>交叉熵，其用来衡量在给定的真实分布下，使用非真实分布所指定的策略消除系统的不确定性所需要信息量（付出的努力的大小）</strong>。</p><p>使用分布 $Q$制定策略，对于 $k$ 状态，需要的信息量为 $log\frac1{q_k}$，因此交叉熵为<br>$$<br>H(P||Q)=\sum_{k=1}^N{p_klog\frac1{q_k}}<br>$$<br>相对熵  $D(P||Q)$ 表示非最优策略和最优策略之间的差异，度量了从Q分布逼近P分布信息量差异（具有方向性）,<br>$$<br>\begin{align<em>}<br>&amp;D(P||Q)= H(P||Q)-H(P)\<br>&amp;= \sum_{k=1}^N{p_klog\frac1{q_k}}-\sum_{k=1}^N{p_klog\frac1{p_k}}\<br>&amp;=\sum_{k=1}^N{p_klog\frac{p_k}{q_k}}<br>\end{align</em>}<br>$$<br>相对熵就是 $K-L$ 散度。</p><p>为了消除K-L散度的方向性，引入<strong>K-L距离</strong>，衡量两个分布之间的差异。<br>$$<br>\begin{align<em>}<br>&amp;D(P||Q)+D(Q||P)\<br>&amp;=\sum_{k=1}^N{p_klog\frac{p_k}{q_k}}+\sum_{k=1}^N{q_klog\frac{q_k}{p_k}}\<br>&amp;=\sum_{k=1}^N(p_k-q_k)log\frac{p_k}{q_k}\<br>&amp;=\sum_{k=1}^N(p_k-q_k)(log{p_k}-log{q_k})<br>\end{align</em>}<br>$$</p><h1 id="K-L-距离的使用"><a href="#K-L-距离的使用" class="headerlink" title="K-L 距离的使用"></a>K-L 距离的使用</h1><p><strong>相对熵与IV的关系</strong></p><p>将K-L距离中的两个随机分布p、q换为模型预测后得到的正负样本的概率密度函数f(p|B)和f(p|G)就是IV</p><p><strong>相对熵与PSI的关系</strong></p><p>PSI本质上是实际分布（A）与预期分布（E）的K-L散度的一个对称化操作</p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 建模 </tag>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flask 学习笔记</title>
      <link href="/2021/09/08/python-flask/"/>
      <url>/2021/09/08/python-flask/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><h1 id="flask运行环境设置"><a href="#flask运行环境设置" class="headerlink" title="flask运行环境设置"></a>flask运行环境设置</h1><p>在docker中安装<br>base镜像 centos<br>新建容器 centos-python-web<br>centos 包依赖下载<br><code>yum install pkg-name</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> add user</span><br><span class="line">adduser antpython</span><br><span class="line">yum install passwd</span><br><span class="line">passwd antpython</span><br><span class="line"><span class="meta">#</span># add wheel user group for using 'sudo' cmd</span><br><span class="line">gpasswd -a antpython wheel</span><br><span class="line"><span class="meta">#</span># checkout antpython user</span><br><span class="line">sudo -iu antpython</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> init dev-env</span><br><span class="line">sudo yum install epel-release</span><br><span class="line"><span class="meta">#</span># install gcc and ngnix</span><br><span class="line">sudo yum install gcc nginx</span><br><span class="line">sudo yum install wget</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> install anaconda</span><br><span class="line">wget https://repo.continuum.io/archive/Anaconda3-2019.10-Linux-x86_64.sh</span><br><span class="line">sh Anaconda3-2019.10-Linux-x86_64.sh</span><br><span class="line"><span class="meta">#</span># activate the ana env</span><br><span class="line">source anaconda3/bin/activate </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> creat virtual python env</span><br><span class="line"><span class="meta">#</span># install virtualenv for python env management</span><br><span class="line">pip install virtualenv</span><br><span class="line">mkdir myproject</span><br><span class="line">cd myproject/</span><br><span class="line"><span class="meta">#</span># create virtual env</span><br><span class="line">virtualenv myprojectenv</span><br><span class="line"><span class="meta">#</span># activate env</span><br><span class="line">source myprojectenv/bin/activate</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> init flask app</span><br><span class="line">pip install uwsgi flask</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> write a flask app</span><br><span class="line">    # from flask import Flask</span><br><span class="line">    # application = Flask(__name__)</span><br><span class="line"></span><br><span class="line">    # @application.route('/')</span><br><span class="line">    # def Hello():</span><br><span class="line">    #     return "Hello There!"</span><br><span class="line"></span><br><span class="line">    # if __name__ == '__main__':</span><br><span class="line">    #     application.run(host='0.0.0.0')</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> in order to link container and local, need open sys 5000 port</span><br><span class="line"><span class="meta">#</span> when the docker container creats, bind the port</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> create the wsgi web server</span><br><span class="line"><span class="meta">#</span># create the flask web app run methord</span><br><span class="line">vim mywsgi.py</span><br><span class="line"><span class="meta">  #</span>from myproject import application</span><br><span class="line"></span><br><span class="line"><span class="meta">  #</span>if __name__ == '__main__':</span><br><span class="line"><span class="meta">  #</span>    application.run()</span><br><span class="line"><span class="meta">#</span># test the run by wsgi</span><br><span class="line">nohup uwsgi --socket 0.0.0.0:5000 --protocol=http -w mywsgi &amp;</span><br><span class="line"><span class="meta">#</span># config uwsgi cfg-file</span><br><span class="line">vim myproject.ini</span><br><span class="line">    # [uwsgi]</span><br><span class="line">    # module = mywsgi</span><br><span class="line"></span><br><span class="line">    # master = true</span><br><span class="line">    # processes = 5</span><br><span class="line">    # threads = 100</span><br><span class="line"></span><br><span class="line">    # http = 0.0.0.0:5000</span><br><span class="line">    # virtualenv = /home/antpython/myproject/myprojectenv</span><br><span class="line">    # die-on-term = true</span><br><span class="line"><span class="meta">#</span> run uwsgi by cfg-file</span><br><span class="line">uwsgi --ini myproject.ini</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> set the restart script: the linux-sys restart then the python-web restart</span><br><span class="line">vim myproject.service</span><br><span class="line">    # [Unit]</span><br><span class="line">    # Description=uWSGI instance to serve myproject</span><br><span class="line">    # After=network.target</span><br><span class="line"></span><br><span class="line">    # [Service]</span><br><span class="line">    # User=antpython</span><br><span class="line">    # Group=nginx</span><br><span class="line">    # WorkingDirectory=/home/antpython/myproject</span><br><span class="line">    # Environment="PATH=/home/antpython/myproject/myprojectenv/bin"</span><br><span class="line">    # ExecStart=/home/antpython/myproject/myprojectenv/bin/uwsgi --ini myproject.ini</span><br><span class="line">sudo systemctl start myproject.service</span><br><span class="line">sudo systemctl enable myproject.service</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>#test</span><br><span class="line">sudo reboot now</span><br></pre></td></tr></table></figure><h1 id="python-pip下载安装包以及其依赖，到指定目录"><a href="#python-pip下载安装包以及其依赖，到指定目录" class="headerlink" title="python pip下载安装包以及其依赖，到指定目录"></a>python pip下载安装包以及其依赖，到指定目录</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip freeze &gt; requirements.txt</span><br><span class="line">pip download -d DIR -r requirements.txt</span><br><span class="line">pip install --no-index --find-links=DIR -r requirements.txt</span><br></pre></td></tr></table></figure><h1 id="conda-多版本环境切换"><a href="#conda-多版本环境切换" class="headerlink" title="conda 多版本环境切换"></a>conda 多版本环境切换</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">conda create -n your_env_name python=x.x</span><br><span class="line">conda activate your_env_name</span><br><span class="line">conda deactivate</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作 </tag>
            
            <tag> 技术 </tag>
            
            <tag> python </tag>
            
            <tag> flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode 刷题笔记</title>
      <link href="/2021/08/16/leetcode-daily/"/>
      <url>/2021/08/16/leetcode-daily/</url>
      
        <content type="html"><![CDATA[<h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul><li>原帖链接：<a href="https://github.com/doocs/leetcode/commit/59d54a57a62e21235fe25a5b7b72d8136469971e">leetcode-pdf</a></li><li>git 管理</li><li>ide：vscode</li><li>开发语言：java + python</li></ul><h1 id="那些还未掌握的思路"><a href="#那些还未掌握的思路" class="headerlink" title="那些还未掌握的思路"></a>那些还未掌握的思路</h1><p><a href="https://github.com/doocs/leetcode/blob/main/solution/0100-0199/0113.Path%20Sum%20II/README.md">深度优先搜索+路径记录</a></p><p>深度优先搜索，就是一种遍历的方式，优先使用递归的写法，可以让自己更专注处理好对遍历当前节点处理时候，更为集中精力。</p><p>这道例题很好的说明处理遍历节点的骚操作，就是专注眼前，化繁为简（二叉树的每个节点事同质的，所以专注处理一个节点就可以，节点的串联关系交给遍历就可以）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(root, sum)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> root <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    path.append(root.val) <span class="comment">#处理当前节点</span></span><br><span class="line">    <span class="keyword">if</span> root.val == sum <span class="keyword">and</span> root.left <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">and</span> root.right <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">      res.append(path.copy()) <span class="comment"># 终止条件</span></span><br><span class="line">      dfs(root.left, sum - root.val)</span><br><span class="line">      dfs(root.right, sum - root.val)</span><br><span class="line">      path.pop() <span class="comment"># 骚操作</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>盛夏未来观后感</title>
      <link href="/2021/08/13/shengxiaoweilai/"/>
      <url>/2021/08/13/shengxiaoweilai/</url>
      
        <content type="html"><![CDATA[<h1 id="盛夏未来"><a href="#盛夏未来" class="headerlink" title="盛夏未来"></a>盛夏未来</h1><blockquote><p>一直是找不到重点的絮絮叨叨，所以这是一篇有一搭没一搭 没重点的观后感  散文还讲究形散神不散 这一篇连神都没有 但是还是有一种倾诉欲 想把那些感触的点记下来</p></blockquote><p>看这部电影前，我跟朋友说，盛夏未来即便是一部烂俗狗血的青春片，冲着吴磊和张子枫的颜，我应该也可以很享受的看完，这两位真的完完全全长在我的审美点上。吴磊的俊朗的大男孩子气质大概就是我灵魂的样子吧……，张子枫眉清目秀，搭上直挺的鼻子，这种柔中带刚的气质完全把我吃的死死的。</p><p>电影是在厦门拍的，这是我看的第一部在厦门拍摄的电影 剧里的场景感觉很熟悉又很陌生 能看到我在厦门生活的味道 可是剧里的场景我都没有去过 就感觉 生活的这些美好 我却一直没去发现 发现美的眼睛都半快蒙尘了 看着电影里面的场景——在海边聊天 在教室听歌 我发现厦门的阳光真的好美 照在脸上 那种干净纯粹的味道 就是厦门这座城带给我最美的礼物</p><p>既然电影里的这些场景这么棒 我都没去过 那是不是该行动起来呢 我收录下信息 一定要积极出去打卡 这些地点有：</p><ul><li>中学-找不到是哪里</li><li>离家出走的那个地下过道-泉州甲第门文创园</li><li>有两座大桥的-翔安地铁桥吗</li></ul><p>剧情上，校园生活拍的很自然，片中的学生群演们太棒了，操场跑步、班级活动起哄，还有开明又负责又幽默又善良的班主任，大家都点到为止，老师给吴磊、张子枫的训话，哦，是谈话，完全没有以上对下的怒喝和暴力，都是自然通透的交谈，郝蕾的妈妈就更棒了，那种生活的味道真的让这部剧都带上很多的烟火气，但是这个烟火气是带着淡淡的清香的，很对厦门这座城市的气质，爱死厦门这股子朴实的烟火气味道了，如果它的房价不那么高的话……</p><p>张子枫演技真的好棒啊，吴磊带着她到礼堂拍抖音宣布恋情这一段，两人假装在一起宣布爱情的样子 那里面张子枫的那些微表情和动作真的完全感觉她那时刻就是那个样子 那种小心翼翼的开心 真的好开心</p><p>我们喜欢的人却不喜欢你 张子枫的无数的演绎细节 让我深切感受到 那种开心中缺失实实在在的悲伤 我能感受到 这个高三的女孩子有着早已她年龄的成熟和坚持 同时又是活泼开朗的 这就是初恋的完美模板吗</p><p>又想起吴磊和张子枫给郝蕾和祖峰在出租车旁配音的这一段 这种神来之笔 在这部电影中有很多 真的好加分 </p><p>吴磊伴奏 女主演唱拥抱这一段 简直了 这就是最美好的青春经历吧 “这首拥抱的remix版本世上只此一版，微信传给你了” 吴磊这句话撩人而不自知啊 remix版本我强烈推荐出QQ音乐版本 我要收藏 我要单曲循环！！</p><p>即使这么优秀的青春片 现在的我看 已没有当年看怦然心动的那种心悸和感情汹涌 社会沉浮两年有余 一心搞钱 已经让这些微末的情绪触觉在慢慢的钝化了 没有办法做到那种带入别人情景的感同深受了 </p><p>张子枫的角色 其实感情世界挺复杂的 有必须面对父母婚姻破裂又尝试挽回的纠结 有在爱的人面前相处的心动和压抑的喜悦  有小鹿乱撞到不可控的爱意汹涌而出 有爱而不得的揭开彼此的伤疤……</p><p>那种青春里的感情冲撞 经历过就算真的成长了吧</p><p>故事结尾说， 彼此奔赴的相爱希望在未来有 会有的 在未来那个热烈的盛夏 。</p><p>记于 2021.08.13 1:00:09</p>]]></content>
      
      
      <categories>
          
          <category> 观后感 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 观后感 </tag>
            
            <tag> 生活 </tag>
            
            <tag> 电影 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python 数据处理</title>
      <link href="/2021/07/24/python-data-process/"/>
      <url>/2021/07/24/python-data-process/</url>
      
        <content type="html"><![CDATA[<h1 id="统计比例"><a href="#统计比例" class="headerlink" title="统计比例"></a>统计比例</h1>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作 </tag>
            
            <tag> 技术 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker容器学习笔记-1</title>
      <link href="/2021/07/18/docker-1/"/>
      <url>/2021/07/18/docker-1/</url>
      
        <content type="html"><![CDATA[<h1 id="容器是什么？有什么用？-what-why"><a href="#容器是什么？有什么用？-what-why" class="headerlink" title="容器是什么？有什么用？ what why"></a>容器是什么？有什么用？ what why</h1><p>容器是？ 软件打包技术<br>容器是主机上的一个独立进程，容器里面装的是一个个镜像；<br>镜像是服务更高一层的封装和打包，包含更多的基础信息，比如依赖包、配置文件、脚本、二进制文件、环境变量等。<br>容器是虚拟化技术的集大成者。<br>有什么用？ 容器提供一整套更为便捷的服务打包和部署方式。<br>容器是一种好用、快速的统一规范，是的各种交接流程简单、独立、隔离。</p><p>不知大家是否意识到，潘多拉盒子已经被打开。容器不但降低了我们学习新技术的门槛，更提高了效率。</p><blockquote><p>“That isolation leverages kernel namespaces and cgroups, features that have been in Linux for a long time.”<br>这一句英语怎么翻译？</p></blockquote><p>CLI：command-line interface</p><h1 id="docker基本框架-how"><a href="#docker基本框架-how" class="headerlink" title="docker基本框架 how"></a>docker基本框架 how</h1><ul><li>底层： runtime</li><li>管理工具： docker engine 提供操作接口</li><li>定义工具： docker file 生成 docker image 存放在docker registries 很多好的image 放在 docker Hub </li><li>为了让docker安全稳定的运行 需要一系列可靠的工具 所以有了容器平台技术 包含管理分布式集群的容器编排技术 在这个基础上还有 支持一键部署等更抽象一层的容器管理平台和一系列的支持技术，支持技术的内容一般都是这几样：网络关系管理、服务发现、监控、数据管理、日志管理、安全性 目前找不到好的一个形象比喻，把它们好好串联起来</li></ul><h2 id="docker的镜像"><a href="#docker的镜像" class="headerlink" title="docker的镜像"></a>docker的镜像</h2><p>base -&gt; 可以共享base 比喻：多个不同楼房可以共用一个地基， 或者是共用前N层（N &gt; = 0)</p><p>copy-on-write：镜像只可读 不可写 可以复用 因为写才会产生冲突 写都在各自容器的容器层写</p><h1 id="docker初体验"><a href="#docker初体验" class="headerlink" title="docker初体验"></a>docker初体验</h1><p>参考的教程是在ubantu系统，我在Mac系统，所以我先看官方的入门介绍<br>链接为：<a href="https://docs.docker.com/get-started/" target="_blank" rel="noopener">https://docs.docker.com/get-started/</a></p><h2 id="设置docker的镜像源"><a href="#设置docker的镜像源" class="headerlink" title="设置docker的镜像源"></a>设置docker的镜像源</h2><p>不设置的话，根本无法下载远程仓库资源，我设置的是亚马逊和网易源<br>设置方式参见这个链接：</p><ul><li><a href="https://zhuanlan.zhihu.com/p/146876547" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/146876547</a></li><li><a href="http://t.zoukankan.com/aric2016-p-12423226.html" target="_blank" rel="noopener">http://t.zoukankan.com/aric2016-p-12423226.html</a></li><li><a href="https://blog.csdn.net/u012081441/article/details/104553145/" target="_blank" rel="noopener">https://blog.csdn.net/u012081441/article/details/104553145/</a></li></ul><h2 id="dockerFile-配置和运行"><a href="#dockerFile-配置和运行" class="headerlink" title="dockerFile 配置和运行"></a>dockerFile 配置和运行</h2><p>dockerFile 运行先看看本层的镜像层是否已经存在，存在直接复用，不存在新建临时容器运行配置的命令后commmit为新的镜像层（有commit ID）<br>如此往复 直到结束。</p><h3 id="Dockerfile常用指令"><a href="#Dockerfile常用指令" class="headerlink" title="Dockerfile常用指令"></a>Dockerfile常用指令</h3><h3 id="docker-仓库的使用"><a href="#docker-仓库的使用" class="headerlink" title="docker 仓库的使用"></a>docker 仓库的使用</h3><p>repository 的完整格式为：<br><code>[registry-host]:[port]/[username]/xxx</code><br>例如： <code>[host]:5000/sgzc/httpd:v1</code></p><h3 id="docker-基本操作"><a href="#docker-基本操作" class="headerlink" title="docker 基本操作"></a>docker 基本操作</h3><h4 id="镜像常用操作"><a href="#镜像常用操作" class="headerlink" title="镜像常用操作"></a>镜像常用操作</h4><p>images    显示镜像列表</p><p>history   显示镜像构建历史</p><p>commit    从容器创建新镜像</p><p>build     从 Dockerfile 构建镜像</p><p>tag       给镜像打 tag</p><p>pull      从 registry 下载镜像</p><p>push      将 镜像 上传到 registry</p><p>rmi       删除 Docker host 中的镜像</p><p>search    搜索 Docker Hub 中的镜像</p><h4 id="容器常用操作"><a href="#容器常用操作" class="headerlink" title="容器常用操作"></a>容器常用操作</h4><p>docker run –name “container-name” -d </p><p>create      创建容器  </p><p>run         运行容器  </p><p>pause       暂停容器  </p><p>unpause     取消暂停继续运行容器  </p><p>stop        发送 SIGTERM 停止容器  </p><p>kill        发送 SIGKILL 快速停止容器  </p><p>start       启动容器  </p><p>restart     重启容器  </p><p>attach      attach 到容器启动进程的终端  </p><p>exec        在容器中启动新进程，通常使用 “-it” 参数  </p><p>logs        显示容器启动进程的控制台输出，用 “-f” 持续打印  </p><p>rm          从磁盘中删除容器</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li>官方文档：<a href="https://docs.docker.com/get-started" target="_blank" rel="noopener">https://docs.docker.com/get-started</a></li><li><a href="https://mp.weixin.qq.com/mp/homepage?__biz=MzI5NDE3ODQyNg==&hid=3&sn=d1883dae2f3e73bc4bb3af24b12c6d00&scene=18" target="_blank" rel="noopener">每日五分钟系列</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作 </tag>
            
            <tag> 技术 </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>理财笔记</title>
      <link href="/2021/07/18/take-money/"/>
      <url>/2021/07/18/take-money/</url>
      
        <content type="html"><![CDATA[<h1 id="十年十倍"><a href="#十年十倍" class="headerlink" title="十年十倍"></a>十年十倍</h1><p>熟悉了两种买入策略：</p><ul><li>价值投资：持有最小PE的股票 五日轮换 不知道价值何时体现 熬不过去 提前止损 </li><li>趋势投资：“红三兵策略” 连续三个交易日上涨买入 盈利5%卖出 刻舟求剑</li></ul>]]></content>
      
      
      <categories>
          
          <category> 理财 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 理财 </tag>
            
            <tag> 生活 </tag>
            
            <tag> 基金 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>公式之美书籍阅读笔记</title>
      <link href="/2021/07/18/the-beauty-of-formula/"/>
      <url>/2021/07/18/the-beauty-of-formula/</url>
      
        <content type="html"><![CDATA[<h1 id="1-1-2"><a href="#1-1-2" class="headerlink" title="1+1=2"></a>1+1=2</h1><h1 id="勾股定理"><a href="#勾股定理" class="headerlink" title="勾股定理"></a>勾股定理</h1><h1 id="费马大定理"><a href="#费马大定理" class="headerlink" title="费马大定理"></a>费马大定理</h1><h1 id="牛顿-莱布尼兹公式"><a href="#牛顿-莱布尼兹公式" class="headerlink" title="牛顿-莱布尼兹公式"></a>牛顿-莱布尼兹公式</h1><h1 id="柯西公式"><a href="#柯西公式" class="headerlink" title="柯西公式"></a>柯西公式</h1><h1 id><a href="#" class="headerlink" title></a></h1>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> 读书 </tag>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flask-framework</title>
      <link href="/2020/11/16/flask-framework/"/>
      <url>/2020/11/16/flask-framework/</url>
      
        <content type="html"><![CDATA[<h1 id="Flask框架升级研究"><a href="#Flask框架升级研究" class="headerlink" title="Flask框架升级研究"></a>Flask框架升级研究</h1><p>[toc]</p><h2 id="WEB是什么"><a href="#WEB是什么" class="headerlink" title="WEB是什么"></a>WEB是什么</h2><p>Web应用的本质就是：</p><ol><li>浏览器发送一个<strong>HTTP请求</strong>；</li><li>服务器收到请求，生成一个<strong>HTML文档</strong>；</li><li>服务器把HTML文档作为HTTP响应的<strong>Body</strong>发送给浏览器；</li><li>浏览器收到HTTP响应，从HTTP Body取出HTML文档并显示。</li></ol><p><strong>接受HTTP请求、解析HTTP请求、发送HTTP响应都是苦力活</strong>，如果我们自己来写这些底层代码，还没开始写动态HTML呢，就得花个把月去读HTTP规范。</p><p>正确的做法是<strong>底层代码由专门的服务器软件实现</strong>，<strong>我们用Python专注于生成HTML文档</strong></p><blockquote><p>WSGI规定了这些底层代码的规范 有很多项目组实现了这个规范 编写了很多服务器  例如：？？</p><p>WSGI是说明书 ？？是依据说明书生产出来的机器</p></blockquote><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>【1】<a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017805733037760" target="_blank" rel="noopener">WEB开发入门介绍</a></p><p>【2】<a href="http://www.nowamagic.net/academy/part/13/302" target="_blank" rel="noopener">python web部署整体介绍</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>python-funda</title>
      <link href="/2020/10/21/python-funda/"/>
      <url>/2020/10/21/python-funda/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="包导入和自定义包"><a href="#包导入和自定义包" class="headerlink" title="包导入和自定义包"></a>包导入和自定义包</h1><h2 id="Python模块查找路径"><a href="#Python模块查找路径" class="headerlink" title="Python模块查找路径"></a>Python模块查找路径</h2><p>import 语句执行时候，Python会查找相应的模块并导入，顺序为：</p><p>先查找内置模块</p><p>查找sys.path（先查找当前目录文件，PATHONPATH，系统PATH）</p><h2 id="init-py"><a href="#init-py" class="headerlink" title="_init_.py"></a>_<em>init_</em>.py</h2><p><code>__init__.py</code> 在包被导入时会被执行,为<strong>所在包</strong>进行一些初始化操作，不在所在包则不生效。</p><p>用于 导入该模块该目录下需要用到的一些依赖或者其他一些初始化操作。</p><h2 id="如何自制包"><a href="#如何自制包" class="headerlink" title="如何自制包"></a>如何自制包</h2><p>在包的最外层同级目录新建setup.py</p><p>运行 <code>Python setup.py sdist</code></p><h2 id="如何下载依赖安装包"><a href="#如何下载依赖安装包" class="headerlink" title="如何下载依赖安装包"></a>如何下载依赖安装包</h2><p>直接Google <code>依赖包==版本号</code>，下载即可。</p><p>.whl文件安装方法：<code>pip install &lt;pkg.whl&gt;</code></p><p>.tar.gz文件：<code>tar -zxvf &lt;.tar.gz&gt; -C ./</code>            <code>python setup.py install</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>photo-learning</title>
      <link href="/2020/10/06/photo-learning/"/>
      <url>/2020/10/06/photo-learning/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="需要的材料"><a href="#需要的材料" class="headerlink" title="需要的材料"></a>需要的材料</h1><h2 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h2><p>纽约摄影教程</p><h2 id="关注的人"><a href="#关注的人" class="headerlink" title="关注的人"></a>关注的人</h2><p>photo:</p><ol><li>学习调色，弄懂调色的参数 @安东尼的调色日记</li></ol><p>vedio:</p><ol><li>学习后期剪辑Pr  <strong><em>@Hivi</em></strong></li></ol><p>另外就是多看关注列表的摄影师吧，发现宝藏后也要经常看。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>sklearnNote</title>
      <link href="/2020/08/27/sklearnNote/"/>
      <url>/2020/08/27/sklearnNote/</url>
      
        <content type="html"><![CDATA[<h1 id="整体介绍"><a href="#整体介绍" class="headerlink" title="整体介绍"></a>整体介绍</h1><p>模型公共部署，提供python传统机器学习模型（XGBoost,Sklearn模型）部署和计算服务。</p><p>具体为：业务方将需要部署的模型文件（XGB方式打包、Sklearn方式打包）交由引擎部署，业务方通过请求报文发起请求服务到引擎，引擎送入模型计算并以报文方式返回计算结果。</p><p>交易码：A0942A406</p><h1 id="接口规范"><a href="#接口规范" class="headerlink" title="接口规范"></a>接口规范</h1><p>请求报文格式：（新增申请件编号字段 <em>todo</em>）</p><ol><li>申请件编号</li><li>调用模型文件名称</li><li>请求信息json串</li></ol><p>返回报文格式：（AplId中的A改为小写 <em>todo</em>）</p><ol><li>申请件编号</li><li>服务响应状态代码（01 success 00 fail)</li><li>返回信息json串</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">//请求json信息</span><br><span class="line">&#123;</span><br><span class="line">    //"traceId": "", //交易流水号 VMD中加入</span><br><span class="line">    "aplId": "", //申请件编号</span><br><span class="line">    "bsnName": "",  //业务名称 模型放置在该目录下</span><br><span class="line">    "modType": "", //对应机器学习模型类型：XGB/LR/SKL_COMMOD</span><br><span class="line">    "modName": "", //模型文件名称</span><br><span class="line">    "packPKLAppro": "", //模型KPL的封装方式 1 SKL_JOBLIB 2 SKL_PICKLE 3 XGB</span><br><span class="line">    "aplParams": &#123;</span><br><span class="line">        "":"",</span><br><span class="line">        "":""</span><br><span class="line">    &#125;//模型的输入参数</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//返回的json信息</span><br><span class="line">//统一格式</span><br><span class="line">//正确返回</span><br><span class="line">&#123;</span><br><span class="line">    "pre_results": "[0.06245352]", //模型的返回结果</span><br><span class="line">    "aplId": "test001", //申请件ID</span><br><span class="line">    "sysRespCode": "201", //返回状态码 成功201 失败 500</span><br><span class="line">    "rspInf": "success" //返回状态具体描述</span><br><span class="line">&#125;</span><br><span class="line">//错误返回</span><br><span class="line">&#123;</span><br><span class="line">    "aplId": "null", //申请件ID</span><br><span class="line">    "sysRespCode": "500", //返回状态码</span><br><span class="line">    "rspInf": "Exception('请求信息解析出错')" //返回状态具体描述</span><br><span class="line">&#125;</span><br><span class="line">//LR模型返回（特殊）</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"pre_labels"</span>: <span class="string">"0"</span>, </span><br><span class="line">    <span class="attr">"pre_probas"</span>: <span class="string">"0.879682,0.120308,0.000011"</span>, </span><br><span class="line">    <span class="attr">"aplId"</span>: <span class="string">"test001"</span>, </span><br><span class="line">    <span class="attr">"sysRespCode"</span>: <span class="string">"201"</span>, </span><br><span class="line">    <span class="attr">"rspInf"</span>: <span class="string">"success"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h1><ul><li>请求解析为模型输入格式</li><li>下载模型</li><li>模型预测</li><li>编辑返回结果并返回</li></ul><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>开启flask调试模式</p><ol><li>XGB模型和LR模型正确请求测试 <strong>done</strong></li><li>动态新增模型是否可动态加载 <strong>done</strong></li><li>请求信息有错误下处理方法：缺失请求信息，请求信息格式，内容错误 <strong>done</strong></li><li>请求信息为空 请求信息不是post请求 <strong>done</strong></li></ol><h1 id="Questions"><a href="#Questions" class="headerlink" title="Questions"></a>Questions</h1><ol><li>python LR 逻辑回归 预测变量中有缺失值如何处理? 引擎不处理</li><li><strong>vscode 组织python工程的方法之后学习（包含导包、调试），目前先临时测试下自己写的代码，然后放到linux上面去测试，先完成开发</strong></li><li></li></ol><h1 id="模型描述唯一标识"><a href="#模型描述唯一标识" class="headerlink" title="模型描述唯一标识"></a>模型描述唯一标识</h1><p>添加模型类别 modTarget：回归 or 分类(<strong><em>不需要</em></strong>，因为SKL的预测函数都是model.predict())</p><p>模型类型modType：LR、XGB、SKL_COMMOD（SKL提供的模型方法）</p><p>模型打包方式modPKLAppro：  SKL_PICKLE、SKL_JOBLIB、 XGB</p><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><p>json.dump():转化dict-&gt;str</p><p>json.dumps():转化dict-&gt;str并存入文件</p><h1 id="LR模型"><a href="#LR模型" class="headerlink" title="LR模型"></a>LR模型</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#json请求 转化为 array-like</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">"aplParams":"N1,N2,N3,...,Nn"</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">array([[N1,N2,N3,...,Nn]])</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#封装为PKL文件</span></span><br><span class="line"><span class="number">1.</span> pickle</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> sklearn <span class="keyword">import</span> svm</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>clf = svm.SVC()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>iris = datasets.load_iris()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>X, y = iris.data, iris.target</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>clf.fit(X, y)  </span><br><span class="line">SVC(C=<span class="number">1.0</span>, cache_size=<span class="number">200</span>, class_weight=<span class="literal">None</span>, coef0=<span class="number">0.0</span>,</span><br><span class="line">    decision_function_shape=<span class="literal">None</span>, degree=<span class="number">3</span>, gamma=<span class="string">'auto'</span>, kernel=<span class="string">'rbf'</span>,</span><br><span class="line">    max_iter=<span class="number">-1</span>, probability=<span class="literal">False</span>, random_state=<span class="literal">None</span>, shrinking=<span class="literal">True</span>,</span><br><span class="line">    tol=<span class="number">0.001</span>, verbose=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pickle</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = pickle.dumps(clf)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>clf2 = pickle.loads(s)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>clf2.predict(X[<span class="number">0</span>:<span class="number">1</span>])</span><br><span class="line">array([<span class="number">0</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> joblib</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> sklearn.externals <span class="keyword">import</span> joblib</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>joblib.dump(clf, <span class="string">'filename.pkl'</span>) </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>clf = joblib.load(<span class="string">'filename.pkl'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#进行预测以及输出结果</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>X, y = load_iris(return_X_y=<span class="literal">True</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>clf = LogisticRegression(random_state=<span class="number">0</span>).fit(X, y)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>clf.predict(X[:<span class="number">2</span>, :])</span><br><span class="line">array([<span class="number">0</span>, <span class="number">0</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>clf.predict_proba(X[:<span class="number">2</span>, :])</span><br><span class="line">array([[<span class="number">9.8</span>...e<span class="number">-01</span>, <span class="number">1.8</span>...e<span class="number">-02</span>, <span class="number">1.4</span>...e<span class="number">-08</span>],</span><br><span class="line">       [<span class="number">9.7</span>...e<span class="number">-01</span>, <span class="number">2.8</span>...e<span class="number">-02</span>, ...e<span class="number">-08</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>clf.score(X, y)</span><br><span class="line"><span class="number">0.97</span>...</span><br></pre></td></tr></table></figure><h1 id="XGB模型"><a href="#XGB模型" class="headerlink" title="XGB模型"></a>XGB模型</h1><p><a href="https://cloud.tencent.com/developer/article/1387686" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1387686</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 请求解析为模型输入格式</span></span><br><span class="line"><span class="comment"># X_test类型可以是二维List，也可以是numpy的数组 array([[]])</span></span><br><span class="line">dtest = DMatrix(X_test)</span><br><span class="line">ans = model.predict(dtest)</span><br><span class="line"><span class="comment"># 下载模型\模型预测</span></span><br><span class="line"><span class="comment"># 使用XGB.save_model()封装的PKL文件</span></span><br><span class="line"><span class="comment"># save model</span></span><br><span class="line">bst.save_model(<span class="string">'xgb.model'</span>)</span><br><span class="line"><span class="comment"># load model and data in</span></span><br><span class="line">bst2 = xgb.Booster(model_file=<span class="string">'xgb.model'</span>)</span><br><span class="line">dtest2 = xgb.DMatrix(<span class="string">'dtest.buffer'</span>)</span><br><span class="line">preds2 = bst2.predict(dtest2)</span><br><span class="line"><span class="comment"># 使用SKL封装的PKL文件</span></span><br><span class="line"><span class="comment"># alternatively, you can pickle the booster</span></span><br><span class="line">pks = pickle.dumps(bst2)</span><br><span class="line"><span class="comment"># load model and data in</span></span><br><span class="line">bst3 = pickle.loads(pks)</span><br><span class="line">preds3 = bst3.predict(dtest2)</span><br><span class="line"><span class="comment"># 编辑返回结果并返回</span></span><br><span class="line">pre_output[<span class="string">"results"</span>] = str(preds3)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>linux-tutorial</title>
      <link href="/2020/08/22/linux-tutorial/"/>
      <url>/2020/08/22/linux-tutorial/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h1><p>清屏 <code>Ctrl+L</code></p><h1 id="shell命令"><a href="#shell命令" class="headerlink" title="shell命令"></a>shell命令</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -R -f srcFile tarDir</span><br></pre></td></tr></table></figure><h1 id="安装方式"><a href="#安装方式" class="headerlink" title="安装方式"></a>安装方式</h1><p>需要下载文件 D:\Environment\虚拟机\rhel-8.0-x86_64-dvd.iso</p><p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201006110218540.png" alt="image-20201006110218540"></p><h1 id="认识linux"><a href="#认识linux" class="headerlink" title="认识linux"></a>认识linux</h1><h2 id="文件结构和文件操作"><a href="#文件结构和文件操作" class="headerlink" title="文件结构和文件操作"></a>文件结构和文件操作</h2><p>是什么：结构</p><p>怎么做：操作</p><p>目录树结构，如何存取文件</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>git-tutorial</title>
      <link href="/2020/04/28/git-tutorial/"/>
      <url>/2020/04/28/git-tutorial/</url>
      
        <content type="html"><![CDATA[<p>git网上有很多经典的教程，比如廖雪峰的<a href="https://www.liaoxuefeng.com/wiki/896043488029600/896067074338496" target="_blank" rel="noopener">Git教程</a></p><p>不过，秉承“只有自己总结的东西才是自己的”观念，还是做了自己的笔记。</p><p>学习的顺序应该为：</p><ul><li>学习廖的课程</li><li>做自己的笔记，形成自己的知识</li><li><strong><em>再回去好好细读廖的教程，发现一些之前未发现的、未理解的内容</em></strong></li></ul><h1 id="git-help-的使用"><a href="#git-help-的使用" class="headerlink" title="git help 的使用"></a>git help 的使用</h1><p>工具，都是熟能生巧。掌握基本方法，多看官方git help 才是正道。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> help 功能全览</span><br><span class="line">git help</span><br><span class="line"><span class="meta">#</span> 查看帮助手册</span><br><span class="line">git help git</span><br><span class="line"><span class="meta">#</span> 如果不知道下一步怎么操作</span><br><span class="line">git status #git status会列出当前的状态，并提示接下来的操作！！</span><br></pre></td></tr></table></figure><h1 id="git的优势"><a href="#git的优势" class="headerlink" title="git的优势"></a>git的优势</h1><ol><li>分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步，真是太方便了！</li><li>远程库既可以作为备份，又可以让其他人通过该仓库来协作。</li><li>因为创建、合并和删除分支非常快，所以Git鼓励你使用分支完成某个任务，合并后再删掉分支，这和直接在<code>master</code>分支上工作效果是一样的，但过程更安全。</li></ol><h1 id="git线上网页版使用说明"><a href="#git线上网页版使用说明" class="headerlink" title="git线上网页版使用说明"></a>git线上网页版使用说明</h1><p>git本地提交之后，线上有个最后审核步骤，有实操后总结在这里。</p><h1 id="git的基本操作"><a href="#git的基本操作" class="headerlink" title="git的基本操作"></a>git的基本操作</h1><h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><p>官网下载，一路next。（windows）</p><h2 id="设置username和email"><a href="#设置username和email" class="headerlink" title="设置username和email"></a>设置username和email</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> --global是全局参数，对局部仓库也可以单独设置name和email</span><br><span class="line"><span class="meta">$</span> git config --global user.name "Your Name"</span><br><span class="line"><span class="meta">$</span> git config --global user.email "email@example.com"</span><br></pre></td></tr></table></figure><h2 id="使用SSH协议连接本地库与远程库"><a href="#使用SSH协议连接本地库与远程库" class="headerlink" title="使用SSH协议连接本地库与远程库"></a>使用SSH协议连接本地库与远程库</h2><p><code>id_rsa</code>是私钥，不能泄露出去，<code>id_rsa.pub</code>是公钥，可以放心地告诉任何人。</p>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 本地的git仓库与远程库使用SSH（secure shell）进行加密传输</span><br><span class="line"><span class="meta">#</span> 本地创建SSH Key</span><br><span class="line"><span class="meta">#</span> 查看根目录下是否有.ssh文件，以及.ssh/id_rsa 和.ssh/id_rsa_pub文件是否存在</span><br><span class="line"><span class="meta">#</span>不存在</span><br><span class="line">ssh -keygen -t rsa -C "youremail@example.com"</span><br><span class="line"><span class="meta">#</span> 将公钥放在GitHub上面</span><br></pre></td></tr></table></figure><blockquote><p>为什么GitHub需要SSH Key呢？因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。</p><p>当然，GitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。</p><p>最后友情提示，在GitHub上免费托管的Git仓库，任何人都可以看到喔（但只有你自己才能改）。所以，不要把敏感信息放进去。</p><p>摘抄自<a href="https://www.liaoxuefeng.com/wiki/896043488029600/896954117292416" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/896043488029600/896954117292416</a></p></blockquote><p><strong><em>Q:</em></strong> 远程库有什么用呢？</p><p><strong><em>A:</em></strong> GitHub上的仓库既可以作为备份，又可以让其他人通过该仓库来协作</p><h2 id="先有本地库，再有远程库"><a href="#先有本地库，再有远程库" class="headerlink" title="先有本地库，再有远程库"></a>先有本地库，再有远程库</h2><h3 id="本地仓库初始化"><a href="#本地仓库初始化" class="headerlink" title="本地仓库初始化"></a>本地仓库初始化</h3>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 仓库 repository</span><br><span class="line"><span class="meta">#</span> 本地仓库初始化</span><br><span class="line">git init</span><br><span class="line"><span class="meta">#</span> 查看git配置文件</span><br><span class="line">ls -ah</span><br><span class="line"><span class="meta">#</span> 或者克隆远程库git clone（TODO）</span><br></pre></td></tr></table></figure><h3 id="本地文件新建提交仓库"><a href="#本地文件新建提交仓库" class="headerlink" title="本地文件新建提交仓库"></a>本地文件新建提交仓库</h3>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 多次add 一次提交</span><br><span class="line">git add fileName1</span><br><span class="line">git add fileName2</span><br><span class="line">git commit -m "comment content"</span><br></pre></td></tr></table></figure><h3 id="提交完毕复核"><a href="#提交完毕复核" class="headerlink" title="提交完毕复核"></a>提交完毕复核</h3>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 修改了fileName1</span><br><span class="line">git status</span><br><span class="line"><span class="meta">#</span> 查看某个文件修改前后差别（已经 add了会回退到未add状态）</span><br><span class="line"><span class="meta">#</span> 脑中要有文件状态转换图（第一幅图）</span><br><span class="line"><span class="meta">#</span> ！！diff 比较的是 add之前和之后文件的差异！！</span><br><span class="line">git diff fileName1</span><br><span class="line">git add fileName1</span><br><span class="line">git commit -m "revise fileName1"</span><br></pre></td></tr></table></figure><h3 id="版本回退（游戏存档读档）"><a href="#版本回退（游戏存档读档）" class="headerlink" title="版本回退（游戏存档读档）"></a>版本回退（游戏存档读档）</h3>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> commit的作用类似于*存档*，当出现意外，可以回到这个存档点重新开始</span><br><span class="line"><span class="meta">#</span> 查看存档点,存档点是一个HEAD指针，HEAD^表示当前存档点的前一个存档点，HEAD^^上上存档点</span><br><span class="line"><span class="meta">#</span> HEAD~100：前100个存档点</span><br><span class="line">git log</span><br><span class="line"><span class="meta">#</span>简洁版展示</span><br><span class="line">git log --pretty=oneline</span><br><span class="line"><span class="meta">#</span>显示commit id </span><br><span class="line">git relog</span><br><span class="line"><span class="meta">#</span>跳转到指定存档点</span><br><span class="line"><span class="meta">  #</span>HEAD指针可以是: 1. HEAD^这种类型的 2.指定的commit id</span><br><span class="line">git reset --hard HEAD指针</span><br></pre></td></tr></table></figure><blockquote><p>必须记住的第一张图(<strong>图一</strong>)：文件的状态流转图</p><p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200430231034597.png" alt="image-20200430231034597"></p><p>图中存在四个对象：</p><ul><li>工作区 workspace</li><li>版本库 repository<ul><li>暂存区 stage</li><li>主分支 master</li></ul></li></ul><p>包含的内容上：{stage} &gt;= {master}</p></blockquote><h3 id="详说git-diff"><a href="#详说git-diff" class="headerlink" title="详说git diff"></a>详说git diff</h3>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 根据图一</span><br><span class="line"><span class="meta">#</span> 比较工作区workspace与暂存区stage的区别</span><br><span class="line">git diff</span><br><span class="line"><span class="meta">#</span> 比较版本库主分支master与工作区workspace的区别</span><br><span class="line">git diff HEAD -- fileName</span><br></pre></td></tr></table></figure><h3 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h3><p>   第6点说到的版本回退是指stage与master一致下（stage为空），将当前maste版本切换回之前的master版本，工作区同步修改。</p><p>   撤销修改指的是撤销一个小的改动，涉及workspace/repository/stage/master之间状态的转移。</p>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>工作区修改，暂存区和主分支没有变化 撤销修改</span><br><span class="line">git status #根据提示敲入下一行命令</span><br><span class="line">git restore fileName #撤销工作区的修改（本质是用版本库覆盖工作区）</span><br><span class="line"><span class="meta">#</span>工作区修改，提交到暂存区，主分支没有变化 撤销修改</span><br><span class="line">git status</span><br><span class="line">git restore --unstage fileName #撤销暂存区的修改</span><br><span class="line">git restore fileName #撤销工作区的修改</span><br><span class="line"><span class="meta">#</span> 修改已经commit 撤销修改(版本回退)</span><br><span class="line">git reset --hard HEAD^</span><br></pre></td></tr></table></figure><h3 id="文件删除"><a href="#文件删除" class="headerlink" title="文件删除"></a>文件删除</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 新增文件并add、commit</span><br><span class="line">git add test.txt</span><br><span class="line">git commit -m "add test.txt"</span><br><span class="line"><span class="meta">$</span> git status</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use "git add/rm &lt;file&gt;..." to update what will be committed)</span><br><span class="line">  (use "git restore &lt;file&gt;..." to discard changes in working directory)</span><br><span class="line">        deleted:    test.txt</span><br><span class="line"><span class="meta">#</span>根据提示</span><br><span class="line"><span class="meta">  #</span> 如果本地删除是误操作</span><br><span class="line">git restore test.txt</span><br><span class="line"><span class="meta">  #</span> 如果确实删除某个文件</span><br><span class="line">git add test.txt # or</span><br><span class="line">git rm test.txt</span><br><span class="line">git commit -m "delete test.txt"</span><br></pre></td></tr></table></figure><h3 id="建立远程库分支与本地分支连接"><a href="#建立远程库分支与本地分支连接" class="headerlink" title="建立远程库分支与本地分支连接"></a>建立远程库分支与本地分支连接</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 1.先有本地库，再有远程库</span><br><span class="line">    # 1.1 与远程仓库建立连接</span><br><span class="line">        # 连接远程（remote）添加git@github.com:ShanggguanZpure/learn.git为远程仓库，并命名为origin</span><br><span class="line">    git remote add origin git@github.com:ShangguanZpure/learngit.git</span><br><span class="line">    # 1.2 将本地文件推送到远程库对应分支</span><br><span class="line">        #第一次提交:关联（-u）本地master分支内容到远程仓库（origin）的master分支,并推送（push）本地master分支内容到远程仓库（origin）的master分支</span><br><span class="line">        git push -u origin master</span><br><span class="line">        #第二次及以上提交：本地推送到远程仓库的master</span><br><span class="line">        git push origin master</span><br><span class="line">        # 推送本地指定分支（branch-name）到远程库(origin)指定分支(origin/branch-name)</span><br><span class="line">        git push origin branch-name origin/branch-name #远程分支可以省略，会找对应分支合并</span><br><span class="line">        </span><br><span class="line"><span class="meta">#</span> 2.先有远程库，再有本地库</span><br><span class="line"><span class="meta">#</span> 克隆远程库内容</span><br><span class="line">git clone git@github.com:ShangguanZpure/gitskills.git</span><br></pre></td></tr></table></figure><h3 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h3><h4 id="什么时候建立分支"><a href="#什么时候建立分支" class="headerlink" title="什么时候建立分支"></a>什么时候建立分支</h4><p>分支在实际中有什么用呢？假设你准备开发一个新功能，但是需要两周才能完成，第一周你写了50%的代码，如果立刻提交，由于代码还没写完，不完整的代码库会导致别人不能干活了。如果等代码全部写完再一次提交，又存在丢失每天进度的巨大风险。</p><p>现在有了分支，就不用怕了。你创建了一个属于你自己的分支，别人看不到，还继续在原来的分支上正常工作，而你在自己的分支上干活，想提交就提交，直到开发完毕后，再一次性合并到原来的分支上，这样，既安全，又不影响别人工作。</p><p>因为创建、合并和删除分支非常快，所以Git鼓励你<strong>使用分支完成某个任务</strong>，<strong>合并后再删掉分支</strong>，这和直接在<code>master</code>分支上工作效果是一样的，但过程更安全。</p><h4 id="创建与合并分支"><a href="#创建与合并分支" class="headerlink" title="创建与合并分支"></a>创建与合并分支</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 查看分支：</span><br><span class="line">git branch</span><br><span class="line"><span class="meta">#</span>创建分支：</span><br><span class="line">git branch &lt;name&gt;</span><br><span class="line"><span class="meta">#</span>切换分支：</span><br><span class="line">git checkout &lt;name&gt; #或者</span><br><span class="line">git switch &lt;name&gt;</span><br><span class="line"><span class="meta">#</span>创建+切换分支：</span><br><span class="line">git checkout -b &lt;name&gt; #或者</span><br><span class="line">git switch -c &lt;name&gt;</span><br><span class="line"><span class="meta">#</span>合并某分支到当前分支：</span><br><span class="line">git merge &lt;name&gt;</span><br><span class="line"><span class="meta">#</span>删除分支：</span><br><span class="line">git branch -d &lt;name&gt;</span><br><span class="line"><span class="meta">#</span>分支合并默认为fast forward,并且删除分支后，合并记录不保留，使用 --no-ff就会按照普通模式合并，并做一次commit提交，可以保留合并记录。举例如下：</span><br><span class="line">git switch -c dev</span><br><span class="line">vi readme.txt</span><br><span class="line"><span class="meta">#</span>修改readme.txt文件进行保存</span><br><span class="line">git add readme.txt</span><br><span class="line">git commit -m "merge -no-ff test"</span><br><span class="line">git switch master</span><br><span class="line">git merge --no-ff -m "merge with dev" dev</span><br><span class="line">git branch -d dev</span><br><span class="line">git log --graph --pretty=oneline --abbrrev-commit</span><br></pre></td></tr></table></figure><h4 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 产生冲突的原因：两个分支修改了同一个地方，且不一致。</span><br><span class="line">git merge feature1 #产生冲突</span><br><span class="line">vi conflictedFileName</span><br><span class="line"><span class="meta">#</span>手动修改不一致地方</span><br><span class="line">git add conflictedFileName</span><br><span class="line">git commit -m "conflict fixed"</span><br><span class="line"><span class="meta">#</span>删除分支</span><br><span class="line">git branch -d feature1</span><br><span class="line"><span class="meta">#</span>查看分支合并图</span><br><span class="line"><span class="meta">$</span> git log --graph --pretty=oneline --abbrev-commit</span><br></pre></td></tr></table></figure><h4 id="Bug分支：修复紧急Bug操作"><a href="#Bug分支：修复紧急Bug操作" class="headerlink" title="Bug分支：修复紧急Bug操作"></a>Bug分支：修复紧急Bug操作</h4><p>暂存（stash）现有分支的工作，切换到Bug分支修复（待测试）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>当你接到一个修复一个代号101的bug的任务时，很自然地，你想创建一个分支issue-101来修复它，但是，等等，当前正在dev上进行的工作还没有提交.</span><br><span class="line"><span class="meta">#</span> 1.存放dev分支工作区和暂存区的内容，包含：暂存区未提交的内容（暂存区与主分支区别），工作区未提交到暂存区的内容（工作区与暂存区的区别）workspace - stage - master</span><br><span class="line">git stash</span><br><span class="line"><span class="meta">#</span> 2. 确认在哪个分支上修复（假设为master，当然也可以是其他分支）</span><br><span class="line">git switch master</span><br><span class="line"><span class="meta">#</span> 3.从master分支新建Bug分支</span><br><span class="line">git switch -c issue-101</span><br><span class="line"><span class="meta">#</span> 4.修复Bug</span><br><span class="line"><span class="meta">#</span> 5.提交修改</span><br><span class="line">git add readme.txt</span><br><span class="line">git commit -m "fix bug 101"</span><br><span class="line"><span class="meta">#</span> 6.切换到主分支，提交修改</span><br><span class="line">git switch master</span><br><span class="line">git merge --no-ff -m "merged bug fix 101" issue-101</span><br><span class="line"><span class="meta">#</span> 7.切换回dev分支继续开发</span><br><span class="line">git switch dev</span><br><span class="line"><span class="meta">#</span> 8.查看dev分支状态</span><br><span class="line">git status</span><br><span class="line">git stash list #！！！</span><br><span class="line"><span class="meta">#</span> 9.恢复之前暂存的内容</span><br><span class="line">git stash apply #拉取</span><br><span class="line">git stash drop  #删除</span><br><span class="line"><span class="meta">#</span>上面两步合成一步</span><br><span class="line">git stash pop</span><br><span class="line"><span class="meta">#</span>你可以多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash</span><br><span class="line">git stash apply stash@&#123;0&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 在master分支上修复的bug，想要合并到当前dev分支，可以用git cherry-pick &lt;commit&gt;命令，把bug提交的修改“复制”到当前分支，避免重复劳动。</span><br><span class="line">git cherry-pick 4c805e2 #！！！</span><br></pre></td></tr></table></figure><h4 id="Feature-分支-开发新功能"><a href="#Feature-分支-开发新功能" class="headerlink" title="Feature 分支:开发新功能"></a>Feature 分支:开发新功能</h4><p>开发一个新feature，最好新建一个分支；</p><p>如果要丢弃一个没有被合并过的分支，可以通过<code>git branch -D</code>强行删除。</p><h4 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 查看远程库的信息</span><br><span class="line"><span class="meta">$</span> git remote -v</span><br><span class="line">origin  git@github.com:michaelliao/learngit.git (fetch)</span><br><span class="line">origin  git@github.com:michaelliao/learngit.git (push)</span><br><span class="line"><span class="meta">#</span> 推送分支</span><br><span class="line"><span class="meta">#</span>推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上  </span><br><span class="line"><span class="meta">#</span>全格式是： git push &lt;remote&gt; local-branch-name remote/branch-name(可以省略最后一项）</span><br><span class="line"><span class="meta">$</span> git push origin master</span><br><span class="line"><span class="meta">#</span>推送其他分支，比如dev，就改成</span><br><span class="line"><span class="meta">$</span> git push origin dev</span><br><span class="line"><span class="meta">#</span> 抓取分支</span><br><span class="line"><span class="meta">#</span>要在dev分支上开发，就必须创建远程origin的dev分支到本地</span><br><span class="line"><span class="meta">$</span> git checkout -b dev origin/dev</span><br><span class="line"><span class="meta">#</span> 本地分支提交远程分支产生冲突</span><br><span class="line"><span class="meta">#</span>先用git pull把最新的提交从origin/dev抓下来，然后，在本地合并，解决冲突，再推送</span><br><span class="line"><span class="meta">$</span> git pull</span><br><span class="line">    There is no tracking information for the current branch.</span><br><span class="line">    Please specify which branch you want to merge with.</span><br><span class="line">    See git-pull(1) for details.</span><br><span class="line"></span><br><span class="line">        git pull &lt;remote&gt; &lt;branch&gt;</span><br><span class="line"></span><br><span class="line">    If you wish to set tracking information for this branch you can do so with:</span><br><span class="line"></span><br><span class="line">        git branch --set-upstream-to=origin/&lt;branch&gt; dev</span><br><span class="line">    #git pull也失败了，原因是没有指定本地dev分支与远程origin/dev分支的链接，根据提示，设置dev和origin/dev的链接：</span><br><span class="line">    $ git branch --set-upstream-to=origin/dev dev</span><br><span class="line">Branch 'dev' set up to track remote branch 'dev' from 'origin'.</span><br><span class="line"><span class="meta">#</span> 解决冲突后再次push</span><br><span class="line"><span class="meta">$</span> git push origin dev</span><br></pre></td></tr></table></figure><h4 id="commit-log管理"><a href="#commit-log管理" class="headerlink" title="commit log管理"></a>commit log管理</h4><p>merge操作会产生一些merge commit的提交，意义不明且冗余，应该去除。</p><p>主要有以下两种情形：</p><ol><li><p>多人在同一个远程分支Feature上协作，需要多次<code>git pull</code>别人的提交到本地合并，在合并完之后，还没push之前，使用<code>git rebase</code>可以将分支合并的操作整合成一条直线。</p><p>也可以是</p><p><code>git pull --rebase</code> (等价于<code>git fetch</code> + <code>git rebase</code>)</p></li><li><p><strong>背景</strong>：</p><p>本地<code>master</code>分支在<code>commit1</code>处新建分支<code>feature</code>，<code>feature</code>分支上有提交一次<code>feature_commit1</code>，<code>master</code>分支自己独立提交了一次<code>commit2</code></p><p><strong>动作</strong>：</p><p>现在<code>feature</code>分支合并<code>master分支</code>的<code>commit2</code>，方便做下一步开发</p><p><strong>具体操作</strong>:</p><p>为了使得合并之后<code>feature</code>分支的提交记录<code>git log --graph --pretty=oneline --abbrev-commit</code>是一条直线，没有分叉，采用:</p><p><code>git rebase master</code></p></li><li><p>本地自己独立的一个分支other（实现特定功能）合并到 dev 分支，分支other多次提交过于琐碎，希望合成一个，使用<code>git merge --squash other</code>,<code>git commit -m &quot;Message&quot;</code>。</p></li></ol><blockquote><p>参考：</p><p>1.<a href="https://www.liaoxuefeng.com/wiki/896043488029600/1216289527823648" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/896043488029600/1216289527823648</a></p><p>2.<a href="https://blog.csdn.net/themagickeyjianan/article/details/80333645?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2" target="_blank" rel="noopener">https://blog.csdn.net/themagickeyjianan/article/details/80333645?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2</a></p></blockquote><h4 id="标签-tag"><a href="#标签-tag" class="headerlink" title="标签 tag"></a>标签 tag</h4><p>TODO</p><h2 id="先有远程库，再有本地库"><a href="#先有远程库，再有本地库" class="headerlink" title="先有远程库，再有本地库"></a>先有远程库，再有本地库</h2><h3 id="本地仓库初始化-1"><a href="#本地仓库初始化-1" class="headerlink" title="本地仓库初始化"></a>本地仓库初始化</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 根据SSH协议，克隆（clone）版本库git@github.com:ShangguanZpure/gitskills.git到当前目录</span><br><span class="line">git clone git@github.com:ShangguanZpure/gitskills.git</span><br><span class="line"><span class="meta">#</span> 当你从远程仓库克隆时，实际上Git自动把本地的master分支和远程的master分支对应起来了，并且，远程仓库的默认名称是origin</span><br><span class="line"><span class="meta">#</span> 从远程库clone时，默认情况下，你的小伙伴只能看到本地的master分支</span><br></pre></td></tr></table></figure><h3 id="多人协作-1"><a href="#多人协作-1" class="headerlink" title="多人协作"></a>多人协作</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 查看远程库的信息</span><br><span class="line"><span class="meta">$</span> git remote -v</span><br><span class="line">origin  git@github.com:michaelliao/learngit.git (fetch)</span><br><span class="line">origin  git@github.com:michaelliao/learngit.git (push)</span><br><span class="line"><span class="meta">#</span> 推送分支</span><br><span class="line"><span class="meta">#</span>推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上  </span><br><span class="line"><span class="meta">#</span>全格式是： git push &lt;remote&gt; local-branch-name remote/branch-name(可以省略最后一项）</span><br><span class="line"><span class="meta">$</span> git push origin master</span><br><span class="line"><span class="meta">#</span>推送其他分支，比如dev，就改成</span><br><span class="line"><span class="meta">$</span> git push origin dev</span><br><span class="line"><span class="meta">#</span> 抓取分支</span><br><span class="line"><span class="meta">#</span>要在dev分支上开发，就必须创建远程origin的dev分支到本地</span><br><span class="line"><span class="meta">$</span> git checkout -b dev origin/dev</span><br><span class="line"><span class="meta">#</span> 本地分支提交远程分支产生冲突</span><br><span class="line"><span class="meta">#</span>先用git pull把最新的提交从origin/dev抓下来，然后，在本地合并，解决冲突，再推送</span><br><span class="line"><span class="meta">$</span> git pull</span><br><span class="line">    There is no tracking information for the current branch.</span><br><span class="line">    Please specify which branch you want to merge with.</span><br><span class="line">    See git-pull(1) for details.</span><br><span class="line"></span><br><span class="line">        git pull &lt;remote&gt; &lt;branch&gt;</span><br><span class="line"></span><br><span class="line">    If you wish to set tracking information for this branch you can do so with:</span><br><span class="line"></span><br><span class="line">        git branch --set-upstream-to=origin/&lt;branch&gt; dev</span><br><span class="line">    #git pull也失败了，原因是没有指定本地dev分支与远程origin/dev分支的链接，根据提示，设置dev和origin/dev的链接：</span><br><span class="line">    $ git branch --set-upstream-to=origin/dev dev</span><br><span class="line">Branch 'dev' set up to track remote branch 'dev' from 'origin'.</span><br><span class="line"><span class="meta">#</span> 解决冲突后再次push</span><br><span class="line"><span class="meta">$</span> git push origin dev</span><br></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul><li>查看远程库信息，使用<code>git remote -v</code>；</li><li>本地新建的分支如果不推送到远程，对其他人就是不可见的；</li><li>从本地推送分支，使用<code>git push origin branch-name</code>，如果推送失败，先用<code>git pull</code>抓取远程的新提交；</li><li>在本地创建和远程分支对应的分支，使用<code>git checkout -b branch-name origin/branch-name</code>，本地和远程分支的名称最好一致；</li><li>建立本地分支和远程分支的关联，使用<code>git branch --set-upstream branch-name origin/branch-name</code>；</li><li>从远程抓取分支，使用<code>git pull</code>，如果有冲突，要先处理冲突。</li></ul><h2 id="自定义Git"><a href="#自定义Git" class="headerlink" title="自定义Git"></a>自定义Git</h2><h1 id="git的进阶操作"><a href="#git的进阶操作" class="headerlink" title="git的进阶操作"></a>git的进阶操作</h1><h2 id="记录一次合并分支探索："><a href="#记录一次合并分支探索：" class="headerlink" title="记录一次合并分支探索："></a>记录一次合并分支探索：</h2><p>一开始的master分支git log:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git log --graph --pretty=oneline --abbrev-commit</span><br><span class="line">* 45edb69 (HEAD -&gt; master, origin/master, origin/feature, feature)revisereadme.txt</span><br><span class="line">* b2b4a71 add featureFile</span><br><span class="line">* 007eea3 branch master commit</span><br></pre></td></tr></table></figure><p>新建一个 branchOne 分支，并做两次提交：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">* 5847216 (HEAD -&gt; branchOne) branch one commit second</span><br><span class="line">* 6afe53f branch one commit first</span><br><span class="line">* 45edb69 (origin/master, origin/feature, master, feature) revise readme.txt</span><br><span class="line">* b2b4a71 add featureFile</span><br><span class="line">* 007eea3 branch master commit</span><br></pre></td></tr></table></figure><p>master分支在提交一次：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* c0ed012 (HEAD -&gt; master) master commit first</span><br><span class="line">* 45edb69 (origin/master, origin/feature, feature) revise readme.txt</span><br><span class="line">* b2b4a71 add featureFile</span><br><span class="line">* 007eea3 branch master commit、</span><br></pre></td></tr></table></figure><p>新建 branchTwo 分支，并做一次提交：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">* 838a94c (HEAD -&gt; branchTwo) branch two commit first</span><br><span class="line">* c0ed012 (master) master commit first</span><br><span class="line">* 45edb69 (origin/master, origin/feature, feature) revise readme.txt</span><br><span class="line">* b2b4a71 add featureFile</span><br><span class="line">* 007eea3 branch master commit</span><br></pre></td></tr></table></figure><p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200514232200124.png" alt="image-20200514232200124"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>master合并branchOne</span><br><span class="line">*   d3a3350 (HEAD -&gt; master) Merge branch 'branchOne'</span><br><span class="line">|\</span><br><span class="line">| * 5847216 (origin/branchOne, branchOne) branch one commit second</span><br><span class="line">| * 6afe53f branch one commit first</span><br><span class="line">* | c0ed012 (origin/master) master commit first</span><br><span class="line">|/</span><br><span class="line">* 45edb69 (origin/feature, feature) revise readme.txt</span><br><span class="line">* b2b4a71 add featureFile</span><br><span class="line">* 007eea3 branch master commit</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>紧接着branchTwo 合并主分支做下一步的开发</span><br><span class="line">*   a3f215e (HEAD -&gt; branchTwo) Merge branch 'master' into branchTwo</span><br><span class="line">|\</span><br><span class="line">| *   d3a3350 (master) Merge branch 'branchOne'</span><br><span class="line">| |\</span><br><span class="line">| | * 5847216 (origin/branchOne, branchOne) branch one commit second</span><br><span class="line">| | * 6afe53f branch one commit first</span><br><span class="line">* | | 838a94c (origin/branchTwo) branch two commit first</span><br><span class="line">|/ /</span><br><span class="line">* | c0ed012 (origin/master) master commit first</span><br><span class="line"><span class="meta">#</span>branchTwo开发后提交一次commit,合并到主分支master</span><br><span class="line"><span class="meta">  #</span>no-ff</span><br><span class="line">*   e867107 (HEAD -&gt; master) Merge branch 'branchTwo'</span><br><span class="line">|\</span><br><span class="line">| * 4474480 (branchTwo) branch two commit second</span><br><span class="line">| *   a3f215e Merge branch 'master' into branchTwo</span><br><span class="line">| |\</span><br><span class="line">| |/</span><br><span class="line">|/|</span><br><span class="line">* |   d3a3350 Merge branch 'branchOne'</span><br><span class="line">|\ \</span><br><span class="line">| * | 5847216 (origin/branchOne, branchOne) branch one commit second</span><br><span class="line">| * | 6afe53f branch one commit first</span><br><span class="line">| | * 838a94c (origin/branchTwo) branch two commit first</span><br><span class="line">| |/</span><br><span class="line">|/|</span><br><span class="line">* | c0ed012 (origin/master) master commit first</span><br><span class="line">|/</span><br><span class="line">* 45edb69 (origin/feature, feature) revise readme.txt</span><br><span class="line">* b2b4a71 add featureFile</span><br><span class="line">* 007eea3 branch master commit</span><br></pre></td></tr></table></figure><p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200515002445858.png" alt="image-20200515002445858"></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>一开始的分支状态</p><p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200514232200124.png" alt="image-20200514232200124"></p><p>合并的顺序为</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>实现branchTwo是在branchOne开发完成后才从主分支master拉出。</span><br><span class="line"><span class="meta">#</span> master </span><br><span class="line">git merge --no-ff branchOne</span><br><span class="line">*   ea91fc4 (HEAD -&gt; master) Merge branch 'branchOne'</span><br><span class="line">|\</span><br><span class="line">| * 5847216 (origin/branchOne, branchOne) branch one commit second</span><br><span class="line">| * 6afe53f branch one commit first</span><br><span class="line">* | c0ed012 master commit first</span><br><span class="line">|/</span><br><span class="line">* 45edb69 (origin/feature, feature) revise readme.txt</span><br><span class="line">* b2b4a71 add featureFile</span><br><span class="line">* 007eea3 branch master commit</span><br><span class="line"><span class="meta">#</span> branchTwo </span><br><span class="line">git checkout branchTwo</span><br><span class="line">git rebase master</span><br><span class="line"><span class="meta">#</span>合并前</span><br><span class="line">* 838a94c (HEAD -&gt; branchTwo, origin/branchTwo) branch two commit first</span><br><span class="line">* c0ed012 master commit first</span><br><span class="line">* 45edb69 (origin/feature, feature) revise readme.txt</span><br><span class="line">* b2b4a71 add featureFile</span><br><span class="line">* 007eea3 branch master commit</span><br><span class="line"><span class="meta">#</span>合并后</span><br><span class="line">* 29755bf (HEAD -&gt; branchTwo) branch two commit first</span><br><span class="line">*   ea91fc4 (master) Merge branch 'branchOne'</span><br><span class="line">|\</span><br><span class="line">| * 5847216 (origin/branchOne, branchOne) branch one commit second</span><br><span class="line">| * 6afe53f branch one commit first</span><br><span class="line">* | c0ed012 master commit first</span><br><span class="line">|/</span><br><span class="line">* 45edb69 (origin/feature, feature) revise readme.txt</span><br><span class="line">* b2b4a71 add featureFile</span><br><span class="line">* 007eea3 branch master commit</span><br><span class="line"><span class="meta">#</span>####</span><br><span class="line"><span class="meta">#</span>可以看到，branchTwo从原来的分叉点master commit first 移动到了  Merge branch 'branchOne'</span><br><span class="line"><span class="meta">#</span>这样就可以认为branchTwo是在branchOne开发完成后才从主分支master拉出。</span><br><span class="line"><span class="meta">#</span>#####</span><br><span class="line"><span class="meta">#</span>主分支 master</span><br><span class="line">git merge --no-ff branchTwo</span><br><span class="line">*   93e5997 (HEAD -&gt; master) Merge branch 'branchTwo'</span><br><span class="line">|\</span><br><span class="line">| * 29755bf (branchTwo) branch two commit first</span><br><span class="line">|/</span><br><span class="line">*   ea91fc4 Merge branch 'branchOne'</span><br><span class="line">|\</span><br><span class="line">| * 5847216 (origin/branchOne, branchOne) branch one commit second</span><br><span class="line">| * 6afe53f branch one commit first</span><br><span class="line">* | c0ed012 master commit first</span><br><span class="line">|/</span><br><span class="line">* 45edb69 (origin/feature, feature) revise readme.txt</span><br><span class="line">* b2b4a71 add featureFile</span><br><span class="line">* 007eea3 branch master commit</span><br></pre></td></tr></table></figure><h1 id="git使用的注意事项"><a href="#git使用的注意事项" class="headerlink" title="git使用的注意事项"></a>git使用的注意事项</h1><h1 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h1><p>1、</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git reflog</span><br><span class="line">f7d7681 (HEAD -&gt; master) HEAD@&#123;0&#125;: commit (merge): conflict fixed</span><br><span class="line">8957634 HEAD@&#123;1&#125;: commit: &amp; simple</span><br><span class="line">5f311b8 HEAD@&#123;2&#125;: checkout: moving from feature1 to master</span><br><span class="line">c4d3fa9 (feature1) HEAD@&#123;3&#125;: commit: AND simple</span><br><span class="line">5f311b8 HEAD@&#123;4&#125;: checkout: moving from master to feature1</span><br><span class="line">5f311b8 HEAD@&#123;5&#125;: merge dev: Fast-forward</span><br><span class="line">0da8bf7 (origin/master) HEAD@&#123;6&#125;: checkout: moving from dev to master</span><br><span class="line">5f311b8 HEAD@&#123;7&#125;: commit: branch test</span><br><span class="line">0da8bf7 (origin/master) HEAD@&#123;8&#125;: checkout: moving from master to dev</span><br><span class="line">0da8bf7 (origin/master) HEAD@&#123;9&#125;: commit: delete test.txt</span><br><span class="line">09915bb HEAD@&#123;10&#125;: commit: add test.txt</span><br><span class="line">131ea24 HEAD@&#123;11&#125;: reset: moving to HEAD^</span><br><span class="line">7fe3d31 HEAD@&#123;12&#125;: commit: error content commit</span><br><span class="line">131ea24 HEAD@&#123;13&#125;: commit: git tracks changes</span><br><span class="line">d0950e0 HEAD@&#123;14&#125;: commit: understand how stage works</span><br><span class="line">d576e2b HEAD@&#123;15&#125;: reset: moving to d576e2b</span><br><span class="line">d87032b HEAD@&#123;16&#125;: reset: moving to HEAD^</span><br><span class="line">d576e2b HEAD@&#123;17&#125;: commit: add GPL</span><br><span class="line">d87032b HEAD@&#123;18&#125;: commit: add distribuye</span><br><span class="line">951d21f HEAD@&#123;19&#125;: commit (initial): creat a readme file</span><br><span class="line"><span class="meta">#</span> 第二列表示什么呢？</span><br><span class="line">表示具体的指针指向的位置。本地master指向“conflict fixed”。</span><br><span class="line"><span class="meta">#</span> 远程的master分支（origin/master）指向哪里呢？看到提交过程中多次出现？按理说，没有push操作，远程库应该没有变动才对。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 基础工具使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 管理工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>text-editor-skills</title>
      <link href="/2020/04/21/text-editor-skills/"/>
      <url>/2020/04/21/text-editor-skills/</url>
      
        <content type="html"><![CDATA[<h2 id="文本编辑小技巧"><a href="#文本编辑小技巧" class="headerlink" title="文本编辑小技巧"></a>文本编辑小技巧</h2><h3 id="列编辑"><a href="#列编辑" class="headerlink" title="列编辑"></a>列编辑</h3><p>Notepad++中：</p><p>设置中<code>首选项</code>选择类操作许可，按住<code>alt</code>选中编辑的行，即可进行列元素的操作。、</p><p>比如统一的首字母大写。</p><h3 id="批量替换"><a href="#批量替换" class="headerlink" title="批量替换"></a>批量替换</h3><p>给每行的开头统一添加相同内容方法：</p><p>回车换行的文本符号为<code>\r\t</code></p><p>匹配每行的<code>\r\t</code>，替换为<code>\r\tAddContent</code>即可</p>]]></content>
      
      
      <categories>
          
          <category> Tips </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文本编辑 </tag>
            
            <tag> 小技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>周日总结</title>
      <link href="/2020/04/19/2020-04-19-summary/"/>
      <url>/2020/04/19/2020-04-19-summary/</url>
      
        <content type="html"><![CDATA[<p>最近比较颓废，工作上的事情不是特别紧急，空余下来的时间里面却不想做什么事情，懒癌发作，彻底成为积极向上时候的自己最讨厌的那种人。</p><p>有自己的时间是一件多幸运的事情，可以继续了解学习自己的爱好方面的知识，比如自己之前刚开了一个头的唱歌技巧学习的坑，还为此写了一篇日记记录唱歌技巧学习笔记，可是我没有点开继续学习。为什么呢，不是特别喜欢唱歌吗，怎么就没有激情了呢？也许是认识到自己唱歌气息控制不好，声音也不好听，还找不到音准等等缺点，打击到积极性了。既然把唱歌当成自己一项爱好，那么还是坚持住，唱歌技巧的教程要看完的<code>(TODO)</code>。</p><p>空余的时间也是给自己技术能力充电的好机会啊，可是也没有珍惜这段时间去做这件事。想了下，也是遇到了一个小困难，刚好看到java基本类库的使用，要去了解java基本类库的用法，枯燥乏味还要记忆，因此打击了学习的积极性。这个时候其实更应该克服，学不下去的时候那就好好做好笔记<code>(TODO)</code>，方便下次学习更有效率些。</p><p>当然，话说话来，人的活力总有上有下，处于低谷期，什么都不做，放空下自己也没有错啦，让自己晚上刷手机刷到困，早上睡到自然醒，看看电影，补补电视剧《清平乐》，看看综艺《王牌对王牌》，听听音乐《歌手》也不见得就不好。就是怕放开自律，就如脱缰野马，难以回性，写到这里算是给自己一个提醒。</p><p>无聊时间也会想起久未联系的朋友，约着喝喝奶茶，聊聊天，刚好也能联络联络感情，但是不好的一点就是自己嘴巴还是太碎，说话也过于零散，没能良好互动，希望之后注意让自己说话有个中心，给对方留足反馈时间，形成良好交流<code>(TODO)</code>。</p><p>最近觉得不错的一个事情，那就是跑步还是坚持下来了，这点特别好，继续坚持吧！</p><p>有果必有因，为啥最近会懒癌发作呢？自己觉得根源还是在职业规划上的迷惑以及学习任务艰巨两方面引起的。职业规划上，觉得银行的技术只要够用就可以，自己是无法有效得到提升的，技术提升慢的同时技术价值在行内并没有业务价值高，但是难受在业务能力提升的方法和途径自己并未有所得，提升进展缓慢。思虑职业规划同时还要学习海量的java知识，心态上隐隐觉得hold不住，因为目前看进展也很慢，才看完Spring的IOC和AOP，java基础也看了50%而已，后续等着我的还有linux运维基本知识（视频B站已收藏，183讲），SSM框架的Struts和Mybatis。</p><p>怎么办呢？</p><p>职业规划上，<strong>先争取做好分内技术工作吧</strong>，也就是SSM框架熟悉起来，会基本的linux运维，学习数据库的基本知识，等技术的工作做完后，再发力熟悉目前正在做的业务。<strong>时间上安排</strong>，就是上半年结束之前，SSM框架熟悉完毕，今年过后，linux运维和数据库也小有了解。明年再发力开始熟悉业务。</p>]]></content>
      
      
      <categories>
          
          <category> 总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结归纳 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java-funda-class</title>
      <link href="/2020/04/16/java-funda-class/"/>
      <url>/2020/04/16/java-funda-class/</url>
      
        <content type="html"><![CDATA[<h1 id="Java数字类"><a href="#Java数字类" class="headerlink" title="Java数字类"></a>Java数字类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//double 和 float不能表示精确的小数</span></span><br><span class="line"><span class="comment">//常规类型表示有范围限制</span></span><br><span class="line"><span class="comment">//引入BigInterger和BigDecimal，没有范围限制</span></span><br><span class="line"><span class="comment">//BigDecimal初始化尽量用字符串，使用double类型不准确</span></span><br><span class="line">BigDecimal bigDecimal = <span class="keyword">new</span> BigDecimal(<span class="string">"10"</span>);</span><br><span class="line">BigDecimal bigDecimal = <span class="keyword">new</span> BigDecimal(<span class="number">2.3</span>);<span class="comment">//out:2.29365453658662...</span></span><br><span class="line"><span class="comment">//BigDecimal做除法，记得限制输入位数</span></span><br><span class="line">System.out.println(</span><br><span class="line">    bigDecimal.divide(<span class="keyword">new</span> BigDecimal(<span class="string">"3"</span>), <span class="number">3</span>, BigDecimal.ROUND_HALF_UP));</span><br><span class="line"></span><br><span class="line"><span class="comment">//随机数类</span></span><br><span class="line"><span class="comment">//使用Random类或者Math.random()</span></span><br><span class="line"><span class="comment">//具体的随机数范围查看源码注释确认</span></span><br><span class="line">Random rd = <span class="keyword">new</span> Random();</span><br><span class="line">rd.nextInt();</span><br><span class="line">rd.nextInt(<span class="number">10</span>);<span class="comment">//[0,10)间</span></span><br><span class="line">rd.nextDouble();<span class="comment">//[0.0,1.0)间</span></span><br><span class="line">rd.ints(<span class="number">5</span>,<span class="number">10</span>,<span class="number">100</span>);<span class="comment">//返回10-100之间的5个随机数</span></span><br><span class="line">Math.random();<span class="comment">//[0.0,1.0)间</span></span><br><span class="line">System.out.println(Math.round(Math.random()*<span class="number">10</span>));</span><br></pre></td></tr></table></figure><h1 id="字符串相关类"><a href="#字符串相关类" class="headerlink" title="字符串相关类"></a>字符串相关类</h1><p>字符串相关类基本都要背，因为太常用了。</p><p>String类是不可变对象，concat等改变的操作都会产生一个新的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">"123,456,789,/*/"</span>;</span><br><span class="line"><span class="comment">//增</span></span><br><span class="line">System.out.println(str.concat(<span class="string">"aaaa"</span>));</span><br><span class="line"><span class="comment">//删、改</span></span><br><span class="line">System.out.println(str.substring(<span class="number">2</span>,<span class="number">4</span>));</span><br><span class="line">System.out.println(str.replace(<span class="string">"123"</span>, <span class="string">"321"</span>));</span><br><span class="line">System.out.println(str.replaceAll(<span class="string">"[*]"</span>, <span class="string">"??"</span>)); <span class="comment">//第一个表达式是正则表达式</span></span><br><span class="line">System.out.println(str.split(<span class="string">","</span>));</span><br><span class="line">System.out.println(str.trim());</span><br><span class="line"><span class="comment">//查</span></span><br><span class="line">System.out.println(str.charAt(<span class="number">0</span>));</span><br><span class="line">System.out.println(str.concat(<span class="string">"123"</span>));</span><br><span class="line">System.out.println(str.contains(<span class="string">"123"</span>));</span><br><span class="line">System.out.println(str.indexOf(<span class="string">"123"</span>));</span><br><span class="line">System.out.println(str.length());</span><br><span class="line">System.out.println(str.isEmpty());</span><br><span class="line"><span class="comment">//空的判断与念出来的含义相符合：如果数组不为空</span></span><br><span class="line"><span class="keyword">if</span>(!str.isEmpty())&#123;</span><br><span class="line">    System.out.println(<span class="string">"no empty"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//可变长字符对象有StringBuffer和StringBuilder</span></span><br><span class="line"><span class="comment">//StringBuffer是线程同步的</span></span><br><span class="line"><span class="comment">//StringBuilder线程不同步</span></span><br><span class="line"><span class="comment">//.append()功能速度上StringBuilder&gt;StringBuffer&gt;String</span></span><br></pre></td></tr></table></figure><h1 id="日期相关类"><a href="#日期相关类" class="headerlink" title="日期相关类"></a>日期相关类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Calendar</span></span><br><span class="line"><span class="keyword">import</span> java.text.DateFormat;</span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCalendar</span> </span>&#123;</span><br><span class="line">    <span class="comment">//格式化声明</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">    <span class="comment">//日期实例</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Calendar startDate = Calendar.getInstance();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Calendar endDate = Calendar.getInstance();</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> DateFormat df = DateFormat.getDateInstance();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Date earlydate = <span class="keyword">new</span> Date();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Date latedate = <span class="keyword">new</span> Date();</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计算两个时间相差多少个年</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> early</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> late</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> ParseException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">yearsBetween</span><span class="params">(String start, String end)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        <span class="comment">//Str -&gt; format -&gt; set</span></span><br><span class="line">startDate.setTime(sdf.parse(start));</span><br><span class="line">endDate.setTime(sdf.parse(end));</span><br><span class="line"><span class="keyword">return</span> (endDate.get(Calendar.YEAR) - startDate.get(Calendar.YEAR));</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计算两个时间相差多少个月</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> date1</span></span><br><span class="line"><span class="comment"> *            &lt;String&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> date2</span></span><br><span class="line"><span class="comment"> *            &lt;String&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> ParseException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">monthsBetween</span><span class="params">(String start, String end)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">startDate.setTime(sdf.parse(start));</span><br><span class="line">endDate.setTime(sdf.parse(end));</span><br><span class="line"><span class="keyword">int</span> result = yearsBetween(start, end) * <span class="number">12</span> + endDate.get(Calendar.MONTH) - startDate.get(Calendar.MONTH);</span><br><span class="line"><span class="keyword">return</span> result == <span class="number">0</span> ? <span class="number">1</span> : Math.abs(result);</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">————————————————</span><br><span class="line">版权声明：本文为CSDN博主「浅沫微雨」的原创文章，遵循 CC <span class="number">4.0</span> BY-SA 版权协议，转载请附上原文出处链接及本声明。</span><br><span class="line">原文链接：https:<span class="comment">//blog.csdn.net/L_hb123/java/article/details/59058209</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>qing-ping-le</title>
      <link href="/2020/04/11/qing-ping-le/"/>
      <url>/2020/04/11/qing-ping-le/</url>
      
        <content type="html"><![CDATA[<h1 id="官家关于大赦天下答大娘娘的话"><a href="#官家关于大赦天下答大娘娘的话" class="headerlink" title="官家关于大赦天下答大娘娘的话"></a>官家关于大赦天下答大娘娘的话</h1><p>矛盾点：你把反对我的人都赦免了，告述天下朝堂已在你的掌控之中，你这是为我祈福吗？</p><p>官家站在大娘娘的角度考虑，同意部分大娘娘的说法，但是把原因和目的上升到一个更高的维度，符合双方共同的着力点——维护大宋的江山去说明：反对你的那些人是眼光狭隘了些，但是也不是什么大奸大恶之人，还是忠君为国的能臣，释放他们让他们继续发光发热不正是为了让大宋更加的繁荣吗？</p>]]></content>
      
      
      <categories>
          
          <category> 随想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 观后感 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>json解析</title>
      <link href="/2020/04/09/java-json-object/"/>
      <url>/2020/04/09/java-json-object/</url>
      
        <content type="html"><![CDATA[<h1 id="json用法"><a href="#json用法" class="headerlink" title="json用法"></a>json用法</h1><p>使用阿里的fastjson包。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用到的两个类</span></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON; </span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"></span><br><span class="line"><span class="comment">//javaObj 到 jsonSrt（两种方法）</span></span><br><span class="line">String jsonStr = JSON.toJSONString(Obj);</span><br><span class="line">String jsonStr = JSONObject.toJSONString(Obj); </span><br><span class="line"></span><br><span class="line"><span class="comment">//jsonStr 到javaObj（两种方法）</span></span><br><span class="line"><span class="comment">//(1) jsonStr -&gt; JSONObject -&gt; javaObj</span></span><br><span class="line">JSONObject jsonObj = JSON.parseObject(jsonStr); <span class="comment">//jsonStr -&gt; JSONObject</span></span><br><span class="line">Object javaObj = JSON.toJavaObject(jsonObj, Object.class); <span class="comment">//JSONObject -&gt; javaObj</span></span><br><span class="line"><span class="comment">//(2)</span></span><br><span class="line">Object obj = JSON.parseObject(jsonStr, Object.class);<span class="comment">//jsonStr -&gt; javaObj</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//写jsonStr注意json串的引号需要转义</span></span><br><span class="line">String jsonString = <span class="string">"&#123;\"name\":38,\"name\":\"mkyong\"&#125;"</span>;</span><br></pre></td></tr></table></figure><p>对象中有空值的处理方法(手动处理):</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyObject</span></span>&#123;&#125;</span><br><span class="line"><span class="comment">//对象转化为json对象obj -&gt; jsonStr -&gt; JSONObject;</span></span><br><span class="line">JSONObject jsonObj = JSON.parseJson(JSON.toJsonString(MyObject));</span><br><span class="line"><span class="comment">//获取对象的成员变量</span></span><br><span class="line"><span class="comment">//反射方法获取（todo）</span></span><br><span class="line"><span class="comment">//创建HashMap&lt;String, Object&gt; jsonMap,成员变量为key，jsonObj.get(key)为value</span></span><br><span class="line"><span class="keyword">if</span>(jsonObj.get(key) == <span class="keyword">null</span>)&#123;</span><br><span class="line">    jsonMap(key, <span class="string">""</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    jsonMap(key, jsonObj.get(key));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例子（测试包含json串嵌套的场景通过）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.serializer.SerializerFeature;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JSON 转换</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 把Java对象转换成json字符串</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> object 待转化为JSON字符串的Java对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> json 串 or null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">String <span class="title">parseObjToJson</span><span class="params">(T object)</span> </span>&#123;</span><br><span class="line">        String string = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//string = JSON.toJSONString(object);</span></span><br><span class="line">            string = JSONObject.toJSONString(object, SerializerFeature.PrettyFormat);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> string;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将Json字符串信息转换成对应的Java对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> json json字符串对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> c    对应的类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">parseJsonToObj</span><span class="params">(String json, Class&lt;T&gt; c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//两个都是可行的，起码我测试的时候是没问题的。</span></span><br><span class="line">            <span class="comment">//JSONObject jsonObject = JSONObject.parseObject(json);</span></span><br><span class="line"><span class="comment">//            JSONObject jsonObject = JSON.parseObject(json);</span></span><br><span class="line"><span class="comment">//            return JSON.toJavaObject(jsonObject, c);</span></span><br><span class="line">            <span class="keyword">return</span> JSON.parseObject(json, c);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 技术文档 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sing_a-song</title>
      <link href="/2020/04/04/sing-a-song/"/>
      <url>/2020/04/04/sing-a-song/</url>
      
        <content type="html"><![CDATA[<h1 id="唱歌技巧"><a href="#唱歌技巧" class="headerlink" title="唱歌技巧"></a>唱歌技巧</h1><p><a href="https://www.bilibili.com/video/BV16W411H711?from=search&seid=15896087756766310395" target="_blank" rel="noopener">参考视频教程</a></p><h2 id="第一节：使用气息"><a href="#第一节：使用气息" class="headerlink" title="第一节：使用气息"></a>第一节：使用气息</h2><ul><li><p>如何吸气（腹式呼吸）</p><ul><li><p>练习方法： </p><p>吸气，气沉小腹，嘟嘴巴唱“都咧咪法搜”；</p></li><li><p>小诀窍：叹气的感觉，狗喘气</p></li></ul></li><li><p>什么时候吸气</p><ul><li>多听歌。</li></ul></li><li><p>气息怎么控制：</p><ul><li>深呼吸，憋气，加动作辅助（下蹲）</li><li>小诀窍：气往下沉，高音才上的去</li></ul></li></ul><h2 id="第二节：找到声音的位置"><a href="#第二节：找到声音的位置" class="headerlink" title="第二节：找到声音的位置"></a>第二节：找到声音的位置</h2><ul><li>说话</li><li>唱歌<ul><li>微笑！打开口盖<ul><li>开口音：a a a a a</li><li>闭口音：mi yi yi yi yi</li></ul></li><li>分别说和唱的区别</li><li>感觉有没有用上气息</li></ul></li><li>共鸣<ul><li>胸腔共鸣 手放在胸前 气下沉  振动</li><li>鼻腔共鸣 手指放在鼻子，气下沉</li><li>头腔共鸣 手指一直往上找最高音，气下沉</li></ul></li></ul><h2 id="使用颤音"><a href="#使用颤音" class="headerlink" title="使用颤音"></a>使用颤音</h2>]]></content>
      
      
      <categories>
          
          <category> 生活向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 唱歌技巧 </tag>
            
            <tag> 喜欢的歌 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>兼听则明</title>
      <link href="/2020/03/31/2020-03-31/"/>
      <url>/2020/03/31/2020-03-31/</url>
      
        <content type="html"><![CDATA[<p>我对综艺节目歌手关注越来越少了，今年注意到的时候已经播出两期了。节目虽然没看，倒是在知乎看到的些许的讨论，讨论的一个焦点是华晨宇，另一个便是黄霄云。那会关于黄霄云的讨论重点一个是说她专捡软柿子捏，奇袭毛不易，一个是说炫技大过于表达，还有一个是说情商不行的。一通这么漫无目的的浏览下来，对于黄的歌唱实力顶尖、唯比赛论和情商待提高的固执小姑凉形象就形成了。这之后开始看黄的表演就觉得歌唱的很好，但是就觉得太比赛化，唱的很动听，却没能打动我。</p><p>今天歌单随机播放循环到了一首《连名带姓》，瞬间被打动了，打开一看，正是黄的演唱，脑海中一些蹦出了疑问：那会歌手舞台听的时候怎么没有感觉？点开歌曲评论，画风与知乎上的风格天差地别，我摘几条：</p><blockquote><p>歌手本来就是综艺，可怜只有黄把它当比赛；</p><p>放弃了保研，最后一门课因为档期冲突放弃了；</p><p>这届歌手中唯一一个可以让我单曲循环的歌手，其他歌手的歌都没意思，没了黄，甚至不想看，一帮老油条；</p></blockquote><blockquote><p>汪峰：考中央音乐学院（给你写推荐信）</p><p>林俊杰：我想要认识你</p><p>萧敬腾：天分的歌者</p><p>华晨宇：未来非常顶尖的歌手</p><p>键盘侠：没感情，只会炫技，快淘汰吧。</p></blockquote><p>暂不论这些评论的是否有失偏颇，但是确实那个当下让我从正面的视角感受到了黄的认真，想赢的决心，通过《连名带姓》这首歌也感受她的真挚和实力。我诧异自己之前仅仅是看了相关的评论就莫名其妙给人贴上那些恶劣的标签，诧异自己连黄是谁都不知道的情况下就敢武断的做出判断，用有色眼镜去看待她的表演。</p><p>于是我不禁思考：一个与我们相隔十万八千里的人，怎么对她产生情感倾向？</p><p>往往我们被动接受各种带着明显的感情倾向讯息，就容易人云亦云，不经思考给别人贴上刻板标签。如果自己亲眼所见的场景让你产生情绪，那这种情绪就是最直接你对这个人的观感，无需怀疑。如果未对一个人所做所为有过亲眼目睹，只是道听、途说，那么不要轻易做出判断，一定要看看好的说法和坏的说法，<strong>兼听则明</strong>。</p><p>对每一件事要有自己发自内心认同的判断，这个判断需要在看到好坏两面后做出。</p><p>可能你会说，兼听需要花费时间成本，犯不着这么较真。这也没错，但是如果可以，在给任何一个贴上标签的时候，尽量都慎重些，不了解最好就不做判断，特别是下意识的判断。</p>]]></content>
      
      
      <categories>
          
          <category> 随记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随想 </tag>
            
            <tag> 生活原则 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>how-to-live</title>
      <link href="/2020/03/29/how-to-live/"/>
      <url>/2020/03/29/how-to-live/</url>
      
        <content type="html"><![CDATA[<p>周五晚上在学校的论坛浏览后，有一句话一直在脑海中出现，大意是：</p><p><code>生活其实很纯粹，快乐也很简单，在学习的时间学习，累了就在被窝里看一部电影，疗愈自己，看完就乖乖睡觉，不要被那些琐碎的想法纠缠，没有意义。</code></p><p>然后周末下意识按照这样的方式去生活，在起床的时间起床，在学习的时间学习，在休息的时间就真的放下手机，好好休息，在锻炼的时间就穿好装备去锻炼，在被窝的时间就打开一部电影，好好沉浸其中。</p><p>自律的感觉、休息的感觉、偷懒的感觉都享受到了，挺不错。</p><p>生活本身是复杂的，如何让生活简单快乐是一门艺术啊。</p>]]></content>
      
      
      <categories>
          
          <category> 总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随想 </tag>
            
            <tag> 生活向 </tag>
            
            <tag> 零碎想法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>writing-skills</title>
      <link href="/2020/03/24/writing-skills/"/>
      <url>/2020/03/24/writing-skills/</url>
      
        <content type="html"><![CDATA[<h1 id="知乎评价周杰伦"><a href="#知乎评价周杰伦" class="headerlink" title="知乎评价周杰伦"></a>知乎评价周杰伦</h1><p>看看人家如何行文，做一下分析记录：</p><p>迷茫是年轻人的常事。</p><p>我在身边看到了这个时代年轻人的迷茫。我从书里看到了过去很多时代年轻人的迷茫。</p><p>身边的朋友对我说，看到许多我们已经习以为常的事情和观点跨越过一代人的鸿沟在上一代人的眼里竟如洪水猛兽般面目可憎，而他们才占据着这个社会的主流。</p><p>我告诉他不是这样的。</p><p>我给你讲个故事，这个故事是关于周杰伦的。</p><p>作者：子由<br>链接：<a href="https://www.zhihu.com/question/21850419/answer/204892310" target="_blank" rel="noopener">https://www.zhihu.com/question/21850419/answer/204892310</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java线程协作学习</title>
      <link href="/2020/03/19/example-for-thread-learnning/"/>
      <url>/2020/03/19/example-for-thread-learnning/</url>
      
        <content type="html"><![CDATA[<p>今天学习Java多线程的协作方法，接触到了几种锁，来规定了多个线程的协作方式，今天的学习方法特别适用于说明例子化学习的好处。</p><p><code>例子化学习就是每一处知识点通过一个例子来比喻或者应用，判断自己掌握这个知识点的方法就是把这个例子说一遍或者实现一遍。</code></p><p>这种方法让每一个知识点在脑海里都是一张图，一个画面，一个场景，积累多了，脑中自成一片天地。</p><p>具体到今天的学习：</p><ul><li>基本的读写锁Lock 应用于奶茶店买奶茶：顾客买奶茶是单独读线程协作，老板写订单和员工的读订单是分别的读写线程协作，用Lock就可以管理；</li><li>计量锁 Semaphone 对应与停车场停车：停车场的大小是固定的，多车是否可以停车，停车线程的管理用Semaphone锁管理；</li><li>门闩锁 Latch锁 对应 百米赛跑。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随想 </tag>
            
            <tag> 总结 </tag>
            
            <tag> 学习原则 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM框架</title>
      <link href="/2020/03/17/microService/"/>
      <url>/2020/03/17/microService/</url>
      
        <content type="html"><![CDATA[<h1 id="自上而下学习"><a href="#自上而下学习" class="headerlink" title="自上而下学习"></a>自上而下学习</h1><p><a href="https://www.zhihu.com/question/328810338/answer/720393487" target="_blank" rel="noopener">什么是SSM框架</a></p><h2 id="Spring学习"><a href="#Spring学习" class="headerlink" title="Spring学习"></a>Spring学习</h2><p>已经学习结束，</p><p>使用的教程：<a href="https://www.bilibili.com/video/av47952931" target="_blank" rel="noopener">https://www.bilibili.com/video/av47952931</a></p><p>笔记在代码中，在D:\course\javaProject\21-IDEA-projects</p><h2 id="Mybatis学习"><a href="#Mybatis学习" class="headerlink" title="Mybatis学习"></a>Mybatis学习</h2><p>实现一个例子：<a href="https://segmentfault.com/a/1190000013661958#item-3-3" target="_blank" rel="noopener">https://segmentfault.com/a/1190000013661958#item-3-3</a></p><p>D:\course\javaProject\MybatisLearning</p><blockquote><p>MySQL基本介绍：<a href="https://www.runoob.com/mysql/mysql-install.html" target="_blank" rel="noopener">https://www.runoob.com/mysql/mysql-install.html</a></p></blockquote><p><strong><em>TODO</em></strong></p><h2 id="关注的主页和博客参考"><a href="#关注的主页和博客参考" class="headerlink" title="关注的主页和博客参考"></a>关注的主页和博客参考</h2><ol><li><p><a href="https://www.zhihu.com/people/Java_3y" target="_blank" rel="noopener">Java3y</a></p><blockquote><p>这位哥们也是刚工作的，写的java知识点大全，写的很不错，学习加交流：<a href="https://segmentfault.com/blog/java_3y?page=2" target="_blank" rel="noopener">https://segmentfault.com/blog/java_3y?page=2</a></p></blockquote></li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> 后台技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SSM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>laugh-moment</title>
      <link href="/2020/03/15/laugh-moment/"/>
      <url>/2020/03/15/laugh-moment/</url>
      
        <content type="html"><![CDATA[<ol><li><blockquote><p>“其实我挺羡慕火车的”</p><p>“为什么”</p><p>“他们连擦肩而过都那么久”</p></blockquote></li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> 笑 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活向 </tag>
            
            <tag> 逗比 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每周总结</title>
      <link href="/2020/03/15/week-summary/"/>
      <url>/2020/03/15/week-summary/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><h1 id="长期的目标"><a href="#长期的目标" class="headerlink" title="长期的目标"></a>长期的目标</h1><ul><li><input disabled type="checkbox"> Java基础</li><li><input disabled type="checkbox"> 微服务框架</li><li><input disabled type="checkbox"> sh 脚本</li><li><input disabled type="checkbox"> 理财入门</li><li><input disabled type="checkbox"> 大数据</li></ul><blockquote><p>以上描述太过粗糙，待进一步细化。</p></blockquote><h1 id="2020"><a href="#2020" class="headerlink" title="2020"></a>2020</h1><h2 id="03-09-03-15"><a href="#03-09-03-15" class="headerlink" title="03/09 - 03/15"></a>03/09 - 03/15</h2><ol><li><p>博客使用习惯初步养成，记住了这句话</p><p><code>如果你在输入的时候很爽，那么你在使用的时候肯定很不爽</code></p></li><li><p>理财计划开始准备，大腿和渠道初步整理中</p></li><li><p>听了一次微服务的讲座，搭建一套微服务框架需要学的东西很多，需要加快自己的学习进度</p></li><li><p>Be brave at the first time, keep someone in the mind and insist on, present what I want to show.</p></li><li><p>完成Java多线程的写法和多线程管理的方法：如何确保资源共享的准确性？了解了线程状态转换的方法，主动转换相比被动转换的优势在哪？了解避免死锁的方法。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结归纳 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>理财入门记录</title>
      <link href="/2020/03/14/money-thoughts/"/>
      <url>/2020/03/14/money-thoughts/</url>
      
        <content type="html"><![CDATA[<h1 id="理财入门的一些想法"><a href="#理财入门的一些想法" class="headerlink" title="理财入门的一些想法"></a>理财入门的一些想法</h1><p>进入了2020年，新的时代20年代来临，这个时刻真的尤为魔幻。2020是中国实现全面小康的一个标志年，在国家层面是一个关键的时间节点，结果一年伊始，疫情爆发，世界格局正在发生某种从未用过的动荡，反馈到股市上，一场魔幻涨跌大戏正在上演，生逢其时，真的是时刻在见证历史，我都想用上波澜壮阔这种词语来形容自己这个时代了。动荡的时机，本质来看，就是一场资源的重分配，凶险中孕育着的都是机会，试问谁想旁观历史，而不跃跃欲试，投身其中呢？我也想。</p><p>去年毕业入职，到今年，我转正了，正式宣告自己脱离了学生身份，在见证历史的这个星期，我领取了人生第一份正式工资，从千级迈入了万级，数量级的提升极大膨胀我的某种莫名奇妙的自信——我有闲钱了啊，我怎么可以让自己的钱只是在账户里“躺尸”。</p><p>这个星期，也切实经历一次与理财相关的实践，买了人生第一份保险，给自己，给父母。切实感觉到跟钱相关的玩法切实蕴含各种智慧，愈发觉得有趣。</p><p>伴随着雨声，昨晚确实睡了一个好觉，早上起来，看到美股突然全线飘红，这种理财的意动真是瞬间火山喷发。但是万事都有章法，冲动行事最多成为那一撮翠绿绿的韭菜。抱大腿，补基础，双管齐下才是正道。</p><p>所以，开始吧！</p>]]></content>
      
      
      <categories>
          
          <category> 理财 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 理财 </tag>
            
            <tag> 入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工作随记</title>
      <link href="/2020/03/11/work-thoughts/"/>
      <url>/2020/03/11/work-thoughts/</url>
      
        <content type="html"><![CDATA[<h1 id="记一次建行大学分享讲座"><a href="#记一次建行大学分享讲座" class="headerlink" title="记一次建行大学分享讲座"></a>记一次建行大学分享讲座</h1><p><code>time</code>:<code>2020/03/11</code></p><p>今天参与上海分行开发一处分享微服务实践的讲座，并浏览了他们团队的confluence，很有意思的一个团队，心向往之。</p><p>所在团队也面临着技术转型，今天讲座分享的一整套微服务框架实践方案确实很有吸引力，希望能汲取其中的养分，在所在团队做出贡献。见贤思齐焉啊，加油吧。</p><p>想到这，心理也难免失落，身边如果有这样一个团队就好了，一个人前进的力量太缓慢了。不够脚下的路都是自己选择的结果，机会会给有准备的人，所以即使龟速前进，也要继续积蓄力量。</p><p>今日收获：</p><ul><li>开发一处的confluence，实践中可借鉴</li><li>java springboot 微服务很好玩，继续坚持这条路走下去吧</li></ul><h1 id="流程性工作怎么做好呢？"><a href="#流程性工作怎么做好呢？" class="headerlink" title="流程性工作怎么做好呢？"></a>流程性工作怎么做好呢？</h1><p>今天发现自己上线前的准备还是遗漏了一个事情，就是用户测试报告，同时对上线的材料准备时间节点都没有卡的很好，导致最后手忙脚乱，怎么办比较好？</p><ul><li>流程性的东西整理成一个思维导图，可以使用百度的process on，封板前两天拿出来核对一遍。</li><li>思维导图上体现两点：何时何事 when and what。思维导图整理好了，贴在下面提醒自己。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 工作心得 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>朴素想法在实际中的应用</title>
      <link href="/2020/03/11/simple-philosophy-apply/"/>
      <url>/2020/03/11/simple-philosophy-apply/</url>
      
        <content type="html"><![CDATA[<h1 id="TCP-IP协议的三次握手"><a href="#TCP-IP协议的三次握手" class="headerlink" title="TCP/IP协议的三次握手"></a>TCP/IP协议的三次握手</h1><p><a href="https://zhuanlan.zhihu.com/p/24860273" target="_blank" rel="noopener">TCP协议是规定网络建立连接的方法，需要经历三次对话（握手）才能建立连接，进行数据传输</a>。为什么需要三次握手？之前是<strong><em>理解不了第三次握手的必要性</em></strong>，觉得多余。</p><p>今天理解这个疑惑的来源：连接的两端分别为A、B，我只站在连接的发起方A考虑，导致的。</p><p>这里的<strong><u>朴素想法：请求和响应是一体</u></strong>。</p><p>A发起请求，得到B的响应，做出判断；B发起请求，得到A的响应，做出判断；都可做出判断，且判断一致，连接建立就牢不可破。不要担心思维不缜密，遗漏某些特殊情况。#</p><h1 id="初步思考一个问题的方法"><a href="#初步思考一个问题的方法" class="headerlink" title="初步思考一个问题的方法"></a>初步思考一个问题的方法</h1><h2 id="图形化思维"><a href="#图形化思维" class="headerlink" title="图形化思维"></a>图形化思维</h2><p>当学习一个新的概念（偏向于过程），步骤如下：</p><ol><li><p>明确涉及的对象：发起方/接收方，请求方/接受方</p></li><li><p>明确每个对象的功能和属性</p></li><li><p>在脑海中形成对象之间的作用关系图。</p></li></ol><p><strong>检验你学习或者思考的成效的方法，就是看看自己脑子是否有对应的图形。</strong>#</p><h2 id="具体化思维"><a href="#具体化思维" class="headerlink" title="具体化思维"></a>具体化思维</h2><p>一个抽象概念很难理解和记忆，每一个难以理解的东西重点在于：</p><p><code>找到一个对应的例子记忆</code>。</p><p>故事是容易记忆的，容易表达的。</p><h2 id="分析问题的维度"><a href="#分析问题的维度" class="headerlink" title="分析问题的维度"></a>分析问题的维度</h2><p>当一个问题需要不同维度分析的时候，记得基本的两个维度：空间和时间。</p><blockquote><p>比如分析线程之间的信息共享时候信息不同步问题，先了解线程信息共享的图形化。然后从空间分析，存储共享变量的地方是否会不同步。从时间分析，同一个时刻是否会有多个操作冲突。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 随记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 零碎想法 </tag>
            
            <tag> 灵感 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何发布一篇帖子</title>
      <link href="/2020/01/22/blog-user-tutorial/"/>
      <url>/2020/01/22/blog-user-tutorial/</url>
      
        <content type="html"><![CDATA[<h1 id="提交一篇post基本操作"><a href="#提交一篇post基本操作" class="headerlink" title="提交一篇post基本操作"></a>提交一篇post基本操作</h1><ul><li><p>进入d://Blog/sourceFile/</p></li><li><p>新建post:</p><p>hexo new post PathName</p></li><li><p>编辑文本：使用<a href="https://www.typora.io/" target="_blank" rel="noopener">Typora</a>编辑文本</p></li><li><p>hexo g :编译</p></li><li><p>hexo s：本地展示</p></li><li><p>hexo d：推送到线上</p></li><li><p>查看生成结果（需要等待一段时间）</p></li></ul><h1 id="Blog的搭建参考"><a href="#Blog的搭建参考" class="headerlink" title="Blog的搭建参考"></a>Blog的搭建参考</h1><p><a href="https://www.simon96.online/2018/10/12/hexo-tutorial/" target="_blank" rel="noopener">参考的教程</a></p>]]></content>
      
      
      <categories>
          
          <category> 使用说明书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tutorial </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
